#!/usr/bin/env python
# -*- coding: utf-8 -*- 

#
# Generated Wed Dec  5 13:54:35 2012 by generateDS.py version 2.7c.
#

import sys
import getopt
import re as re_

etree_ = None
Verbose_import_ = False
(   XMLParser_import_none, XMLParser_import_lxml,
    XMLParser_import_elementtree
    ) = range(3)
XMLParser_import_library = None
try:
    # lxml
    from lxml import etree as etree_
    XMLParser_import_library = XMLParser_import_lxml
    if Verbose_import_:
        print("running with lxml.etree")
except ImportError:
    try:
        # cElementTree from Python 2.5+
        import xml.etree.cElementTree as etree_
        XMLParser_import_library = XMLParser_import_elementtree
        if Verbose_import_:
            print("running with cElementTree on Python 2.5+")
    except ImportError:
        try:
            # ElementTree from Python 2.5+
            import xml.etree.ElementTree as etree_
            XMLParser_import_library = XMLParser_import_elementtree
            if Verbose_import_:
                print("running with ElementTree on Python 2.5+")
        except ImportError:
            raise ImportError("Failed to import ElementTree from any known place")

def parsexml_(*args, **kwargs):
    if (XMLParser_import_library == XMLParser_import_lxml and
        'parser' not in kwargs):
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        kwargs['parser'] = etree_.ETCompatXMLParser()
    doc = etree_.parse(*args, **kwargs)
    return doc

#
# User methods
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError, exp:

    class GeneratedsSuper(object):
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_validate_string(self, input_data, node, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def gds_validate_integer(self, input_data, node, input_name=''):
            return input_data
        def gds_format_integer_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_integer_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    fvalue = float(value)
                except (TypeError, ValueError), exp:
                    raise_parse_error(node, 'Requires sequence of integers')
            return input_data
        def gds_format_float(self, input_data, input_name=''):
            return '%f' % input_data
        def gds_validate_float(self, input_data, node, input_name=''):
            return input_data
        def gds_format_float_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_float_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    fvalue = float(value)
                except (TypeError, ValueError), exp:
                    raise_parse_error(node, 'Requires sequence of floats')
            return input_data
        def gds_format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def gds_validate_double(self, input_data, node, input_name=''):
            return input_data
        def gds_format_double_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_double_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    fvalue = float(value)
                except (TypeError, ValueError), exp:
                    raise_parse_error(node, 'Requires sequence of doubles')
            return input_data
        def gds_format_boolean(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_boolean(self, input_data, node, input_name=''):
            return input_data
        def gds_format_boolean_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_boolean_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                if value not in ('true', '1', 'false', '0', ):
                    raise_parse_error(node, 'Requires sequence of booleans ("true", "1", "false", "0")')
            return input_data
        def gds_str_lower(self, instring):
            return instring.lower()
        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'\{.*\}')
        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)
        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1
        def gds_build_any(self, node, type_name=None):
            return None


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = 'ascii'
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')

#
# Support/utility functions.
#

def showIndent(outfile, level, pretty_print=True):
    if pretty_print:
        for idx in range(level):
            outfile.write('    ')

def quote_xml(inStr):
    if not inStr:
        return ''
    s1 = (isinstance(inStr, basestring) and inStr or
          '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1

def quote_attrib(inStr):
    s1 = (isinstance(inStr, basestring) and inStr or
          '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1

def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1

def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text

def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name, ))
    return value


class GDSParseError(Exception):
    pass

def raise_parse_error(node, msg):
    if XMLParser_import_library == XMLParser_import_lxml:
        msg = '%s (element %s/line %d)' % (msg, node.tag, node.sourceline, )
    else:
        msg = '%s (element %s)' % (msg, node.tag, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace, pretty_print=True):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip(): 
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(outfile, level, namespace, name, pretty_print)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (self.name, self.value, self.name))
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write('model_.MixedContainer(%d, %d, "%s", "%s"),\n' % \
                (self.category, self.content_type, self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write('model_.MixedContainer(%d, %d, "%s", "%s"),\n' % \
                (self.category, self.content_type, self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write('model_.MixedContainer(%d, %d, "%s",\n' % \
                (self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0):
        self.name = name
        self.data_type = data_type
        self.container = container
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container

def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#

class CommonHeaderType(GeneratedsSuper):
    """Type definition for the common NSI message header that is sent as
    part of every NSI message exchange. Mandatory Elements:
    protocolVersion - A URI identifying the specific protocol
    version carried in this NSI message. The protocol version is
    modeled separately from the namespace of the WSDL and XML schema
    to capture behavioral changes that cannot be modeled in schema
    definition, and to avoid updating of the schema namespace.
    correlationId - An identifier provided by the requesting NSA
    used to correlate to an asynchronous response from the
    responder. It is recommended that a Universally Unique
    Identifier (UUID) URN as per IETF RFC 4122 be used as a globally
    unique value. requesterNSA - The NSA identifier for the NSA
    acting in the Requester Agent role for the specific NSI
    operation. providerNSA - The NSA identifier for the NSA acting
    in the Provider Agent role for the specific NSI operation.
    Optional Elements: replyTo - The Requester NSA's SOAP endpoint
    address to which asynchronous messages associated with this
    operation request will be delivered. This is only populated for
    the original operation request (reserve, provision, release,
    terminate, and query), and not for any additional messaging
    associated with the operation. If no endpoint value is provided
    in a operation request, then it is assumed the requester is not
    interested in a response and will use alternative mechanism to
    determine the result. sessionSecurityAttr - Security attributes
    associated with the end user's NSI session. This field can be
    used to perform authentication, authorization, and policy
    enforcement of end user requests. Is only provided in the
    operation request (reserve, provision, release, terminate, and
    query), and not for any additional messaging associated with the
    operation. any - Provides a flexible mechanism allowing
    additional elements in the protocol header for exchange between
    two peered NSA. Use of this element field is beyond the current
    scope of this NSI specification, but may be used in the future
    to extend the existing protocol without requiring a schema
    change. Additionally, the field can be used between peered NSA
    to provide additional context not covered in the existing
    specification, however, this is left up to specific peering
    agreements. Optional Attributes: anyAttribute - Provides a
    flexible mechanism allowing additional attributes in the
    protocol header for exchange between two peered NSA. Use of this
    attribute field is beyond the current scope of this NSI
    specification, but may be used in the future to extend the
    existing protocol without requiring a schema change.
    Additionally, the field can be used between peered NSA to
    provide additional context not covered in the existing
    specification, however, this is left up to specific peering
    agreements."""
    subclass = None
    superclass = None
    def __init__(self, protocolVersion=None, correlationId=None, requesterNSA=None, providerNSA=None, replyTo=None, sessionSecurityAttr=None, anytypeobjs_=None):
        self.protocolVersion = protocolVersion
        self.correlationId = correlationId
        self.requesterNSA = requesterNSA
        self.providerNSA = providerNSA
        self.replyTo = replyTo
        self.sessionSecurityAttr = sessionSecurityAttr
        if anytypeobjs_ is None:
            self.anytypeobjs_ = []
        else:
            self.anytypeobjs_ = anytypeobjs_
        self.anyAttributes_ = {}
    def factory(*args_, **kwargs_):
        if CommonHeaderType.subclass:
            return CommonHeaderType.subclass(*args_, **kwargs_)
        else:
            return CommonHeaderType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_protocolVersion(self): return self.protocolVersion
    def set_protocolVersion(self, protocolVersion): self.protocolVersion = protocolVersion
    def get_correlationId(self): return self.correlationId
    def set_correlationId(self, correlationId): self.correlationId = correlationId
    def validate_UuidType(self, value):
        # Validate type UuidType, a restriction on xsd:anyURI.
        pass
    def get_requesterNSA(self): return self.requesterNSA
    def set_requesterNSA(self, requesterNSA): self.requesterNSA = requesterNSA
    def validate_NsaIdType(self, value):
        # Validate type NsaIdType, a restriction on xsd:anyURI.
        pass
    def get_providerNSA(self): return self.providerNSA
    def set_providerNSA(self, providerNSA): self.providerNSA = providerNSA
    def get_replyTo(self): return self.replyTo
    def set_replyTo(self, replyTo): self.replyTo = replyTo
    def get_sessionSecurityAttr(self): return self.sessionSecurityAttr
    def set_sessionSecurityAttr(self, sessionSecurityAttr): self.sessionSecurityAttr = sessionSecurityAttr
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def add_anytypeobjs_(self, value): self.anytypeobjs_.append(value)
    def insert_anytypeobjs_(self, index, value): self._anytypeobjs_[index] = value
    def get_anyAttributes_(self): return self.anyAttributes_
    def set_anyAttributes_(self, anyAttributes_): self.anyAttributes_ = anyAttributes_
    def export(self, outfile, level, namespace_='fw:', name_='CommonHeaderType', namespacedef_='xmlns:fw="http://schemas.ogf.org/nsi/2012/03/framework/types"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CommonHeaderType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, '', '', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='CommonHeaderType'):
        unique_counter = 0
        for name, value in self.anyAttributes_.items():
            xsinamespaceprefix = 'xsi'
            xsinamespace1 = 'http://www.w3.org/2001/XMLSchema-instance'
            xsinamespace2 = '{%s}' % (xsinamespace1, )
            if name.startswith(xsinamespace2):
                name1 = name[len(xsinamespace2):]
                name2 = '%s:%s' % (xsinamespaceprefix, name1, )
                if name2 not in already_processed:
                    already_processed.append(name2)
                    outfile.write(' %s=%s' % (name2, quote_attrib(value), ))
            else:
                mo = re_.match(Namespace_extract_pat_, name)
                if mo is not None:
                    namespace, name = mo.group(1, 2)
                    if name not in already_processed:
                        already_processed.append(name)
                        if namespace == 'http://www.w3.org/XML/1998/namespace':
                            outfile.write(' %s=%s' % (name, quote_attrib(value), ))
                        else:
                            unique_counter += 1
                            outfile.write(' xmlns:yyy%d="%s"' % (unique_counter, namespace, ))
                            outfile.write(' yyy%d:%s=%s' % (unique_counter, name, quote_attrib(value), ))
                else:
                    if name not in already_processed:
                        already_processed.append(name)
                        outfile.write(' %s=%s' % (name, quote_attrib(value), ))
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='CommonHeaderType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.protocolVersion is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sprotocolVersion>%s</%sprotocolVersion>%s' % (namespace_, self.gds_format_string(quote_xml(self.protocolVersion).encode(ExternalEncoding), input_name='protocolVersion'), namespace_, eol_))
        if self.correlationId is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scorrelationId>%s</%scorrelationId>%s' % (namespace_, self.gds_format_string(quote_xml(self.correlationId).encode(ExternalEncoding), input_name='correlationId'), namespace_, eol_))
        if self.requesterNSA is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%srequesterNSA>%s</%srequesterNSA>%s' % (namespace_, self.gds_format_string(quote_xml(self.requesterNSA).encode(ExternalEncoding), input_name='requesterNSA'), namespace_, eol_))
        if self.providerNSA is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sproviderNSA>%s</%sproviderNSA>%s' % (namespace_, self.gds_format_string(quote_xml(self.providerNSA).encode(ExternalEncoding), input_name='providerNSA'), namespace_, eol_))
        if self.replyTo is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sreplyTo>%s</%sreplyTo>%s' % (namespace_, self.gds_format_string(quote_xml(self.replyTo).encode(ExternalEncoding), input_name='replyTo'), namespace_, eol_))
        if self.sessionSecurityAttr is not None:
            self.sessionSecurityAttr.export(outfile, level, namespace_, name_='sessionSecurityAttr', pretty_print=pretty_print)
        for obj_ in self.anytypeobjs_:
            obj_.export(outfile, level, namespace_, pretty_print=pretty_print)
    def hasContent_(self):
        if (
            self.protocolVersion is not None or
            self.correlationId is not None or
            self.requesterNSA is not None or
            self.providerNSA is not None or
            self.replyTo is not None or
            self.sessionSecurityAttr is not None or
            self.anytypeobjs_
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='CommonHeaderType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        for name, value in self.anyAttributes_.items():
            showIndent(outfile, level)
            outfile.write('%s = "%s",\n' % (name, value,))
    def exportLiteralChildren(self, outfile, level, name_):
        if self.protocolVersion is not None:
            showIndent(outfile, level)
            outfile.write('protocolVersion=%s,\n' % quote_python(self.protocolVersion).encode(ExternalEncoding))
        if self.correlationId is not None:
            showIndent(outfile, level)
            outfile.write('correlationId=%s,\n' % quote_python(self.correlationId).encode(ExternalEncoding))
        if self.requesterNSA is not None:
            showIndent(outfile, level)
            outfile.write('requesterNSA=%s,\n' % quote_python(self.requesterNSA).encode(ExternalEncoding))
        if self.providerNSA is not None:
            showIndent(outfile, level)
            outfile.write('providerNSA=%s,\n' % quote_python(self.providerNSA).encode(ExternalEncoding))
        if self.replyTo is not None:
            showIndent(outfile, level)
            outfile.write('replyTo=%s,\n' % quote_python(self.replyTo).encode(ExternalEncoding))
        if self.sessionSecurityAttr is not None:
            showIndent(outfile, level)
            outfile.write('sessionSecurityAttr=model_.AttributeStatementType(\n')
            self.sessionSecurityAttr.exportLiteral(outfile, level, name_='sessionSecurityAttr')
            showIndent(outfile, level)
            outfile.write('),\n')
        showIndent(outfile, level)
        outfile.write('anytypeobjs_=[\n')
        level += 1
        for anytypeobjs_ in self.anytypeobjs_:
            anytypeobjs_.exportLiteral(outfile, level)
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        self.anyAttributes_ = {}
        for name, value in attrs.items():
            if name not in already_processed:
                self.anyAttributes_[name] = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'protocolVersion':
            protocolVersion_ = child_.text
            protocolVersion_ = self.gds_validate_string(protocolVersion_, node, 'protocolVersion')
            self.protocolVersion = protocolVersion_
        elif nodeName_ == 'correlationId':
            correlationId_ = child_.text
            correlationId_ = self.gds_validate_string(correlationId_, node, 'correlationId')
            self.correlationId = correlationId_
            self.validate_UuidType(self.correlationId)    # validate type UuidType
        elif nodeName_ == 'requesterNSA':
            requesterNSA_ = child_.text
            requesterNSA_ = self.gds_validate_string(requesterNSA_, node, 'requesterNSA')
            self.requesterNSA = requesterNSA_
            self.validate_NsaIdType(self.requesterNSA)    # validate type NsaIdType
        elif nodeName_ == 'providerNSA':
            providerNSA_ = child_.text
            providerNSA_ = self.gds_validate_string(providerNSA_, node, 'providerNSA')
            self.providerNSA = providerNSA_
            self.validate_NsaIdType(self.providerNSA)    # validate type NsaIdType
        elif nodeName_ == 'replyTo':
            replyTo_ = child_.text
            replyTo_ = self.gds_validate_string(replyTo_, node, 'replyTo')
            self.replyTo = replyTo_
        elif nodeName_ == 'sessionSecurityAttr':
            obj_ = AttributeStatementType.factory()
            obj_.build(child_)
            self.set_sessionSecurityAttr(obj_)
        else:
            obj_ = self.gds_build_any(child_, 'CommonHeaderType')
            if obj_ is not None:
                self.add_anytypeobjs_(obj_)
# end class CommonHeaderType


class BaseIDAbstractType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, SPNameQualifier=None, NameQualifier=None):
        self.SPNameQualifier = _cast(None, SPNameQualifier)
        self.NameQualifier = _cast(None, NameQualifier)
        pass
    def factory(*args_, **kwargs_):
        if BaseIDAbstractType.subclass:
            return BaseIDAbstractType.subclass(*args_, **kwargs_)
        else:
            return BaseIDAbstractType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_SPNameQualifier(self): return self.SPNameQualifier
    def set_SPNameQualifier(self, SPNameQualifier): self.SPNameQualifier = SPNameQualifier
    def get_NameQualifier(self): return self.NameQualifier
    def set_NameQualifier(self, NameQualifier): self.NameQualifier = NameQualifier
    def export(self, outfile, level, namespace_='tns:', name_='BaseIDAbstractType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='BaseIDAbstractType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='BaseIDAbstractType'):
        if self.SPNameQualifier is not None and 'SPNameQualifier' not in already_processed:
            already_processed.append('SPNameQualifier')
            outfile.write(' SPNameQualifier=%s' % (quote_attrib(self.SPNameQualifier), ))
        if self.NameQualifier is not None and 'NameQualifier' not in already_processed:
            already_processed.append('NameQualifier')
            outfile.write(' NameQualifier=%s' % (quote_attrib(self.NameQualifier), ))
    def exportChildren(self, outfile, level, namespace_='tns:', name_='BaseIDAbstractType', fromsubclass_=False, pretty_print=True):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='BaseIDAbstractType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.SPNameQualifier is not None and 'SPNameQualifier' not in already_processed:
            already_processed.append('SPNameQualifier')
            showIndent(outfile, level)
            outfile.write('SPNameQualifier = %s,\n' % (self.SPNameQualifier,))
        if self.NameQualifier is not None and 'NameQualifier' not in already_processed:
            already_processed.append('NameQualifier')
            showIndent(outfile, level)
            outfile.write('NameQualifier = %s,\n' % (self.NameQualifier,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('SPNameQualifier', node)
        if value is not None and 'SPNameQualifier' not in already_processed:
            already_processed.append('SPNameQualifier')
            self.SPNameQualifier = value
        value = find_attr_value_('NameQualifier', node)
        if value is not None and 'NameQualifier' not in already_processed:
            already_processed.append('NameQualifier')
            self.NameQualifier = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class BaseIDAbstractType


class NameIDType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, SPProvidedID=None, SPNameQualifier=None, NameQualifier=None, Format=None, valueOf_=None):
        self.SPProvidedID = _cast(None, SPProvidedID)
        self.SPNameQualifier = _cast(None, SPNameQualifier)
        self.NameQualifier = _cast(None, NameQualifier)
        self.Format = _cast(None, Format)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if NameIDType.subclass:
            return NameIDType.subclass(*args_, **kwargs_)
        else:
            return NameIDType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_SPProvidedID(self): return self.SPProvidedID
    def set_SPProvidedID(self, SPProvidedID): self.SPProvidedID = SPProvidedID
    def get_SPNameQualifier(self): return self.SPNameQualifier
    def set_SPNameQualifier(self, SPNameQualifier): self.SPNameQualifier = SPNameQualifier
    def get_NameQualifier(self): return self.NameQualifier
    def set_NameQualifier(self, NameQualifier): self.NameQualifier = NameQualifier
    def get_Format(self): return self.Format
    def set_Format(self, Format): self.Format = Format
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def export(self, outfile, level, namespace_='tns:', name_='NameIDType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='NameIDType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(str(self.valueOf_).encode(ExternalEncoding))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='NameIDType'):
        if self.SPProvidedID is not None and 'SPProvidedID' not in already_processed:
            already_processed.append('SPProvidedID')
            outfile.write(' SPProvidedID=%s' % (quote_attrib(self.SPProvidedID), ))
        if self.SPNameQualifier is not None and 'SPNameQualifier' not in already_processed:
            already_processed.append('SPNameQualifier')
            outfile.write(' SPNameQualifier=%s' % (quote_attrib(self.SPNameQualifier), ))
        if self.NameQualifier is not None and 'NameQualifier' not in already_processed:
            already_processed.append('NameQualifier')
            outfile.write(' NameQualifier=%s' % (quote_attrib(self.NameQualifier), ))
        if self.Format is not None and 'Format' not in already_processed:
            already_processed.append('Format')
            outfile.write(' Format=%s' % (quote_attrib(self.Format), ))
    def exportChildren(self, outfile, level, namespace_='tns:', name_='NameIDType', fromsubclass_=False, pretty_print=True):
        pass
    def hasContent_(self):
        if (
            self.valueOf_
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='NameIDType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('valueOf_ = """%s""",\n' % (self.valueOf_,))
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.SPProvidedID is not None and 'SPProvidedID' not in already_processed:
            already_processed.append('SPProvidedID')
            showIndent(outfile, level)
            outfile.write('SPProvidedID = %s,\n' % (self.SPProvidedID,))
        if self.SPNameQualifier is not None and 'SPNameQualifier' not in already_processed:
            already_processed.append('SPNameQualifier')
            showIndent(outfile, level)
            outfile.write('SPNameQualifier = %s,\n' % (self.SPNameQualifier,))
        if self.NameQualifier is not None and 'NameQualifier' not in already_processed:
            already_processed.append('NameQualifier')
            showIndent(outfile, level)
            outfile.write('NameQualifier = %s,\n' % (self.NameQualifier,))
        if self.Format is not None and 'Format' not in already_processed:
            already_processed.append('Format')
            showIndent(outfile, level)
            outfile.write('Format = %s,\n' % (self.Format,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('SPProvidedID', node)
        if value is not None and 'SPProvidedID' not in already_processed:
            already_processed.append('SPProvidedID')
            self.SPProvidedID = value
        value = find_attr_value_('SPNameQualifier', node)
        if value is not None and 'SPNameQualifier' not in already_processed:
            already_processed.append('SPNameQualifier')
            self.SPNameQualifier = value
        value = find_attr_value_('NameQualifier', node)
        if value is not None and 'NameQualifier' not in already_processed:
            already_processed.append('NameQualifier')
            self.NameQualifier = value
        value = find_attr_value_('Format', node)
        if value is not None and 'Format' not in already_processed:
            already_processed.append('Format')
            self.Format = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class NameIDType


class EncryptedElementType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, EncryptedData=None, EncryptedKey=None):
        self.EncryptedData = EncryptedData
        if EncryptedKey is None:
            self.EncryptedKey = []
        else:
            self.EncryptedKey = EncryptedKey
    def factory(*args_, **kwargs_):
        if EncryptedElementType.subclass:
            return EncryptedElementType.subclass(*args_, **kwargs_)
        else:
            return EncryptedElementType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_EncryptedData(self): return self.EncryptedData
    def set_EncryptedData(self, EncryptedData): self.EncryptedData = EncryptedData
    def get_EncryptedKey(self): return self.EncryptedKey
    def set_EncryptedKey(self, EncryptedKey): self.EncryptedKey = EncryptedKey
    def add_EncryptedKey(self, value): self.EncryptedKey.append(value)
    def insert_EncryptedKey(self, index, value): self.EncryptedKey[index] = value
    def export(self, outfile, level, namespace_='tns:', name_='EncryptedElementType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='EncryptedElementType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='EncryptedElementType'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='EncryptedElementType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.EncryptedData is not None:
            self.EncryptedData.export(outfile, level, namespace_, name_='EncryptedData', pretty_print=pretty_print)
        for EncryptedKey_ in self.EncryptedKey:
            EncryptedKey_.export(outfile, level, namespace_, name_='EncryptedKey', pretty_print=pretty_print)
    def hasContent_(self):
        if (
            self.EncryptedData is not None or
            self.EncryptedKey
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='EncryptedElementType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.EncryptedData is not None:
            showIndent(outfile, level)
            outfile.write('EncryptedData=model_.EncryptedData(\n')
            self.EncryptedData.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        showIndent(outfile, level)
        outfile.write('EncryptedKey=[\n')
        level += 1
        for EncryptedKey_ in self.EncryptedKey:
            showIndent(outfile, level)
            outfile.write('model_.EncryptedKey(\n')
            EncryptedKey_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'EncryptedData':
            obj_ = EncryptedDataType.factory()
            obj_.build(child_)
            self.set_EncryptedData(obj_)
        elif nodeName_ == 'EncryptedKey':
            obj_ = EncryptedKeyType.factory()
            obj_.build(child_)
            self.EncryptedKey.append(obj_)
# end class EncryptedElementType


class AssertionType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Version=None, IssueInstant=None, ID=None, Issuer=None, Signature=None, Subject=None, Conditions=None, Advice=None, Statement=None, AuthnStatement=None, AuthzDecisionStatement=None, AttributeStatement=None):
        self.Version = _cast(None, Version)
        self.IssueInstant = _cast(None, IssueInstant)
        self.ID = _cast(None, ID)
        self.Issuer = Issuer
        self.Signature = Signature
        self.Subject = Subject
        self.Conditions = Conditions
        self.Advice = Advice
        if Statement is None:
            self.Statement = []
        else:
            self.Statement = Statement
        if AuthnStatement is None:
            self.AuthnStatement = []
        else:
            self.AuthnStatement = AuthnStatement
        if AuthzDecisionStatement is None:
            self.AuthzDecisionStatement = []
        else:
            self.AuthzDecisionStatement = AuthzDecisionStatement
        if AttributeStatement is None:
            self.AttributeStatement = []
        else:
            self.AttributeStatement = AttributeStatement
    def factory(*args_, **kwargs_):
        if AssertionType.subclass:
            return AssertionType.subclass(*args_, **kwargs_)
        else:
            return AssertionType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Issuer(self): return self.Issuer
    def set_Issuer(self, Issuer): self.Issuer = Issuer
    def get_Signature(self): return self.Signature
    def set_Signature(self, Signature): self.Signature = Signature
    def get_Subject(self): return self.Subject
    def set_Subject(self, Subject): self.Subject = Subject
    def get_Conditions(self): return self.Conditions
    def set_Conditions(self, Conditions): self.Conditions = Conditions
    def get_Advice(self): return self.Advice
    def set_Advice(self, Advice): self.Advice = Advice
    def get_Statement(self): return self.Statement
    def set_Statement(self, Statement): self.Statement = Statement
    def add_Statement(self, value): self.Statement.append(value)
    def insert_Statement(self, index, value): self.Statement[index] = value
    def get_AuthnStatement(self): return self.AuthnStatement
    def set_AuthnStatement(self, AuthnStatement): self.AuthnStatement = AuthnStatement
    def add_AuthnStatement(self, value): self.AuthnStatement.append(value)
    def insert_AuthnStatement(self, index, value): self.AuthnStatement[index] = value
    def get_AuthzDecisionStatement(self): return self.AuthzDecisionStatement
    def set_AuthzDecisionStatement(self, AuthzDecisionStatement): self.AuthzDecisionStatement = AuthzDecisionStatement
    def add_AuthzDecisionStatement(self, value): self.AuthzDecisionStatement.append(value)
    def insert_AuthzDecisionStatement(self, index, value): self.AuthzDecisionStatement[index] = value
    def get_AttributeStatement(self): return self.AttributeStatement
    def set_AttributeStatement(self, AttributeStatement): self.AttributeStatement = AttributeStatement
    def add_AttributeStatement(self, value): self.AttributeStatement.append(value)
    def insert_AttributeStatement(self, index, value): self.AttributeStatement[index] = value
    def get_Version(self): return self.Version
    def set_Version(self, Version): self.Version = Version
    def get_IssueInstant(self): return self.IssueInstant
    def set_IssueInstant(self, IssueInstant): self.IssueInstant = IssueInstant
    def get_ID(self): return self.ID
    def set_ID(self, ID): self.ID = ID
    def export(self, outfile, level, namespace_='tns:', name_='AssertionType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AssertionType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='AssertionType'):
        if self.Version is not None and 'Version' not in already_processed:
            already_processed.append('Version')
            outfile.write(' Version=%s' % (quote_attrib(self.Version), ))
        if self.IssueInstant is not None and 'IssueInstant' not in already_processed:
            already_processed.append('IssueInstant')
            outfile.write(' IssueInstant=%s' % (quote_attrib(self.IssueInstant), ))
        if self.ID is not None and 'ID' not in already_processed:
            already_processed.append('ID')
            outfile.write(' ID=%s' % (quote_attrib(self.ID), ))
    def exportChildren(self, outfile, level, namespace_='tns:', name_='AssertionType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Issuer is not None:
            self.Issuer.export(outfile, level, namespace_, name_='Issuer', pretty_print=pretty_print)
        if self.Signature is not None:
            self.Signature.export(outfile, level, namespace_, name_='Signature', pretty_print=pretty_print)
        if self.Subject is not None:
            self.Subject.export(outfile, level, namespace_, name_='Subject', pretty_print=pretty_print)
        if self.Conditions is not None:
            self.Conditions.export(outfile, level, namespace_, name_='Conditions', pretty_print=pretty_print)
        if self.Advice is not None:
            self.Advice.export(outfile, level, namespace_, name_='Advice', pretty_print=pretty_print)
        for Statement_ in self.Statement:
            Statement_.export(outfile, level, namespace_, name_='Statement', pretty_print=pretty_print)
        for AuthnStatement_ in self.AuthnStatement:
            AuthnStatement_.export(outfile, level, namespace_, name_='AuthnStatement', pretty_print=pretty_print)
        for AuthzDecisionStatement_ in self.AuthzDecisionStatement:
            AuthzDecisionStatement_.export(outfile, level, namespace_, name_='AuthzDecisionStatement', pretty_print=pretty_print)
        for AttributeStatement_ in self.AttributeStatement:
            AttributeStatement_.export(outfile, level, namespace_, name_='AttributeStatement', pretty_print=pretty_print)
    def hasContent_(self):
        if (
            self.Issuer is not None or
            self.Signature is not None or
            self.Subject is not None or
            self.Conditions is not None or
            self.Advice is not None or
            self.Statement or
            self.AuthnStatement or
            self.AuthzDecisionStatement or
            self.AttributeStatement
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='AssertionType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.Version is not None and 'Version' not in already_processed:
            already_processed.append('Version')
            showIndent(outfile, level)
            outfile.write('Version = %s,\n' % (self.Version,))
        if self.IssueInstant is not None and 'IssueInstant' not in already_processed:
            already_processed.append('IssueInstant')
            showIndent(outfile, level)
            outfile.write('IssueInstant = %s,\n' % (self.IssueInstant,))
        if self.ID is not None and 'ID' not in already_processed:
            already_processed.append('ID')
            showIndent(outfile, level)
            outfile.write('ID = %s,\n' % (self.ID,))
    def exportLiteralChildren(self, outfile, level, name_):
        if self.Issuer is not None:
            showIndent(outfile, level)
            outfile.write('Issuer=model_.Issuer(\n')
            self.Issuer.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.Signature is not None:
            showIndent(outfile, level)
            outfile.write('Signature=model_.Signature(\n')
            self.Signature.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.Subject is not None:
            showIndent(outfile, level)
            outfile.write('Subject=model_.Subject(\n')
            self.Subject.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.Conditions is not None:
            showIndent(outfile, level)
            outfile.write('Conditions=model_.Conditions(\n')
            self.Conditions.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.Advice is not None:
            showIndent(outfile, level)
            outfile.write('Advice=model_.Advice(\n')
            self.Advice.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        showIndent(outfile, level)
        outfile.write('Statement=[\n')
        level += 1
        for Statement_ in self.Statement:
            showIndent(outfile, level)
            outfile.write('model_.Statement(\n')
            Statement_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('AuthnStatement=[\n')
        level += 1
        for AuthnStatement_ in self.AuthnStatement:
            showIndent(outfile, level)
            outfile.write('model_.AuthnStatement(\n')
            AuthnStatement_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('AuthzDecisionStatement=[\n')
        level += 1
        for AuthzDecisionStatement_ in self.AuthzDecisionStatement:
            showIndent(outfile, level)
            outfile.write('model_.AuthzDecisionStatement(\n')
            AuthzDecisionStatement_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('AttributeStatement=[\n')
        level += 1
        for AttributeStatement_ in self.AttributeStatement:
            showIndent(outfile, level)
            outfile.write('model_.AttributeStatement(\n')
            AttributeStatement_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Version', node)
        if value is not None and 'Version' not in already_processed:
            already_processed.append('Version')
            self.Version = value
        value = find_attr_value_('IssueInstant', node)
        if value is not None and 'IssueInstant' not in already_processed:
            already_processed.append('IssueInstant')
            self.IssueInstant = value
        value = find_attr_value_('ID', node)
        if value is not None and 'ID' not in already_processed:
            already_processed.append('ID')
            self.ID = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Issuer':
            obj_ = NameIDType.factory()
            obj_.build(child_)
            self.set_Issuer(obj_)
        elif nodeName_ == 'Signature':
            obj_ = SignatureType.factory()
            obj_.build(child_)
            self.set_Signature(obj_)
        elif nodeName_ == 'Subject':
            obj_ = SubjectType.factory()
            obj_.build(child_)
            self.set_Subject(obj_)
        elif nodeName_ == 'Conditions':
            obj_ = ConditionsType.factory()
            obj_.build(child_)
            self.set_Conditions(obj_)
        elif nodeName_ == 'Advice':
            obj_ = AdviceType.factory()
            obj_.build(child_)
            self.set_Advice(obj_)
        elif nodeName_ == 'Statement':
            class_obj_ = self.get_class_obj_(child_, StatementAbstractType)
            obj_ = class_obj_.factory()
            obj_.build(child_)
            self.Statement.append(obj_)
        elif nodeName_ == 'AuthnStatement':
            obj_ = AuthnStatementType.factory()
            obj_.build(child_)
            self.AuthnStatement.append(obj_)
        elif nodeName_ == 'AuthzDecisionStatement':
            obj_ = AuthzDecisionStatementType.factory()
            obj_.build(child_)
            self.AuthzDecisionStatement.append(obj_)
        elif nodeName_ == 'AttributeStatement':
            obj_ = AttributeStatementType.factory()
            obj_.build(child_)
            self.AttributeStatement.append(obj_)
# end class AssertionType


class SubjectType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, BaseID=None, NameID=None, EncryptedID=None, SubjectConfirmation=None):
        self.BaseID = BaseID
        self.NameID = NameID
        self.EncryptedID = EncryptedID
        if SubjectConfirmation is None:
            self.SubjectConfirmation = []
        else:
            self.SubjectConfirmation = SubjectConfirmation
        if SubjectConfirmation is None:
            self.SubjectConfirmation = []
        else:
            self.SubjectConfirmation = SubjectConfirmation
    def factory(*args_, **kwargs_):
        if SubjectType.subclass:
            return SubjectType.subclass(*args_, **kwargs_)
        else:
            return SubjectType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_BaseID(self): return self.BaseID
    def set_BaseID(self, BaseID): self.BaseID = BaseID
    def get_NameID(self): return self.NameID
    def set_NameID(self, NameID): self.NameID = NameID
    def get_EncryptedID(self): return self.EncryptedID
    def set_EncryptedID(self, EncryptedID): self.EncryptedID = EncryptedID
    def get_SubjectConfirmation(self): return self.SubjectConfirmation
    def set_SubjectConfirmation(self, SubjectConfirmation): self.SubjectConfirmation = SubjectConfirmation
    def add_SubjectConfirmation(self, value): self.SubjectConfirmation.append(value)
    def insert_SubjectConfirmation(self, index, value): self.SubjectConfirmation[index] = value
    def get_SubjectConfirmation(self): return self.SubjectConfirmation
    def set_SubjectConfirmation(self, SubjectConfirmation): self.SubjectConfirmation = SubjectConfirmation
    def add_SubjectConfirmation(self, value): self.SubjectConfirmation.append(value)
    def insert_SubjectConfirmation(self, index, value): self.SubjectConfirmation[index] = value
    def export(self, outfile, level, namespace_='tns:', name_='SubjectType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SubjectType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='SubjectType'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='SubjectType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.BaseID is not None:
            self.BaseID.export(outfile, level, namespace_, name_='BaseID', pretty_print=pretty_print)
        if self.NameID is not None:
            self.NameID.export(outfile, level, namespace_, name_='NameID', pretty_print=pretty_print)
        if self.EncryptedID is not None:
            self.EncryptedID.export(outfile, level, namespace_, name_='EncryptedID', pretty_print=pretty_print)
        for SubjectConfirmation_ in self.SubjectConfirmation:
            SubjectConfirmation_.export(outfile, level, namespace_, name_='SubjectConfirmation', pretty_print=pretty_print)
        for SubjectConfirmation_ in self.SubjectConfirmation:
            SubjectConfirmation_.export(outfile, level, namespace_, name_='SubjectConfirmation', pretty_print=pretty_print)
    def hasContent_(self):
        if (
            self.BaseID is not None or
            self.NameID is not None or
            self.EncryptedID is not None or
            self.SubjectConfirmation or
            self.SubjectConfirmation
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='SubjectType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.BaseID is not None:
            showIndent(outfile, level)
            outfile.write('BaseID=model_.BaseID(\n')
            self.BaseID.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.NameID is not None:
            showIndent(outfile, level)
            outfile.write('NameID=model_.NameID(\n')
            self.NameID.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.EncryptedID is not None:
            showIndent(outfile, level)
            outfile.write('EncryptedID=model_.EncryptedID(\n')
            self.EncryptedID.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        showIndent(outfile, level)
        outfile.write('SubjectConfirmation=[\n')
        level += 1
        for SubjectConfirmation_ in self.SubjectConfirmation:
            showIndent(outfile, level)
            outfile.write('model_.SubjectConfirmation(\n')
            SubjectConfirmation_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('SubjectConfirmation=[\n')
        level += 1
        for SubjectConfirmation_ in self.SubjectConfirmation:
            showIndent(outfile, level)
            outfile.write('model_.SubjectConfirmation(\n')
            SubjectConfirmation_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'BaseID':
            obj_ = BaseIDAbstractType.factory()
            obj_.build(child_)
            self.set_BaseID(obj_)
        elif nodeName_ == 'NameID':
            obj_ = NameIDType.factory()
            obj_.build(child_)
            self.set_NameID(obj_)
        elif nodeName_ == 'EncryptedID':
            obj_ = EncryptedElementType.factory()
            obj_.build(child_)
            self.set_EncryptedID(obj_)
        elif nodeName_ == 'SubjectConfirmation':
            obj_ = SubjectConfirmationType.factory()
            obj_.build(child_)
            self.SubjectConfirmation.append(obj_)
        elif nodeName_ == 'SubjectConfirmation':
            obj_ = SubjectConfirmationType.factory()
            obj_.build(child_)
            self.SubjectConfirmation.append(obj_)
# end class SubjectType


class SubjectConfirmationType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Method=None, BaseID=None, NameID=None, EncryptedID=None, SubjectConfirmationData=None):
        self.Method = _cast(None, Method)
        self.BaseID = BaseID
        self.NameID = NameID
        self.EncryptedID = EncryptedID
        self.SubjectConfirmationData = SubjectConfirmationData
    def factory(*args_, **kwargs_):
        if SubjectConfirmationType.subclass:
            return SubjectConfirmationType.subclass(*args_, **kwargs_)
        else:
            return SubjectConfirmationType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_BaseID(self): return self.BaseID
    def set_BaseID(self, BaseID): self.BaseID = BaseID
    def get_NameID(self): return self.NameID
    def set_NameID(self, NameID): self.NameID = NameID
    def get_EncryptedID(self): return self.EncryptedID
    def set_EncryptedID(self, EncryptedID): self.EncryptedID = EncryptedID
    def get_SubjectConfirmationData(self): return self.SubjectConfirmationData
    def set_SubjectConfirmationData(self, SubjectConfirmationData): self.SubjectConfirmationData = SubjectConfirmationData
    def get_Method(self): return self.Method
    def set_Method(self, Method): self.Method = Method
    def export(self, outfile, level, namespace_='tns:', name_='SubjectConfirmationType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SubjectConfirmationType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='SubjectConfirmationType'):
        if self.Method is not None and 'Method' not in already_processed:
            already_processed.append('Method')
            outfile.write(' Method=%s' % (quote_attrib(self.Method), ))
    def exportChildren(self, outfile, level, namespace_='tns:', name_='SubjectConfirmationType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.BaseID is not None:
            self.BaseID.export(outfile, level, namespace_, name_='BaseID', pretty_print=pretty_print)
        if self.NameID is not None:
            self.NameID.export(outfile, level, namespace_, name_='NameID', pretty_print=pretty_print)
        if self.EncryptedID is not None:
            self.EncryptedID.export(outfile, level, namespace_, name_='EncryptedID', pretty_print=pretty_print)
        if self.SubjectConfirmationData is not None:
            self.SubjectConfirmationData.export(outfile, level, namespace_, name_='SubjectConfirmationData', pretty_print=pretty_print)
    def hasContent_(self):
        if (
            self.BaseID is not None or
            self.NameID is not None or
            self.EncryptedID is not None or
            self.SubjectConfirmationData is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='SubjectConfirmationType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.Method is not None and 'Method' not in already_processed:
            already_processed.append('Method')
            showIndent(outfile, level)
            outfile.write('Method = %s,\n' % (self.Method,))
    def exportLiteralChildren(self, outfile, level, name_):
        if self.BaseID is not None:
            showIndent(outfile, level)
            outfile.write('BaseID=model_.BaseID(\n')
            self.BaseID.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.NameID is not None:
            showIndent(outfile, level)
            outfile.write('NameID=model_.NameID(\n')
            self.NameID.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.EncryptedID is not None:
            showIndent(outfile, level)
            outfile.write('EncryptedID=model_.EncryptedID(\n')
            self.EncryptedID.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.SubjectConfirmationData is not None:
            showIndent(outfile, level)
            outfile.write('SubjectConfirmationData=model_.SubjectConfirmationData(\n')
            self.SubjectConfirmationData.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Method', node)
        if value is not None and 'Method' not in already_processed:
            already_processed.append('Method')
            self.Method = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'BaseID':
            obj_ = BaseIDAbstractType.factory()
            obj_.build(child_)
            self.set_BaseID(obj_)
        elif nodeName_ == 'NameID':
            obj_ = NameIDType.factory()
            obj_.build(child_)
            self.set_NameID(obj_)
        elif nodeName_ == 'EncryptedID':
            obj_ = EncryptedElementType.factory()
            obj_.build(child_)
            self.set_EncryptedID(obj_)
        elif nodeName_ == 'SubjectConfirmationData':
            obj_ = SubjectConfirmationDataType.factory()
            obj_.build(child_)
            self.set_SubjectConfirmationData(obj_)
# end class SubjectConfirmationType


class SubjectConfirmationDataType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, InResponseTo=None, NotOnOrAfter=None, Recipient=None, Address=None, NotBefore=None, anytypeobjs_=None, valueOf_=None, mixedclass_=None, content_=None):
        self.InResponseTo = _cast(None, InResponseTo)
        self.NotOnOrAfter = _cast(None, NotOnOrAfter)
        self.Recipient = _cast(None, Recipient)
        self.Address = _cast(None, Address)
        self.NotBefore = _cast(None, NotBefore)
        if anytypeobjs_ is None:
            self.anytypeobjs_ = []
        else:
            self.anytypeobjs_ = anytypeobjs_
        self.valueOf_ = valueOf_
        self.anyAttributes_ = {}
        if mixedclass_ is None:
            self.mixedclass_ = MixedContainer
        else:
            self.mixedclass_ = mixedclass_
        if content_ is None:
            self.content_ = []
        else:
            self.content_ = content_
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if SubjectConfirmationDataType.subclass:
            return SubjectConfirmationDataType.subclass(*args_, **kwargs_)
        else:
            return SubjectConfirmationDataType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def add_anytypeobjs_(self, value): self.anytypeobjs_.append(value)
    def insert_anytypeobjs_(self, index, value): self._anytypeobjs_[index] = value
    def get_InResponseTo(self): return self.InResponseTo
    def set_InResponseTo(self, InResponseTo): self.InResponseTo = InResponseTo
    def get_NotOnOrAfter(self): return self.NotOnOrAfter
    def set_NotOnOrAfter(self, NotOnOrAfter): self.NotOnOrAfter = NotOnOrAfter
    def get_Recipient(self): return self.Recipient
    def set_Recipient(self, Recipient): self.Recipient = Recipient
    def get_Address(self): return self.Address
    def set_Address(self, Address): self.Address = Address
    def get_NotBefore(self): return self.NotBefore
    def set_NotBefore(self, NotBefore): self.NotBefore = NotBefore
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def get_anyAttributes_(self): return self.anyAttributes_
    def set_anyAttributes_(self, anyAttributes_): self.anyAttributes_ = anyAttributes_
    def export(self, outfile, level, namespace_='tns:', name_='SubjectConfirmationDataType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SubjectConfirmationDataType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='SubjectConfirmationDataType'):
        unique_counter = 0
        for name, value in self.anyAttributes_.items():
            xsinamespaceprefix = 'xsi'
            xsinamespace1 = 'http://www.w3.org/2001/XMLSchema-instance'
            xsinamespace2 = '{%s}' % (xsinamespace1, )
            if name.startswith(xsinamespace2):
                name1 = name[len(xsinamespace2):]
                name2 = '%s:%s' % (xsinamespaceprefix, name1, )
                if name2 not in already_processed:
                    already_processed.append(name2)
                    outfile.write(' %s=%s' % (name2, quote_attrib(value), ))
            else:
                mo = re_.match(Namespace_extract_pat_, name)
                if mo is not None:
                    namespace, name = mo.group(1, 2)
                    if name not in already_processed:
                        already_processed.append(name)
                        if namespace == 'http://www.w3.org/XML/1998/namespace':
                            outfile.write(' %s=%s' % (name, quote_attrib(value), ))
                        else:
                            unique_counter += 1
                            outfile.write(' xmlns:yyy%d="%s"' % (unique_counter, namespace, ))
                            outfile.write(' yyy%d:%s=%s' % (unique_counter, name, quote_attrib(value), ))
                else:
                    if name not in already_processed:
                        already_processed.append(name)
                        outfile.write(' %s=%s' % (name, quote_attrib(value), ))
        if self.InResponseTo is not None and 'InResponseTo' not in already_processed:
            already_processed.append('InResponseTo')
            outfile.write(' InResponseTo=%s' % (quote_attrib(self.InResponseTo), ))
        if self.NotOnOrAfter is not None and 'NotOnOrAfter' not in already_processed:
            already_processed.append('NotOnOrAfter')
            outfile.write(' NotOnOrAfter=%s' % (quote_attrib(self.NotOnOrAfter), ))
        if self.Recipient is not None and 'Recipient' not in already_processed:
            already_processed.append('Recipient')
            outfile.write(' Recipient=%s' % (quote_attrib(self.Recipient), ))
        if self.Address is not None and 'Address' not in already_processed:
            already_processed.append('Address')
            outfile.write(' Address=%s' % (quote_attrib(self.Address), ))
        if self.NotBefore is not None and 'NotBefore' not in already_processed:
            already_processed.append('NotBefore')
            outfile.write(' NotBefore=%s' % (quote_attrib(self.NotBefore), ))
    def exportChildren(self, outfile, level, namespace_='tns:', name_='SubjectConfirmationDataType', fromsubclass_=False, pretty_print=True):
        if not fromsubclass_:
            for item_ in self.content_:
                item_.export(outfile, level, item_.name, namespace_, pretty_print=pretty_print)
    def hasContent_(self):
        if (
            self.anytypeobjs_ or
            self.valueOf_
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='SubjectConfirmationDataType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('valueOf_ = """%s""",\n' % (self.valueOf_,))
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.InResponseTo is not None and 'InResponseTo' not in already_processed:
            already_processed.append('InResponseTo')
            showIndent(outfile, level)
            outfile.write('InResponseTo = %s,\n' % (self.InResponseTo,))
        if self.NotOnOrAfter is not None and 'NotOnOrAfter' not in already_processed:
            already_processed.append('NotOnOrAfter')
            showIndent(outfile, level)
            outfile.write('NotOnOrAfter = %s,\n' % (self.NotOnOrAfter,))
        if self.Recipient is not None and 'Recipient' not in already_processed:
            already_processed.append('Recipient')
            showIndent(outfile, level)
            outfile.write('Recipient = %s,\n' % (self.Recipient,))
        if self.Address is not None and 'Address' not in already_processed:
            already_processed.append('Address')
            showIndent(outfile, level)
            outfile.write('Address = %s,\n' % (self.Address,))
        if self.NotBefore is not None and 'NotBefore' not in already_processed:
            already_processed.append('NotBefore')
            showIndent(outfile, level)
            outfile.write('NotBefore = %s,\n' % (self.NotBefore,))
        for name, value in self.anyAttributes_.items():
            showIndent(outfile, level)
            outfile.write('%s = "%s",\n' % (name, value,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        self.valueOf_ = get_all_text_(node)
        if node.text is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', node.text)
            self.content_.append(obj_)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('InResponseTo', node)
        if value is not None and 'InResponseTo' not in already_processed:
            already_processed.append('InResponseTo')
            self.InResponseTo = value
        value = find_attr_value_('NotOnOrAfter', node)
        if value is not None and 'NotOnOrAfter' not in already_processed:
            already_processed.append('NotOnOrAfter')
            self.NotOnOrAfter = value
        value = find_attr_value_('Recipient', node)
        if value is not None and 'Recipient' not in already_processed:
            already_processed.append('Recipient')
            self.Recipient = value
        value = find_attr_value_('Address', node)
        if value is not None and 'Address' not in already_processed:
            already_processed.append('Address')
            self.Address = value
        value = find_attr_value_('NotBefore', node)
        if value is not None and 'NotBefore' not in already_processed:
            already_processed.append('NotBefore')
            self.NotBefore = value
        self.anyAttributes_ = {}
        for name, value in attrs.items():
            if name not in already_processed:
                self.anyAttributes_[name] = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == '':
            obj_ = __ANY__.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, '', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_'):
              self.add_(obj_.value)
            elif hasattr(self, 'set_'):
              self.set_(obj_.value)
        if not fromsubclass_ and child_.tail is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', child_.tail)
            self.content_.append(obj_)
# end class SubjectConfirmationDataType


class KeyInfoConfirmationDataType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, KeyInfo=None):
        if KeyInfo is None:
            self.KeyInfo = []
        else:
            self.KeyInfo = KeyInfo
    def factory(*args_, **kwargs_):
        if KeyInfoConfirmationDataType.subclass:
            return KeyInfoConfirmationDataType.subclass(*args_, **kwargs_)
        else:
            return KeyInfoConfirmationDataType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_KeyInfo(self): return self.KeyInfo
    def set_KeyInfo(self, KeyInfo): self.KeyInfo = KeyInfo
    def add_KeyInfo(self, value): self.KeyInfo.append(value)
    def insert_KeyInfo(self, index, value): self.KeyInfo[index] = value
    def export(self, outfile, level, namespace_='tns:', name_='KeyInfoConfirmationDataType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='KeyInfoConfirmationDataType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='KeyInfoConfirmationDataType'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='KeyInfoConfirmationDataType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for KeyInfo_ in self.KeyInfo:
            KeyInfo_.export(outfile, level, namespace_, name_='KeyInfo', pretty_print=pretty_print)
    def hasContent_(self):
        if (
            self.KeyInfo
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='KeyInfoConfirmationDataType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('KeyInfo=[\n')
        level += 1
        for KeyInfo_ in self.KeyInfo:
            showIndent(outfile, level)
            outfile.write('model_.KeyInfo(\n')
            KeyInfo_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'KeyInfo':
            obj_ = KeyInfoType.factory()
            obj_.build(child_)
            self.KeyInfo.append(obj_)
# end class KeyInfoConfirmationDataType


class ConditionsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, NotOnOrAfter=None, NotBefore=None, Condition=None, AudienceRestriction=None, OneTimeUse=None, ProxyRestriction=None):
        self.NotOnOrAfter = _cast(None, NotOnOrAfter)
        self.NotBefore = _cast(None, NotBefore)
        if Condition is None:
            self.Condition = []
        else:
            self.Condition = Condition
        if AudienceRestriction is None:
            self.AudienceRestriction = []
        else:
            self.AudienceRestriction = AudienceRestriction
        if OneTimeUse is None:
            self.OneTimeUse = []
        else:
            self.OneTimeUse = OneTimeUse
        if ProxyRestriction is None:
            self.ProxyRestriction = []
        else:
            self.ProxyRestriction = ProxyRestriction
    def factory(*args_, **kwargs_):
        if ConditionsType.subclass:
            return ConditionsType.subclass(*args_, **kwargs_)
        else:
            return ConditionsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Condition(self): return self.Condition
    def set_Condition(self, Condition): self.Condition = Condition
    def add_Condition(self, value): self.Condition.append(value)
    def insert_Condition(self, index, value): self.Condition[index] = value
    def get_AudienceRestriction(self): return self.AudienceRestriction
    def set_AudienceRestriction(self, AudienceRestriction): self.AudienceRestriction = AudienceRestriction
    def add_AudienceRestriction(self, value): self.AudienceRestriction.append(value)
    def insert_AudienceRestriction(self, index, value): self.AudienceRestriction[index] = value
    def get_OneTimeUse(self): return self.OneTimeUse
    def set_OneTimeUse(self, OneTimeUse): self.OneTimeUse = OneTimeUse
    def add_OneTimeUse(self, value): self.OneTimeUse.append(value)
    def insert_OneTimeUse(self, index, value): self.OneTimeUse[index] = value
    def get_ProxyRestriction(self): return self.ProxyRestriction
    def set_ProxyRestriction(self, ProxyRestriction): self.ProxyRestriction = ProxyRestriction
    def add_ProxyRestriction(self, value): self.ProxyRestriction.append(value)
    def insert_ProxyRestriction(self, index, value): self.ProxyRestriction[index] = value
    def get_NotOnOrAfter(self): return self.NotOnOrAfter
    def set_NotOnOrAfter(self, NotOnOrAfter): self.NotOnOrAfter = NotOnOrAfter
    def get_NotBefore(self): return self.NotBefore
    def set_NotBefore(self, NotBefore): self.NotBefore = NotBefore
    def export(self, outfile, level, namespace_='tns:', name_='ConditionsType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ConditionsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='ConditionsType'):
        if self.NotOnOrAfter is not None and 'NotOnOrAfter' not in already_processed:
            already_processed.append('NotOnOrAfter')
            outfile.write(' NotOnOrAfter=%s' % (quote_attrib(self.NotOnOrAfter), ))
        if self.NotBefore is not None and 'NotBefore' not in already_processed:
            already_processed.append('NotBefore')
            outfile.write(' NotBefore=%s' % (quote_attrib(self.NotBefore), ))
    def exportChildren(self, outfile, level, namespace_='tns:', name_='ConditionsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Condition_ in self.Condition:
            Condition_.export(outfile, level, namespace_, name_='Condition', pretty_print=pretty_print)
        for AudienceRestriction_ in self.AudienceRestriction:
            AudienceRestriction_.export(outfile, level, namespace_, name_='AudienceRestriction', pretty_print=pretty_print)
        for OneTimeUse_ in self.OneTimeUse:
            OneTimeUse_.export(outfile, level, namespace_, name_='OneTimeUse', pretty_print=pretty_print)
        for ProxyRestriction_ in self.ProxyRestriction:
            ProxyRestriction_.export(outfile, level, namespace_, name_='ProxyRestriction', pretty_print=pretty_print)
    def hasContent_(self):
        if (
            self.Condition or
            self.AudienceRestriction or
            self.OneTimeUse or
            self.ProxyRestriction
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='ConditionsType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.NotOnOrAfter is not None and 'NotOnOrAfter' not in already_processed:
            already_processed.append('NotOnOrAfter')
            showIndent(outfile, level)
            outfile.write('NotOnOrAfter = %s,\n' % (self.NotOnOrAfter,))
        if self.NotBefore is not None and 'NotBefore' not in already_processed:
            already_processed.append('NotBefore')
            showIndent(outfile, level)
            outfile.write('NotBefore = %s,\n' % (self.NotBefore,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('Condition=[\n')
        level += 1
        for Condition_ in self.Condition:
            showIndent(outfile, level)
            outfile.write('model_.Condition(\n')
            Condition_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('AudienceRestriction=[\n')
        level += 1
        for AudienceRestriction_ in self.AudienceRestriction:
            showIndent(outfile, level)
            outfile.write('model_.AudienceRestriction(\n')
            AudienceRestriction_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('OneTimeUse=[\n')
        level += 1
        for OneTimeUse_ in self.OneTimeUse:
            showIndent(outfile, level)
            outfile.write('model_.OneTimeUse(\n')
            OneTimeUse_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('ProxyRestriction=[\n')
        level += 1
        for ProxyRestriction_ in self.ProxyRestriction:
            showIndent(outfile, level)
            outfile.write('model_.ProxyRestriction(\n')
            ProxyRestriction_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('NotOnOrAfter', node)
        if value is not None and 'NotOnOrAfter' not in already_processed:
            already_processed.append('NotOnOrAfter')
            self.NotOnOrAfter = value
        value = find_attr_value_('NotBefore', node)
        if value is not None and 'NotBefore' not in already_processed:
            already_processed.append('NotBefore')
            self.NotBefore = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Condition':
            class_obj_ = self.get_class_obj_(child_, ConditionAbstractType)
            obj_ = class_obj_.factory()
            obj_.build(child_)
            self.Condition.append(obj_)
        elif nodeName_ == 'AudienceRestriction':
            obj_ = AudienceRestrictionType.factory()
            obj_.build(child_)
            self.AudienceRestriction.append(obj_)
        elif nodeName_ == 'OneTimeUse':
            obj_ = OneTimeUseType.factory()
            obj_.build(child_)
            self.OneTimeUse.append(obj_)
        elif nodeName_ == 'ProxyRestriction':
            obj_ = ProxyRestrictionType.factory()
            obj_.build(child_)
            self.ProxyRestriction.append(obj_)
# end class ConditionsType


class ConditionAbstractType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, extensiontype_=None):
        self.extensiontype_ = extensiontype_
    def factory(*args_, **kwargs_):
        if ConditionAbstractType.subclass:
            return ConditionAbstractType.subclass(*args_, **kwargs_)
        else:
            return ConditionAbstractType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_extensiontype_(self): return self.extensiontype_
    def set_extensiontype_(self, extensiontype_): self.extensiontype_ = extensiontype_
    def export(self, outfile, level, namespace_='tns:', name_='ConditionAbstractType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ConditionAbstractType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='ConditionAbstractType'):
        if self.extensiontype_ is not None and 'xsi:type' not in already_processed:
            already_processed.append('xsi:type')
            outfile.write(' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"')
            outfile.write(' xsi:type="%s"' % self.extensiontype_)
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='ConditionAbstractType', fromsubclass_=False, pretty_print=True):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='ConditionAbstractType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('xsi:type', node)
        if value is not None and 'xsi:type' not in already_processed:
            already_processed.append('xsi:type')
            self.extensiontype_ = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class ConditionAbstractType


class AudienceRestrictionType(ConditionAbstractType):
    subclass = None
    superclass = ConditionAbstractType
    def __init__(self, Audience=None):
        super(AudienceRestrictionType, self).__init__()
        if Audience is None:
            self.Audience = []
        else:
            self.Audience = Audience
    def factory(*args_, **kwargs_):
        if AudienceRestrictionType.subclass:
            return AudienceRestrictionType.subclass(*args_, **kwargs_)
        else:
            return AudienceRestrictionType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Audience(self): return self.Audience
    def set_Audience(self, Audience): self.Audience = Audience
    def add_Audience(self, value): self.Audience.append(value)
    def insert_Audience(self, index, value): self.Audience[index] = value
    def export(self, outfile, level, namespace_='tns:', name_='AudienceRestrictionType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AudienceRestrictionType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='AudienceRestrictionType'):
        super(AudienceRestrictionType, self).exportAttributes(outfile, level, already_processed, namespace_, name_='AudienceRestrictionType')
    def exportChildren(self, outfile, level, namespace_='tns:', name_='AudienceRestrictionType', fromsubclass_=False, pretty_print=True):
        super(AudienceRestrictionType, self).exportChildren(outfile, level, namespace_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Audience_ in self.Audience:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAudience>%s</%sAudience>%s' % (namespace_, self.gds_format_string(quote_xml(Audience_).encode(ExternalEncoding), input_name='Audience'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.Audience or
            super(AudienceRestrictionType, self).hasContent_()
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='AudienceRestrictionType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        super(AudienceRestrictionType, self).exportLiteralAttributes(outfile, level, already_processed, name_)
    def exportLiteralChildren(self, outfile, level, name_):
        super(AudienceRestrictionType, self).exportLiteralChildren(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('Audience=[\n')
        level += 1
        for Audience_ in self.Audience:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(Audience_).encode(ExternalEncoding))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        super(AudienceRestrictionType, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Audience':
            Audience_ = child_.text
            Audience_ = self.gds_validate_string(Audience_, node, 'Audience')
            self.Audience.append(Audience_)
        super(AudienceRestrictionType, self).buildChildren(child_, node, nodeName_, True)
# end class AudienceRestrictionType


class OneTimeUseType(ConditionAbstractType):
    subclass = None
    superclass = ConditionAbstractType
    def __init__(self):
        super(OneTimeUseType, self).__init__()
        pass
    def factory(*args_, **kwargs_):
        if OneTimeUseType.subclass:
            return OneTimeUseType.subclass(*args_, **kwargs_)
        else:
            return OneTimeUseType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def export(self, outfile, level, namespace_='tns:', name_='OneTimeUseType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OneTimeUseType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='OneTimeUseType'):
        super(OneTimeUseType, self).exportAttributes(outfile, level, already_processed, namespace_, name_='OneTimeUseType')
    def exportChildren(self, outfile, level, namespace_='tns:', name_='OneTimeUseType', fromsubclass_=False, pretty_print=True):
        super(OneTimeUseType, self).exportChildren(outfile, level, namespace_, name_, True, pretty_print=pretty_print)
        pass
    def hasContent_(self):
        if (
            super(OneTimeUseType, self).hasContent_()
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='OneTimeUseType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        super(OneTimeUseType, self).exportLiteralAttributes(outfile, level, already_processed, name_)
    def exportLiteralChildren(self, outfile, level, name_):
        super(OneTimeUseType, self).exportLiteralChildren(outfile, level, name_)
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        super(OneTimeUseType, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        super(OneTimeUseType, self).buildChildren(child_, node, nodeName_, True)
        pass
# end class OneTimeUseType


class ProxyRestrictionType(ConditionAbstractType):
    subclass = None
    superclass = ConditionAbstractType
    def __init__(self, Count=None, Audience=None):
        super(ProxyRestrictionType, self).__init__()
        self.Count = _cast(None, Count)
        if Audience is None:
            self.Audience = []
        else:
            self.Audience = Audience
    def factory(*args_, **kwargs_):
        if ProxyRestrictionType.subclass:
            return ProxyRestrictionType.subclass(*args_, **kwargs_)
        else:
            return ProxyRestrictionType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Audience(self): return self.Audience
    def set_Audience(self, Audience): self.Audience = Audience
    def add_Audience(self, value): self.Audience.append(value)
    def insert_Audience(self, index, value): self.Audience[index] = value
    def get_Count(self): return self.Count
    def set_Count(self, Count): self.Count = Count
    def export(self, outfile, level, namespace_='tns:', name_='ProxyRestrictionType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ProxyRestrictionType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='ProxyRestrictionType'):
        super(ProxyRestrictionType, self).exportAttributes(outfile, level, already_processed, namespace_, name_='ProxyRestrictionType')
        if self.Count is not None and 'Count' not in already_processed:
            already_processed.append('Count')
            outfile.write(' Count=%s' % (quote_attrib(self.Count), ))
    def exportChildren(self, outfile, level, namespace_='tns:', name_='ProxyRestrictionType', fromsubclass_=False, pretty_print=True):
        super(ProxyRestrictionType, self).exportChildren(outfile, level, namespace_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Audience_ in self.Audience:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAudience>%s</%sAudience>%s' % (namespace_, self.gds_format_string(quote_xml(Audience_).encode(ExternalEncoding), input_name='Audience'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.Audience or
            super(ProxyRestrictionType, self).hasContent_()
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='ProxyRestrictionType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.Count is not None and 'Count' not in already_processed:
            already_processed.append('Count')
            showIndent(outfile, level)
            outfile.write('Count = %s,\n' % (self.Count,))
        super(ProxyRestrictionType, self).exportLiteralAttributes(outfile, level, already_processed, name_)
    def exportLiteralChildren(self, outfile, level, name_):
        super(ProxyRestrictionType, self).exportLiteralChildren(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('Audience=[\n')
        level += 1
        for Audience_ in self.Audience:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(Audience_).encode(ExternalEncoding))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Count', node)
        if value is not None and 'Count' not in already_processed:
            already_processed.append('Count')
            self.Count = value
        super(ProxyRestrictionType, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Audience':
            Audience_ = child_.text
            Audience_ = self.gds_validate_string(Audience_, node, 'Audience')
            self.Audience.append(Audience_)
        super(ProxyRestrictionType, self).buildChildren(child_, node, nodeName_, True)
# end class ProxyRestrictionType


class AdviceType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, AssertionIDRef=None, AssertionURIRef=None, Assertion=None, EncryptedAssertion=None, anytypeobjs_=None):
        if AssertionIDRef is None:
            self.AssertionIDRef = []
        else:
            self.AssertionIDRef = AssertionIDRef
        if AssertionURIRef is None:
            self.AssertionURIRef = []
        else:
            self.AssertionURIRef = AssertionURIRef
        if Assertion is None:
            self.Assertion = []
        else:
            self.Assertion = Assertion
        if EncryptedAssertion is None:
            self.EncryptedAssertion = []
        else:
            self.EncryptedAssertion = EncryptedAssertion
        self.anytypeobjs_ = anytypeobjs_
    def factory(*args_, **kwargs_):
        if AdviceType.subclass:
            return AdviceType.subclass(*args_, **kwargs_)
        else:
            return AdviceType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AssertionIDRef(self): return self.AssertionIDRef
    def set_AssertionIDRef(self, AssertionIDRef): self.AssertionIDRef = AssertionIDRef
    def add_AssertionIDRef(self, value): self.AssertionIDRef.append(value)
    def insert_AssertionIDRef(self, index, value): self.AssertionIDRef[index] = value
    def get_AssertionURIRef(self): return self.AssertionURIRef
    def set_AssertionURIRef(self, AssertionURIRef): self.AssertionURIRef = AssertionURIRef
    def add_AssertionURIRef(self, value): self.AssertionURIRef.append(value)
    def insert_AssertionURIRef(self, index, value): self.AssertionURIRef[index] = value
    def get_Assertion(self): return self.Assertion
    def set_Assertion(self, Assertion): self.Assertion = Assertion
    def add_Assertion(self, value): self.Assertion.append(value)
    def insert_Assertion(self, index, value): self.Assertion[index] = value
    def get_EncryptedAssertion(self): return self.EncryptedAssertion
    def set_EncryptedAssertion(self, EncryptedAssertion): self.EncryptedAssertion = EncryptedAssertion
    def add_EncryptedAssertion(self, value): self.EncryptedAssertion.append(value)
    def insert_EncryptedAssertion(self, index, value): self.EncryptedAssertion[index] = value
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def export(self, outfile, level, namespace_='tns:', name_='AdviceType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AdviceType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='AdviceType'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='AdviceType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for AssertionIDRef_ in self.AssertionIDRef:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAssertionIDRef>%s</%sAssertionIDRef>%s' % (namespace_, self.gds_format_string(quote_xml(AssertionIDRef_).encode(ExternalEncoding), input_name='AssertionIDRef'), namespace_, eol_))
        for AssertionURIRef_ in self.AssertionURIRef:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAssertionURIRef>%s</%sAssertionURIRef>%s' % (namespace_, self.gds_format_string(quote_xml(AssertionURIRef_).encode(ExternalEncoding), input_name='AssertionURIRef'), namespace_, eol_))
        for Assertion_ in self.Assertion:
            Assertion_.export(outfile, level, namespace_, name_='Assertion', pretty_print=pretty_print)
        for EncryptedAssertion_ in self.EncryptedAssertion:
            EncryptedAssertion_.export(outfile, level, namespace_, name_='EncryptedAssertion', pretty_print=pretty_print)
        if self.anytypeobjs_ is not None:
            self.anytypeobjs_.export(outfile, level, namespace_, pretty_print=pretty_print)
    def hasContent_(self):
        if (
            self.AssertionIDRef or
            self.AssertionURIRef or
            self.Assertion or
            self.EncryptedAssertion or
            self.anytypeobjs_ is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='AdviceType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('AssertionIDRef=[\n')
        level += 1
        for AssertionIDRef_ in self.AssertionIDRef:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(AssertionIDRef_).encode(ExternalEncoding))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('AssertionURIRef=[\n')
        level += 1
        for AssertionURIRef_ in self.AssertionURIRef:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(AssertionURIRef_).encode(ExternalEncoding))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('Assertion=[\n')
        level += 1
        for Assertion_ in self.Assertion:
            showIndent(outfile, level)
            outfile.write('model_.Assertion(\n')
            Assertion_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('EncryptedAssertion=[\n')
        level += 1
        for EncryptedAssertion_ in self.EncryptedAssertion:
            showIndent(outfile, level)
            outfile.write('model_.EncryptedAssertion(\n')
            EncryptedAssertion_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        if self.anytypeobjs_ is not None:
            showIndent(outfile, level)
            outfile.write('anytypeobjs_=model_.anytypeobjs_(\n')
            self.anytypeobjs_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AssertionIDRef':
            AssertionIDRef_ = child_.text
            AssertionIDRef_ = self.gds_validate_string(AssertionIDRef_, node, 'AssertionIDRef')
            self.AssertionIDRef.append(AssertionIDRef_)
        elif nodeName_ == 'AssertionURIRef':
            AssertionURIRef_ = child_.text
            AssertionURIRef_ = self.gds_validate_string(AssertionURIRef_, node, 'AssertionURIRef')
            self.AssertionURIRef.append(AssertionURIRef_)
        elif nodeName_ == 'Assertion':
            obj_ = AssertionType.factory()
            obj_.build(child_)
            self.Assertion.append(obj_)
        elif nodeName_ == 'EncryptedAssertion':
            obj_ = EncryptedElementType.factory()
            obj_.build(child_)
            self.EncryptedAssertion.append(obj_)
        else:
            obj_ = self.gds_build_any(child_, 'AdviceType')
            if obj_ is not None:
                self.set_anytypeobjs_(obj_)
# end class AdviceType


class StatementAbstractType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, extensiontype_=None):
        self.extensiontype_ = extensiontype_
    def factory(*args_, **kwargs_):
        if StatementAbstractType.subclass:
            return StatementAbstractType.subclass(*args_, **kwargs_)
        else:
            return StatementAbstractType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_extensiontype_(self): return self.extensiontype_
    def set_extensiontype_(self, extensiontype_): self.extensiontype_ = extensiontype_
    def export(self, outfile, level, namespace_='tns:', name_='StatementAbstractType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='StatementAbstractType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='StatementAbstractType'):
        if self.extensiontype_ is not None and 'xsi:type' not in already_processed:
            already_processed.append('xsi:type')
            outfile.write(' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"')
            outfile.write(' xsi:type="%s"' % self.extensiontype_)
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='StatementAbstractType', fromsubclass_=False, pretty_print=True):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='StatementAbstractType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('xsi:type', node)
        if value is not None and 'xsi:type' not in already_processed:
            already_processed.append('xsi:type')
            self.extensiontype_ = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class StatementAbstractType


class AuthnStatementType(StatementAbstractType):
    subclass = None
    superclass = StatementAbstractType
    def __init__(self, SessionNotOnOrAfter=None, SessionIndex=None, AuthnInstant=None, SubjectLocality=None, AuthnContext=None):
        super(AuthnStatementType, self).__init__()
        self.SessionNotOnOrAfter = _cast(None, SessionNotOnOrAfter)
        self.SessionIndex = _cast(None, SessionIndex)
        self.AuthnInstant = _cast(None, AuthnInstant)
        self.SubjectLocality = SubjectLocality
        self.AuthnContext = AuthnContext
    def factory(*args_, **kwargs_):
        if AuthnStatementType.subclass:
            return AuthnStatementType.subclass(*args_, **kwargs_)
        else:
            return AuthnStatementType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_SubjectLocality(self): return self.SubjectLocality
    def set_SubjectLocality(self, SubjectLocality): self.SubjectLocality = SubjectLocality
    def get_AuthnContext(self): return self.AuthnContext
    def set_AuthnContext(self, AuthnContext): self.AuthnContext = AuthnContext
    def get_SessionNotOnOrAfter(self): return self.SessionNotOnOrAfter
    def set_SessionNotOnOrAfter(self, SessionNotOnOrAfter): self.SessionNotOnOrAfter = SessionNotOnOrAfter
    def get_SessionIndex(self): return self.SessionIndex
    def set_SessionIndex(self, SessionIndex): self.SessionIndex = SessionIndex
    def get_AuthnInstant(self): return self.AuthnInstant
    def set_AuthnInstant(self, AuthnInstant): self.AuthnInstant = AuthnInstant
    def export(self, outfile, level, namespace_='tns:', name_='AuthnStatementType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AuthnStatementType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='AuthnStatementType'):
        super(AuthnStatementType, self).exportAttributes(outfile, level, already_processed, namespace_, name_='AuthnStatementType')
        if self.SessionNotOnOrAfter is not None and 'SessionNotOnOrAfter' not in already_processed:
            already_processed.append('SessionNotOnOrAfter')
            outfile.write(' SessionNotOnOrAfter=%s' % (quote_attrib(self.SessionNotOnOrAfter), ))
        if self.SessionIndex is not None and 'SessionIndex' not in already_processed:
            already_processed.append('SessionIndex')
            outfile.write(' SessionIndex=%s' % (quote_attrib(self.SessionIndex), ))
        if self.AuthnInstant is not None and 'AuthnInstant' not in already_processed:
            already_processed.append('AuthnInstant')
            outfile.write(' AuthnInstant=%s' % (quote_attrib(self.AuthnInstant), ))
    def exportChildren(self, outfile, level, namespace_='tns:', name_='AuthnStatementType', fromsubclass_=False, pretty_print=True):
        super(AuthnStatementType, self).exportChildren(outfile, level, namespace_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.SubjectLocality is not None:
            self.SubjectLocality.export(outfile, level, namespace_, name_='SubjectLocality', pretty_print=pretty_print)
        if self.AuthnContext is not None:
            self.AuthnContext.export(outfile, level, namespace_, name_='AuthnContext', pretty_print=pretty_print)
    def hasContent_(self):
        if (
            self.SubjectLocality is not None or
            self.AuthnContext is not None or
            super(AuthnStatementType, self).hasContent_()
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='AuthnStatementType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.SessionNotOnOrAfter is not None and 'SessionNotOnOrAfter' not in already_processed:
            already_processed.append('SessionNotOnOrAfter')
            showIndent(outfile, level)
            outfile.write('SessionNotOnOrAfter = %s,\n' % (self.SessionNotOnOrAfter,))
        if self.SessionIndex is not None and 'SessionIndex' not in already_processed:
            already_processed.append('SessionIndex')
            showIndent(outfile, level)
            outfile.write('SessionIndex = %s,\n' % (self.SessionIndex,))
        if self.AuthnInstant is not None and 'AuthnInstant' not in already_processed:
            already_processed.append('AuthnInstant')
            showIndent(outfile, level)
            outfile.write('AuthnInstant = %s,\n' % (self.AuthnInstant,))
        super(AuthnStatementType, self).exportLiteralAttributes(outfile, level, already_processed, name_)
    def exportLiteralChildren(self, outfile, level, name_):
        super(AuthnStatementType, self).exportLiteralChildren(outfile, level, name_)
        if self.SubjectLocality is not None:
            showIndent(outfile, level)
            outfile.write('SubjectLocality=model_.SubjectLocality(\n')
            self.SubjectLocality.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.AuthnContext is not None:
            showIndent(outfile, level)
            outfile.write('AuthnContext=model_.AuthnContext(\n')
            self.AuthnContext.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('SessionNotOnOrAfter', node)
        if value is not None and 'SessionNotOnOrAfter' not in already_processed:
            already_processed.append('SessionNotOnOrAfter')
            self.SessionNotOnOrAfter = value
        value = find_attr_value_('SessionIndex', node)
        if value is not None and 'SessionIndex' not in already_processed:
            already_processed.append('SessionIndex')
            self.SessionIndex = value
        value = find_attr_value_('AuthnInstant', node)
        if value is not None and 'AuthnInstant' not in already_processed:
            already_processed.append('AuthnInstant')
            self.AuthnInstant = value
        super(AuthnStatementType, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'SubjectLocality':
            obj_ = SubjectLocalityType.factory()
            obj_.build(child_)
            self.set_SubjectLocality(obj_)
        elif nodeName_ == 'AuthnContext':
            obj_ = AuthnContextType.factory()
            obj_.build(child_)
            self.set_AuthnContext(obj_)
        super(AuthnStatementType, self).buildChildren(child_, node, nodeName_, True)
# end class AuthnStatementType


class SubjectLocalityType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, DNSName=None, Address=None):
        self.DNSName = _cast(None, DNSName)
        self.Address = _cast(None, Address)
        pass
    def factory(*args_, **kwargs_):
        if SubjectLocalityType.subclass:
            return SubjectLocalityType.subclass(*args_, **kwargs_)
        else:
            return SubjectLocalityType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DNSName(self): return self.DNSName
    def set_DNSName(self, DNSName): self.DNSName = DNSName
    def get_Address(self): return self.Address
    def set_Address(self, Address): self.Address = Address
    def export(self, outfile, level, namespace_='tns:', name_='SubjectLocalityType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SubjectLocalityType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='SubjectLocalityType'):
        if self.DNSName is not None and 'DNSName' not in already_processed:
            already_processed.append('DNSName')
            outfile.write(' DNSName=%s' % (quote_attrib(self.DNSName), ))
        if self.Address is not None and 'Address' not in already_processed:
            already_processed.append('Address')
            outfile.write(' Address=%s' % (quote_attrib(self.Address), ))
    def exportChildren(self, outfile, level, namespace_='tns:', name_='SubjectLocalityType', fromsubclass_=False, pretty_print=True):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='SubjectLocalityType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.DNSName is not None and 'DNSName' not in already_processed:
            already_processed.append('DNSName')
            showIndent(outfile, level)
            outfile.write('DNSName = %s,\n' % (self.DNSName,))
        if self.Address is not None and 'Address' not in already_processed:
            already_processed.append('Address')
            showIndent(outfile, level)
            outfile.write('Address = %s,\n' % (self.Address,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('DNSName', node)
        if value is not None and 'DNSName' not in already_processed:
            already_processed.append('DNSName')
            self.DNSName = value
        value = find_attr_value_('Address', node)
        if value is not None and 'Address' not in already_processed:
            already_processed.append('Address')
            self.Address = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class SubjectLocalityType


class AuthnContextType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, AuthnContextClassRef=None, AuthnContextDecl=None, AuthnContextDeclRef=None, AuthenticatingAuthority=None):
        self.AuthnContextClassRef = AuthnContextClassRef
        self.AuthnContextDecl = AuthnContextDecl
        self.AuthnContextDeclRef = AuthnContextDeclRef
        self.AuthnContextDecl = AuthnContextDecl
        self.AuthnContextDeclRef = AuthnContextDeclRef
        if AuthenticatingAuthority is None:
            self.AuthenticatingAuthority = []
        else:
            self.AuthenticatingAuthority = AuthenticatingAuthority
    def factory(*args_, **kwargs_):
        if AuthnContextType.subclass:
            return AuthnContextType.subclass(*args_, **kwargs_)
        else:
            return AuthnContextType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AuthnContextClassRef(self): return self.AuthnContextClassRef
    def set_AuthnContextClassRef(self, AuthnContextClassRef): self.AuthnContextClassRef = AuthnContextClassRef
    def get_AuthnContextDecl(self): return self.AuthnContextDecl
    def set_AuthnContextDecl(self, AuthnContextDecl): self.AuthnContextDecl = AuthnContextDecl
    def get_AuthnContextDeclRef(self): return self.AuthnContextDeclRef
    def set_AuthnContextDeclRef(self, AuthnContextDeclRef): self.AuthnContextDeclRef = AuthnContextDeclRef
    def get_AuthnContextDecl(self): return self.AuthnContextDecl
    def set_AuthnContextDecl(self, AuthnContextDecl): self.AuthnContextDecl = AuthnContextDecl
    def get_AuthnContextDeclRef(self): return self.AuthnContextDeclRef
    def set_AuthnContextDeclRef(self, AuthnContextDeclRef): self.AuthnContextDeclRef = AuthnContextDeclRef
    def get_AuthenticatingAuthority(self): return self.AuthenticatingAuthority
    def set_AuthenticatingAuthority(self, AuthenticatingAuthority): self.AuthenticatingAuthority = AuthenticatingAuthority
    def add_AuthenticatingAuthority(self, value): self.AuthenticatingAuthority.append(value)
    def insert_AuthenticatingAuthority(self, index, value): self.AuthenticatingAuthority[index] = value
    def export(self, outfile, level, namespace_='tns:', name_='AuthnContextType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AuthnContextType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='AuthnContextType'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='AuthnContextType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AuthnContextClassRef is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAuthnContextClassRef>%s</%sAuthnContextClassRef>%s' % (namespace_, self.gds_format_string(quote_xml(self.AuthnContextClassRef).encode(ExternalEncoding), input_name='AuthnContextClassRef'), namespace_, eol_))
        if self.AuthnContextDecl is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAuthnContextDecl>%s</%sAuthnContextDecl>%s' % (namespace_, self.gds_format_string(quote_xml(self.AuthnContextDecl).encode(ExternalEncoding), input_name='AuthnContextDecl'), namespace_, eol_))
        if self.AuthnContextDeclRef is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAuthnContextDeclRef>%s</%sAuthnContextDeclRef>%s' % (namespace_, self.gds_format_string(quote_xml(self.AuthnContextDeclRef).encode(ExternalEncoding), input_name='AuthnContextDeclRef'), namespace_, eol_))
        if self.AuthnContextDecl is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAuthnContextDecl>%s</%sAuthnContextDecl>%s' % (namespace_, self.gds_format_string(quote_xml(self.AuthnContextDecl).encode(ExternalEncoding), input_name='AuthnContextDecl'), namespace_, eol_))
        if self.AuthnContextDeclRef is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAuthnContextDeclRef>%s</%sAuthnContextDeclRef>%s' % (namespace_, self.gds_format_string(quote_xml(self.AuthnContextDeclRef).encode(ExternalEncoding), input_name='AuthnContextDeclRef'), namespace_, eol_))
        for AuthenticatingAuthority_ in self.AuthenticatingAuthority:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAuthenticatingAuthority>%s</%sAuthenticatingAuthority>%s' % (namespace_, self.gds_format_string(quote_xml(AuthenticatingAuthority_).encode(ExternalEncoding), input_name='AuthenticatingAuthority'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.AuthnContextClassRef is not None or
            self.AuthnContextDecl is not None or
            self.AuthnContextDeclRef is not None or
            self.AuthnContextDecl is not None or
            self.AuthnContextDeclRef is not None or
            self.AuthenticatingAuthority
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='AuthnContextType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.AuthnContextClassRef is not None:
            showIndent(outfile, level)
            outfile.write('AuthnContextClassRef=%s,\n' % quote_python(self.AuthnContextClassRef).encode(ExternalEncoding))
        if self.AuthnContextDecl is not None:
            showIndent(outfile, level)
            outfile.write('AuthnContextDecl=%s,\n' % quote_python(self.AuthnContextDecl).encode(ExternalEncoding))
        if self.AuthnContextDeclRef is not None:
            showIndent(outfile, level)
            outfile.write('AuthnContextDeclRef=%s,\n' % quote_python(self.AuthnContextDeclRef).encode(ExternalEncoding))
        if self.AuthnContextDecl is not None:
            showIndent(outfile, level)
            outfile.write('AuthnContextDecl=%s,\n' % quote_python(self.AuthnContextDecl).encode(ExternalEncoding))
        if self.AuthnContextDeclRef is not None:
            showIndent(outfile, level)
            outfile.write('AuthnContextDeclRef=%s,\n' % quote_python(self.AuthnContextDeclRef).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('AuthenticatingAuthority=[\n')
        level += 1
        for AuthenticatingAuthority_ in self.AuthenticatingAuthority:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(AuthenticatingAuthority_).encode(ExternalEncoding))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AuthnContextClassRef':
            AuthnContextClassRef_ = child_.text
            AuthnContextClassRef_ = self.gds_validate_string(AuthnContextClassRef_, node, 'AuthnContextClassRef')
            self.AuthnContextClassRef = AuthnContextClassRef_
        elif nodeName_ == 'AuthnContextDecl':
            AuthnContextDecl_ = child_.text
            AuthnContextDecl_ = self.gds_validate_string(AuthnContextDecl_, node, 'AuthnContextDecl')
            self.AuthnContextDecl = AuthnContextDecl_
        elif nodeName_ == 'AuthnContextDeclRef':
            AuthnContextDeclRef_ = child_.text
            AuthnContextDeclRef_ = self.gds_validate_string(AuthnContextDeclRef_, node, 'AuthnContextDeclRef')
            self.AuthnContextDeclRef = AuthnContextDeclRef_
        elif nodeName_ == 'AuthnContextDecl':
            AuthnContextDecl_ = child_.text
            AuthnContextDecl_ = self.gds_validate_string(AuthnContextDecl_, node, 'AuthnContextDecl')
            self.AuthnContextDecl = AuthnContextDecl_
        elif nodeName_ == 'AuthnContextDeclRef':
            AuthnContextDeclRef_ = child_.text
            AuthnContextDeclRef_ = self.gds_validate_string(AuthnContextDeclRef_, node, 'AuthnContextDeclRef')
            self.AuthnContextDeclRef = AuthnContextDeclRef_
        elif nodeName_ == 'AuthenticatingAuthority':
            AuthenticatingAuthority_ = child_.text
            AuthenticatingAuthority_ = self.gds_validate_string(AuthenticatingAuthority_, node, 'AuthenticatingAuthority')
            self.AuthenticatingAuthority.append(AuthenticatingAuthority_)
# end class AuthnContextType


class AuthzDecisionStatementType(StatementAbstractType):
    subclass = None
    superclass = StatementAbstractType
    def __init__(self, Decision=None, Resource=None, Action=None, Evidence=None):
        super(AuthzDecisionStatementType, self).__init__()
        self.Decision = _cast(None, Decision)
        self.Resource = _cast(None, Resource)
        if Action is None:
            self.Action = []
        else:
            self.Action = Action
        self.Evidence = Evidence
    def factory(*args_, **kwargs_):
        if AuthzDecisionStatementType.subclass:
            return AuthzDecisionStatementType.subclass(*args_, **kwargs_)
        else:
            return AuthzDecisionStatementType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Action(self): return self.Action
    def set_Action(self, Action): self.Action = Action
    def add_Action(self, value): self.Action.append(value)
    def insert_Action(self, index, value): self.Action[index] = value
    def get_Evidence(self): return self.Evidence
    def set_Evidence(self, Evidence): self.Evidence = Evidence
    def get_Decision(self): return self.Decision
    def set_Decision(self, Decision): self.Decision = Decision
    def get_Resource(self): return self.Resource
    def set_Resource(self, Resource): self.Resource = Resource
    def export(self, outfile, level, namespace_='tns:', name_='AuthzDecisionStatementType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AuthzDecisionStatementType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='AuthzDecisionStatementType'):
        super(AuthzDecisionStatementType, self).exportAttributes(outfile, level, already_processed, namespace_, name_='AuthzDecisionStatementType')
        if self.Decision is not None and 'Decision' not in already_processed:
            already_processed.append('Decision')
            outfile.write(' Decision=%s' % (quote_attrib(self.Decision), ))
        if self.Resource is not None and 'Resource' not in already_processed:
            already_processed.append('Resource')
            outfile.write(' Resource=%s' % (quote_attrib(self.Resource), ))
    def exportChildren(self, outfile, level, namespace_='tns:', name_='AuthzDecisionStatementType', fromsubclass_=False, pretty_print=True):
        super(AuthzDecisionStatementType, self).exportChildren(outfile, level, namespace_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Action_ in self.Action:
            Action_.export(outfile, level, namespace_, name_='Action', pretty_print=pretty_print)
        if self.Evidence is not None:
            self.Evidence.export(outfile, level, namespace_, name_='Evidence', pretty_print=pretty_print)
    def hasContent_(self):
        if (
            self.Action or
            self.Evidence is not None or
            super(AuthzDecisionStatementType, self).hasContent_()
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='AuthzDecisionStatementType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.Decision is not None and 'Decision' not in already_processed:
            already_processed.append('Decision')
            showIndent(outfile, level)
            outfile.write('Decision = %s,\n' % (self.Decision,))
        if self.Resource is not None and 'Resource' not in already_processed:
            already_processed.append('Resource')
            showIndent(outfile, level)
            outfile.write('Resource = %s,\n' % (self.Resource,))
        super(AuthzDecisionStatementType, self).exportLiteralAttributes(outfile, level, already_processed, name_)
    def exportLiteralChildren(self, outfile, level, name_):
        super(AuthzDecisionStatementType, self).exportLiteralChildren(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('Action=[\n')
        level += 1
        for Action_ in self.Action:
            showIndent(outfile, level)
            outfile.write('model_.Action(\n')
            Action_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        if self.Evidence is not None:
            showIndent(outfile, level)
            outfile.write('Evidence=model_.Evidence(\n')
            self.Evidence.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Decision', node)
        if value is not None and 'Decision' not in already_processed:
            already_processed.append('Decision')
            self.Decision = value
        value = find_attr_value_('Resource', node)
        if value is not None and 'Resource' not in already_processed:
            already_processed.append('Resource')
            self.Resource = value
        super(AuthzDecisionStatementType, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Action':
            obj_ = ActionType.factory()
            obj_.build(child_)
            self.Action.append(obj_)
        elif nodeName_ == 'Evidence':
            obj_ = EvidenceType.factory()
            obj_.build(child_)
            self.set_Evidence(obj_)
        super(AuthzDecisionStatementType, self).buildChildren(child_, node, nodeName_, True)
# end class AuthzDecisionStatementType


class ActionType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Namespace=None, valueOf_=None):
        self.Namespace = _cast(None, Namespace)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if ActionType.subclass:
            return ActionType.subclass(*args_, **kwargs_)
        else:
            return ActionType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Namespace(self): return self.Namespace
    def set_Namespace(self, Namespace): self.Namespace = Namespace
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def export(self, outfile, level, namespace_='tns:', name_='ActionType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ActionType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(str(self.valueOf_).encode(ExternalEncoding))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='ActionType'):
        if self.Namespace is not None and 'Namespace' not in already_processed:
            already_processed.append('Namespace')
            outfile.write(' Namespace=%s' % (quote_attrib(self.Namespace), ))
    def exportChildren(self, outfile, level, namespace_='tns:', name_='ActionType', fromsubclass_=False, pretty_print=True):
        pass
    def hasContent_(self):
        if (
            self.valueOf_
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='ActionType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('valueOf_ = """%s""",\n' % (self.valueOf_,))
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.Namespace is not None and 'Namespace' not in already_processed:
            already_processed.append('Namespace')
            showIndent(outfile, level)
            outfile.write('Namespace = %s,\n' % (self.Namespace,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Namespace', node)
        if value is not None and 'Namespace' not in already_processed:
            already_processed.append('Namespace')
            self.Namespace = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class ActionType


class EvidenceType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, AssertionIDRef=None, AssertionURIRef=None, Assertion=None, EncryptedAssertion=None):
        if AssertionIDRef is None:
            self.AssertionIDRef = []
        else:
            self.AssertionIDRef = AssertionIDRef
        if AssertionURIRef is None:
            self.AssertionURIRef = []
        else:
            self.AssertionURIRef = AssertionURIRef
        if Assertion is None:
            self.Assertion = []
        else:
            self.Assertion = Assertion
        if EncryptedAssertion is None:
            self.EncryptedAssertion = []
        else:
            self.EncryptedAssertion = EncryptedAssertion
    def factory(*args_, **kwargs_):
        if EvidenceType.subclass:
            return EvidenceType.subclass(*args_, **kwargs_)
        else:
            return EvidenceType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AssertionIDRef(self): return self.AssertionIDRef
    def set_AssertionIDRef(self, AssertionIDRef): self.AssertionIDRef = AssertionIDRef
    def add_AssertionIDRef(self, value): self.AssertionIDRef.append(value)
    def insert_AssertionIDRef(self, index, value): self.AssertionIDRef[index] = value
    def get_AssertionURIRef(self): return self.AssertionURIRef
    def set_AssertionURIRef(self, AssertionURIRef): self.AssertionURIRef = AssertionURIRef
    def add_AssertionURIRef(self, value): self.AssertionURIRef.append(value)
    def insert_AssertionURIRef(self, index, value): self.AssertionURIRef[index] = value
    def get_Assertion(self): return self.Assertion
    def set_Assertion(self, Assertion): self.Assertion = Assertion
    def add_Assertion(self, value): self.Assertion.append(value)
    def insert_Assertion(self, index, value): self.Assertion[index] = value
    def get_EncryptedAssertion(self): return self.EncryptedAssertion
    def set_EncryptedAssertion(self, EncryptedAssertion): self.EncryptedAssertion = EncryptedAssertion
    def add_EncryptedAssertion(self, value): self.EncryptedAssertion.append(value)
    def insert_EncryptedAssertion(self, index, value): self.EncryptedAssertion[index] = value
    def export(self, outfile, level, namespace_='tns:', name_='EvidenceType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='EvidenceType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='EvidenceType'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='EvidenceType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for AssertionIDRef_ in self.AssertionIDRef:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAssertionIDRef>%s</%sAssertionIDRef>%s' % (namespace_, self.gds_format_string(quote_xml(AssertionIDRef_).encode(ExternalEncoding), input_name='AssertionIDRef'), namespace_, eol_))
        for AssertionURIRef_ in self.AssertionURIRef:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAssertionURIRef>%s</%sAssertionURIRef>%s' % (namespace_, self.gds_format_string(quote_xml(AssertionURIRef_).encode(ExternalEncoding), input_name='AssertionURIRef'), namespace_, eol_))
        for Assertion_ in self.Assertion:
            Assertion_.export(outfile, level, namespace_, name_='Assertion', pretty_print=pretty_print)
        for EncryptedAssertion_ in self.EncryptedAssertion:
            EncryptedAssertion_.export(outfile, level, namespace_, name_='EncryptedAssertion', pretty_print=pretty_print)
    def hasContent_(self):
        if (
            self.AssertionIDRef or
            self.AssertionURIRef or
            self.Assertion or
            self.EncryptedAssertion
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='EvidenceType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('AssertionIDRef=[\n')
        level += 1
        for AssertionIDRef_ in self.AssertionIDRef:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(AssertionIDRef_).encode(ExternalEncoding))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('AssertionURIRef=[\n')
        level += 1
        for AssertionURIRef_ in self.AssertionURIRef:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(AssertionURIRef_).encode(ExternalEncoding))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('Assertion=[\n')
        level += 1
        for Assertion_ in self.Assertion:
            showIndent(outfile, level)
            outfile.write('model_.Assertion(\n')
            Assertion_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('EncryptedAssertion=[\n')
        level += 1
        for EncryptedAssertion_ in self.EncryptedAssertion:
            showIndent(outfile, level)
            outfile.write('model_.EncryptedAssertion(\n')
            EncryptedAssertion_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AssertionIDRef':
            AssertionIDRef_ = child_.text
            AssertionIDRef_ = self.gds_validate_string(AssertionIDRef_, node, 'AssertionIDRef')
            self.AssertionIDRef.append(AssertionIDRef_)
        elif nodeName_ == 'AssertionURIRef':
            AssertionURIRef_ = child_.text
            AssertionURIRef_ = self.gds_validate_string(AssertionURIRef_, node, 'AssertionURIRef')
            self.AssertionURIRef.append(AssertionURIRef_)
        elif nodeName_ == 'Assertion':
            obj_ = AssertionType.factory()
            obj_.build(child_)
            self.Assertion.append(obj_)
        elif nodeName_ == 'EncryptedAssertion':
            obj_ = EncryptedElementType.factory()
            obj_.build(child_)
            self.EncryptedAssertion.append(obj_)
# end class EvidenceType


class AttributeStatementType(StatementAbstractType):
    subclass = None
    superclass = StatementAbstractType
    def __init__(self, Attribute=None, EncryptedAttribute=None):
        super(AttributeStatementType, self).__init__()
        if Attribute is None:
            self.Attribute = []
        else:
            self.Attribute = Attribute
        if EncryptedAttribute is None:
            self.EncryptedAttribute = []
        else:
            self.EncryptedAttribute = EncryptedAttribute
    def factory(*args_, **kwargs_):
        if AttributeStatementType.subclass:
            return AttributeStatementType.subclass(*args_, **kwargs_)
        else:
            return AttributeStatementType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Attribute(self): return self.Attribute
    def set_Attribute(self, Attribute): self.Attribute = Attribute
    def add_Attribute(self, value): self.Attribute.append(value)
    def insert_Attribute(self, index, value): self.Attribute[index] = value
    def get_EncryptedAttribute(self): return self.EncryptedAttribute
    def set_EncryptedAttribute(self, EncryptedAttribute): self.EncryptedAttribute = EncryptedAttribute
    def add_EncryptedAttribute(self, value): self.EncryptedAttribute.append(value)
    def insert_EncryptedAttribute(self, index, value): self.EncryptedAttribute[index] = value
    def export(self, outfile, level, namespace_='tns:', name_='AttributeStatementType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AttributeStatementType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='AttributeStatementType'):
        super(AttributeStatementType, self).exportAttributes(outfile, level, already_processed, namespace_, name_='AttributeStatementType')
    def exportChildren(self, outfile, level, namespace_='tns:', name_='AttributeStatementType', fromsubclass_=False, pretty_print=True):
        super(AttributeStatementType, self).exportChildren(outfile, level, namespace_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Attribute_ in self.Attribute:
            Attribute_.export(outfile, level, namespace_, name_='Attribute', pretty_print=pretty_print)
        for EncryptedAttribute_ in self.EncryptedAttribute:
            EncryptedAttribute_.export(outfile, level, namespace_, name_='EncryptedAttribute', pretty_print=pretty_print)
    def hasContent_(self):
        if (
            self.Attribute or
            self.EncryptedAttribute or
            super(AttributeStatementType, self).hasContent_()
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='AttributeStatementType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        super(AttributeStatementType, self).exportLiteralAttributes(outfile, level, already_processed, name_)
    def exportLiteralChildren(self, outfile, level, name_):
        super(AttributeStatementType, self).exportLiteralChildren(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('Attribute=[\n')
        level += 1
        for Attribute_ in self.Attribute:
            showIndent(outfile, level)
            outfile.write('model_.Attribute(\n')
            Attribute_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('EncryptedAttribute=[\n')
        level += 1
        for EncryptedAttribute_ in self.EncryptedAttribute:
            showIndent(outfile, level)
            outfile.write('model_.EncryptedAttribute(\n')
            EncryptedAttribute_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        super(AttributeStatementType, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Attribute':
            obj_ = AttributeType.factory()
            obj_.build(child_)
            self.Attribute.append(obj_)
        elif nodeName_ == 'EncryptedAttribute':
            obj_ = EncryptedElementType.factory()
            obj_.build(child_)
            self.EncryptedAttribute.append(obj_)
        super(AttributeStatementType, self).buildChildren(child_, node, nodeName_, True)
# end class AttributeStatementType


class AttributeType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, FriendlyName=None, Name=None, NameFormat=None, AttributeValue=None):
        self.FriendlyName = _cast(None, FriendlyName)
        self.Name = _cast(None, Name)
        self.NameFormat = _cast(None, NameFormat)
        if AttributeValue is None:
            self.AttributeValue = []
        else:
            self.AttributeValue = AttributeValue
        self.anyAttributes_ = {}
    def factory(*args_, **kwargs_):
        if AttributeType.subclass:
            return AttributeType.subclass(*args_, **kwargs_)
        else:
            return AttributeType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AttributeValue(self): return self.AttributeValue
    def set_AttributeValue(self, AttributeValue): self.AttributeValue = AttributeValue
    def add_AttributeValue(self, value): self.AttributeValue.append(value)
    def insert_AttributeValue(self, index, value): self.AttributeValue[index] = value
    def get_FriendlyName(self): return self.FriendlyName
    def set_FriendlyName(self, FriendlyName): self.FriendlyName = FriendlyName
    def get_Name(self): return self.Name
    def set_Name(self, Name): self.Name = Name
    def get_NameFormat(self): return self.NameFormat
    def set_NameFormat(self, NameFormat): self.NameFormat = NameFormat
    def get_anyAttributes_(self): return self.anyAttributes_
    def set_anyAttributes_(self, anyAttributes_): self.anyAttributes_ = anyAttributes_
    def export(self, outfile, level, namespace_='tns:', name_='AttributeType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AttributeType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='AttributeType'):
        unique_counter = 0
        for name, value in self.anyAttributes_.items():
            xsinamespaceprefix = 'xsi'
            xsinamespace1 = 'http://www.w3.org/2001/XMLSchema-instance'
            xsinamespace2 = '{%s}' % (xsinamespace1, )
            if name.startswith(xsinamespace2):
                name1 = name[len(xsinamespace2):]
                name2 = '%s:%s' % (xsinamespaceprefix, name1, )
                if name2 not in already_processed:
                    already_processed.append(name2)
                    outfile.write(' %s=%s' % (name2, quote_attrib(value), ))
            else:
                mo = re_.match(Namespace_extract_pat_, name)
                if mo is not None:
                    namespace, name = mo.group(1, 2)
                    if name not in already_processed:
                        already_processed.append(name)
                        if namespace == 'http://www.w3.org/XML/1998/namespace':
                            outfile.write(' %s=%s' % (name, quote_attrib(value), ))
                        else:
                            unique_counter += 1
                            outfile.write(' xmlns:yyy%d="%s"' % (unique_counter, namespace, ))
                            outfile.write(' yyy%d:%s=%s' % (unique_counter, name, quote_attrib(value), ))
                else:
                    if name not in already_processed:
                        already_processed.append(name)
                        outfile.write(' %s=%s' % (name, quote_attrib(value), ))
        if self.FriendlyName is not None and 'FriendlyName' not in already_processed:
            already_processed.append('FriendlyName')
            outfile.write(' FriendlyName=%s' % (quote_attrib(self.FriendlyName), ))
        if self.Name is not None and 'Name' not in already_processed:
            already_processed.append('Name')
            outfile.write(' Name=%s' % (quote_attrib(self.Name), ))
        if self.NameFormat is not None and 'NameFormat' not in already_processed:
            already_processed.append('NameFormat')
            outfile.write(' NameFormat=%s' % (quote_attrib(self.NameFormat), ))
    def exportChildren(self, outfile, level, namespace_='tns:', name_='AttributeType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for AttributeValue_ in self.AttributeValue:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAttributeValue>%s</%sAttributeValue>%s' % (namespace_, self.gds_format_string(quote_xml(AttributeValue_).encode(ExternalEncoding), input_name='AttributeValue'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.AttributeValue
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='AttributeType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.FriendlyName is not None and 'FriendlyName' not in already_processed:
            already_processed.append('FriendlyName')
            showIndent(outfile, level)
            outfile.write('FriendlyName = %s,\n' % (self.FriendlyName,))
        if self.Name is not None and 'Name' not in already_processed:
            already_processed.append('Name')
            showIndent(outfile, level)
            outfile.write('Name = %s,\n' % (self.Name,))
        if self.NameFormat is not None and 'NameFormat' not in already_processed:
            already_processed.append('NameFormat')
            showIndent(outfile, level)
            outfile.write('NameFormat = %s,\n' % (self.NameFormat,))
        for name, value in self.anyAttributes_.items():
            showIndent(outfile, level)
            outfile.write('%s = "%s",\n' % (name, value,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('AttributeValue=[\n')
        level += 1
        for AttributeValue_ in self.AttributeValue:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(AttributeValue_).encode(ExternalEncoding))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('FriendlyName', node)
        if value is not None and 'FriendlyName' not in already_processed:
            already_processed.append('FriendlyName')
            self.FriendlyName = value
        value = find_attr_value_('Name', node)
        if value is not None and 'Name' not in already_processed:
            already_processed.append('Name')
            self.Name = value
        value = find_attr_value_('NameFormat', node)
        if value is not None and 'NameFormat' not in already_processed:
            already_processed.append('NameFormat')
            self.NameFormat = value
        self.anyAttributes_ = {}
        for name, value in attrs.items():
            if name not in already_processed:
                self.anyAttributes_[name] = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AttributeValue':
            AttributeValue_ = child_.text
            AttributeValue_ = self.gds_validate_string(AttributeValue_, node, 'AttributeValue')
            self.AttributeValue.append(AttributeValue_)
# end class AttributeType


class SignatureType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Id=None, SignedInfo=None, SignatureValue=None, KeyInfo=None, Object=None):
        self.Id = _cast(None, Id)
        self.SignedInfo = SignedInfo
        self.SignatureValue = SignatureValue
        self.KeyInfo = KeyInfo
        if Object is None:
            self.Object = []
        else:
            self.Object = Object
    def factory(*args_, **kwargs_):
        if SignatureType.subclass:
            return SignatureType.subclass(*args_, **kwargs_)
        else:
            return SignatureType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_SignedInfo(self): return self.SignedInfo
    def set_SignedInfo(self, SignedInfo): self.SignedInfo = SignedInfo
    def get_SignatureValue(self): return self.SignatureValue
    def set_SignatureValue(self, SignatureValue): self.SignatureValue = SignatureValue
    def get_KeyInfo(self): return self.KeyInfo
    def set_KeyInfo(self, KeyInfo): self.KeyInfo = KeyInfo
    def get_Object(self): return self.Object
    def set_Object(self, Object): self.Object = Object
    def add_Object(self, value): self.Object.append(value)
    def insert_Object(self, index, value): self.Object[index] = value
    def get_Id(self): return self.Id
    def set_Id(self, Id): self.Id = Id
    def export(self, outfile, level, namespace_='tns:', name_='SignatureType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SignatureType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='SignatureType'):
        if self.Id is not None and 'Id' not in already_processed:
            already_processed.append('Id')
            outfile.write(' Id=%s' % (quote_attrib(self.Id), ))
    def exportChildren(self, outfile, level, namespace_='tns:', name_='SignatureType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.SignedInfo is not None:
            self.SignedInfo.export(outfile, level, namespace_, name_='SignedInfo', pretty_print=pretty_print)
        if self.SignatureValue is not None:
            self.SignatureValue.export(outfile, level, namespace_, name_='SignatureValue', pretty_print=pretty_print)
        if self.KeyInfo is not None:
            self.KeyInfo.export(outfile, level, namespace_, name_='KeyInfo', pretty_print=pretty_print)
        for Object_ in self.Object:
            Object_.export(outfile, level, namespace_, name_='Object', pretty_print=pretty_print)
    def hasContent_(self):
        if (
            self.SignedInfo is not None or
            self.SignatureValue is not None or
            self.KeyInfo is not None or
            self.Object
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='SignatureType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.Id is not None and 'Id' not in already_processed:
            already_processed.append('Id')
            showIndent(outfile, level)
            outfile.write('Id = %s,\n' % (self.Id,))
    def exportLiteralChildren(self, outfile, level, name_):
        if self.SignedInfo is not None:
            showIndent(outfile, level)
            outfile.write('SignedInfo=model_.SignedInfo(\n')
            self.SignedInfo.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.SignatureValue is not None:
            showIndent(outfile, level)
            outfile.write('SignatureValue=model_.SignatureValue(\n')
            self.SignatureValue.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.KeyInfo is not None:
            showIndent(outfile, level)
            outfile.write('KeyInfo=model_.KeyInfo(\n')
            self.KeyInfo.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        showIndent(outfile, level)
        outfile.write('Object=[\n')
        level += 1
        for Object_ in self.Object:
            showIndent(outfile, level)
            outfile.write('model_.Object(\n')
            Object_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Id', node)
        if value is not None and 'Id' not in already_processed:
            already_processed.append('Id')
            self.Id = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'SignedInfo':
            obj_ = SignedInfoType.factory()
            obj_.build(child_)
            self.set_SignedInfo(obj_)
        elif nodeName_ == 'SignatureValue':
            obj_ = SignatureValueType.factory()
            obj_.build(child_)
            self.set_SignatureValue(obj_)
        elif nodeName_ == 'KeyInfo':
            obj_ = KeyInfoType.factory()
            obj_.build(child_)
            self.set_KeyInfo(obj_)
        elif nodeName_ == 'Object':
            obj_ = ObjectType.factory()
            obj_.build(child_)
            self.Object.append(obj_)
# end class SignatureType


class SignatureValueType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Id=None, valueOf_=None):
        self.Id = _cast(None, Id)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if SignatureValueType.subclass:
            return SignatureValueType.subclass(*args_, **kwargs_)
        else:
            return SignatureValueType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Id(self): return self.Id
    def set_Id(self, Id): self.Id = Id
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def export(self, outfile, level, namespace_='tns:', name_='SignatureValueType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SignatureValueType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(str(self.valueOf_).encode(ExternalEncoding))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='SignatureValueType'):
        if self.Id is not None and 'Id' not in already_processed:
            already_processed.append('Id')
            outfile.write(' Id=%s' % (quote_attrib(self.Id), ))
    def exportChildren(self, outfile, level, namespace_='tns:', name_='SignatureValueType', fromsubclass_=False, pretty_print=True):
        pass
    def hasContent_(self):
        if (
            self.valueOf_
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='SignatureValueType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('valueOf_ = """%s""",\n' % (self.valueOf_,))
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.Id is not None and 'Id' not in already_processed:
            already_processed.append('Id')
            showIndent(outfile, level)
            outfile.write('Id = %s,\n' % (self.Id,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Id', node)
        if value is not None and 'Id' not in already_processed:
            already_processed.append('Id')
            self.Id = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class SignatureValueType


class SignedInfoType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Id=None, CanonicalizationMethod=None, SignatureMethod=None, Reference=None):
        self.Id = _cast(None, Id)
        self.CanonicalizationMethod = CanonicalizationMethod
        self.SignatureMethod = SignatureMethod
        if Reference is None:
            self.Reference = []
        else:
            self.Reference = Reference
    def factory(*args_, **kwargs_):
        if SignedInfoType.subclass:
            return SignedInfoType.subclass(*args_, **kwargs_)
        else:
            return SignedInfoType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CanonicalizationMethod(self): return self.CanonicalizationMethod
    def set_CanonicalizationMethod(self, CanonicalizationMethod): self.CanonicalizationMethod = CanonicalizationMethod
    def get_SignatureMethod(self): return self.SignatureMethod
    def set_SignatureMethod(self, SignatureMethod): self.SignatureMethod = SignatureMethod
    def get_Reference(self): return self.Reference
    def set_Reference(self, Reference): self.Reference = Reference
    def add_Reference(self, value): self.Reference.append(value)
    def insert_Reference(self, index, value): self.Reference[index] = value
    def get_Id(self): return self.Id
    def set_Id(self, Id): self.Id = Id
    def export(self, outfile, level, namespace_='tns:', name_='SignedInfoType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SignedInfoType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='SignedInfoType'):
        if self.Id is not None and 'Id' not in already_processed:
            already_processed.append('Id')
            outfile.write(' Id=%s' % (quote_attrib(self.Id), ))
    def exportChildren(self, outfile, level, namespace_='tns:', name_='SignedInfoType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CanonicalizationMethod is not None:
            self.CanonicalizationMethod.export(outfile, level, namespace_, name_='CanonicalizationMethod', pretty_print=pretty_print)
        if self.SignatureMethod is not None:
            self.SignatureMethod.export(outfile, level, namespace_, name_='SignatureMethod', pretty_print=pretty_print)
        for Reference_ in self.Reference:
            Reference_.export(outfile, level, namespace_, name_='Reference', pretty_print=pretty_print)
    def hasContent_(self):
        if (
            self.CanonicalizationMethod is not None or
            self.SignatureMethod is not None or
            self.Reference
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='SignedInfoType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.Id is not None and 'Id' not in already_processed:
            already_processed.append('Id')
            showIndent(outfile, level)
            outfile.write('Id = %s,\n' % (self.Id,))
    def exportLiteralChildren(self, outfile, level, name_):
        if self.CanonicalizationMethod is not None:
            showIndent(outfile, level)
            outfile.write('CanonicalizationMethod=model_.CanonicalizationMethod(\n')
            self.CanonicalizationMethod.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.SignatureMethod is not None:
            showIndent(outfile, level)
            outfile.write('SignatureMethod=model_.SignatureMethod(\n')
            self.SignatureMethod.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        showIndent(outfile, level)
        outfile.write('Reference=[\n')
        level += 1
        for Reference_ in self.Reference:
            showIndent(outfile, level)
            outfile.write('model_.Reference(\n')
            Reference_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Id', node)
        if value is not None and 'Id' not in already_processed:
            already_processed.append('Id')
            self.Id = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CanonicalizationMethod':
            obj_ = CanonicalizationMethodType.factory()
            obj_.build(child_)
            self.set_CanonicalizationMethod(obj_)
        elif nodeName_ == 'SignatureMethod':
            obj_ = SignatureMethodType.factory()
            obj_.build(child_)
            self.set_SignatureMethod(obj_)
        elif nodeName_ == 'Reference':
            obj_ = ReferenceType.factory()
            obj_.build(child_)
            self.Reference.append(obj_)
# end class SignedInfoType


class CanonicalizationMethodType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Algorithm=None, anytypeobjs_=None, valueOf_=None, mixedclass_=None, content_=None):
        self.Algorithm = _cast(None, Algorithm)
        if anytypeobjs_ is None:
            self.anytypeobjs_ = []
        else:
            self.anytypeobjs_ = anytypeobjs_
        self.valueOf_ = valueOf_
        if mixedclass_ is None:
            self.mixedclass_ = MixedContainer
        else:
            self.mixedclass_ = mixedclass_
        if content_ is None:
            self.content_ = []
        else:
            self.content_ = content_
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CanonicalizationMethodType.subclass:
            return CanonicalizationMethodType.subclass(*args_, **kwargs_)
        else:
            return CanonicalizationMethodType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def add_anytypeobjs_(self, value): self.anytypeobjs_.append(value)
    def insert_anytypeobjs_(self, index, value): self._anytypeobjs_[index] = value
    def get_Algorithm(self): return self.Algorithm
    def set_Algorithm(self, Algorithm): self.Algorithm = Algorithm
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def export(self, outfile, level, namespace_='tns:', name_='CanonicalizationMethodType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CanonicalizationMethodType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='CanonicalizationMethodType'):
        if self.Algorithm is not None and 'Algorithm' not in already_processed:
            already_processed.append('Algorithm')
            outfile.write(' Algorithm=%s' % (quote_attrib(self.Algorithm), ))
    def exportChildren(self, outfile, level, namespace_='tns:', name_='CanonicalizationMethodType', fromsubclass_=False, pretty_print=True):
        if not fromsubclass_:
            for item_ in self.content_:
                item_.export(outfile, level, item_.name, namespace_, pretty_print=pretty_print)
    def hasContent_(self):
        if (
            self.anytypeobjs_ or
            self.valueOf_
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='CanonicalizationMethodType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('valueOf_ = """%s""",\n' % (self.valueOf_,))
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.Algorithm is not None and 'Algorithm' not in already_processed:
            already_processed.append('Algorithm')
            showIndent(outfile, level)
            outfile.write('Algorithm = %s,\n' % (self.Algorithm,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        self.valueOf_ = get_all_text_(node)
        if node.text is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', node.text)
            self.content_.append(obj_)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Algorithm', node)
        if value is not None and 'Algorithm' not in already_processed:
            already_processed.append('Algorithm')
            self.Algorithm = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == '':
            obj_ = __ANY__.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, '', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_'):
              self.add_(obj_.value)
            elif hasattr(self, 'set_'):
              self.set_(obj_.value)
        if not fromsubclass_ and child_.tail is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', child_.tail)
            self.content_.append(obj_)
# end class CanonicalizationMethodType


class SignatureMethodType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Algorithm=None, HMACOutputLength=None, anytypeobjs_=None, valueOf_=None, mixedclass_=None, content_=None):
        self.Algorithm = _cast(None, Algorithm)
        self.HMACOutputLength = HMACOutputLength
        if anytypeobjs_ is None:
            self.anytypeobjs_ = []
        else:
            self.anytypeobjs_ = anytypeobjs_
        self.valueOf_ = valueOf_
        if mixedclass_ is None:
            self.mixedclass_ = MixedContainer
        else:
            self.mixedclass_ = mixedclass_
        if content_ is None:
            self.content_ = []
        else:
            self.content_ = content_
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if SignatureMethodType.subclass:
            return SignatureMethodType.subclass(*args_, **kwargs_)
        else:
            return SignatureMethodType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_HMACOutputLength(self): return self.HMACOutputLength
    def set_HMACOutputLength(self, HMACOutputLength): self.HMACOutputLength = HMACOutputLength
    def validate_HMACOutputLengthType(self, value):
        # Validate type HMACOutputLengthType, a restriction on integer.
        pass
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def add_anytypeobjs_(self, value): self.anytypeobjs_.append(value)
    def insert_anytypeobjs_(self, index, value): self._anytypeobjs_[index] = value
    def get_Algorithm(self): return self.Algorithm
    def set_Algorithm(self, Algorithm): self.Algorithm = Algorithm
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def export(self, outfile, level, namespace_='tns:', name_='SignatureMethodType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SignatureMethodType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='SignatureMethodType'):
        if self.Algorithm is not None and 'Algorithm' not in already_processed:
            already_processed.append('Algorithm')
            outfile.write(' Algorithm=%s' % (quote_attrib(self.Algorithm), ))
    def exportChildren(self, outfile, level, namespace_='tns:', name_='SignatureMethodType', fromsubclass_=False, pretty_print=True):
        if not fromsubclass_:
            for item_ in self.content_:
                item_.export(outfile, level, item_.name, namespace_, pretty_print=pretty_print)
    def hasContent_(self):
        if (
            self.HMACOutputLength is not None or
            self.anytypeobjs_ or
            self.valueOf_
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='SignatureMethodType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('valueOf_ = """%s""",\n' % (self.valueOf_,))
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.Algorithm is not None and 'Algorithm' not in already_processed:
            already_processed.append('Algorithm')
            showIndent(outfile, level)
            outfile.write('Algorithm = %s,\n' % (self.Algorithm,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        self.valueOf_ = get_all_text_(node)
        if node.text is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', node.text)
            self.content_.append(obj_)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Algorithm', node)
        if value is not None and 'Algorithm' not in already_processed:
            already_processed.append('Algorithm')
            self.Algorithm = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'HMACOutputLength':
            obj_ = integer.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'HMACOutputLength', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_HMACOutputLength'):
              self.add_HMACOutputLength(obj_.value)
            elif hasattr(self, 'set_HMACOutputLength'):
              self.set_HMACOutputLength(obj_.value)
        elif nodeName_ == '':
            obj_ = __ANY__.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, '', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_'):
              self.add_(obj_.value)
            elif hasattr(self, 'set_'):
              self.set_(obj_.value)
        if not fromsubclass_ and child_.tail is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', child_.tail)
            self.content_.append(obj_)
# end class SignatureMethodType


class ReferenceType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Type=None, Id=None, URI=None, Transforms=None, DigestMethod=None, DigestValue=None):
        self.Type = _cast(None, Type)
        self.Id = _cast(None, Id)
        self.URI = _cast(None, URI)
        self.Transforms = Transforms
        self.DigestMethod = DigestMethod
        self.DigestValue = DigestValue
    def factory(*args_, **kwargs_):
        if ReferenceType.subclass:
            return ReferenceType.subclass(*args_, **kwargs_)
        else:
            return ReferenceType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Transforms(self): return self.Transforms
    def set_Transforms(self, Transforms): self.Transforms = Transforms
    def get_DigestMethod(self): return self.DigestMethod
    def set_DigestMethod(self, DigestMethod): self.DigestMethod = DigestMethod
    def get_DigestValue(self): return self.DigestValue
    def set_DigestValue(self, DigestValue): self.DigestValue = DigestValue
    def get_Type(self): return self.Type
    def set_Type(self, Type): self.Type = Type
    def get_Id(self): return self.Id
    def set_Id(self, Id): self.Id = Id
    def get_URI(self): return self.URI
    def set_URI(self, URI): self.URI = URI
    def export(self, outfile, level, namespace_='tns:', name_='ReferenceType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ReferenceType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='ReferenceType'):
        if self.Type is not None and 'Type' not in already_processed:
            already_processed.append('Type')
            outfile.write(' Type=%s' % (quote_attrib(self.Type), ))
        if self.Id is not None and 'Id' not in already_processed:
            already_processed.append('Id')
            outfile.write(' Id=%s' % (quote_attrib(self.Id), ))
        if self.URI is not None and 'URI' not in already_processed:
            already_processed.append('URI')
            outfile.write(' URI=%s' % (quote_attrib(self.URI), ))
    def exportChildren(self, outfile, level, namespace_='tns:', name_='ReferenceType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Transforms is not None:
            self.Transforms.export(outfile, level, namespace_, name_='Transforms', pretty_print=pretty_print)
        if self.DigestMethod is not None:
            self.DigestMethod.export(outfile, level, namespace_, name_='DigestMethod', pretty_print=pretty_print)
        if self.DigestValue is not None:
            self.DigestValue.export(outfile, level, namespace_, name_='DigestValue', pretty_print=pretty_print)
    def hasContent_(self):
        if (
            self.Transforms is not None or
            self.DigestMethod is not None or
            self.DigestValue is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='ReferenceType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.Type is not None and 'Type' not in already_processed:
            already_processed.append('Type')
            showIndent(outfile, level)
            outfile.write('Type = %s,\n' % (self.Type,))
        if self.Id is not None and 'Id' not in already_processed:
            already_processed.append('Id')
            showIndent(outfile, level)
            outfile.write('Id = %s,\n' % (self.Id,))
        if self.URI is not None and 'URI' not in already_processed:
            already_processed.append('URI')
            showIndent(outfile, level)
            outfile.write('URI = %s,\n' % (self.URI,))
    def exportLiteralChildren(self, outfile, level, name_):
        if self.Transforms is not None:
            showIndent(outfile, level)
            outfile.write('Transforms=model_.Transforms(\n')
            self.Transforms.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.DigestMethod is not None:
            showIndent(outfile, level)
            outfile.write('DigestMethod=model_.DigestMethod(\n')
            self.DigestMethod.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.DigestValue is not None:
            showIndent(outfile, level)
            outfile.write('DigestValue=model_.DigestValue(\n')
            self.DigestValue.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Type', node)
        if value is not None and 'Type' not in already_processed:
            already_processed.append('Type')
            self.Type = value
        value = find_attr_value_('Id', node)
        if value is not None and 'Id' not in already_processed:
            already_processed.append('Id')
            self.Id = value
        value = find_attr_value_('URI', node)
        if value is not None and 'URI' not in already_processed:
            already_processed.append('URI')
            self.URI = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Transforms':
            obj_ = TransformsType.factory()
            obj_.build(child_)
            self.set_Transforms(obj_)
        elif nodeName_ == 'DigestMethod':
            obj_ = DigestMethodType.factory()
            obj_.build(child_)
            self.set_DigestMethod(obj_)
        elif nodeName_ == 'DigestValue':
            obj_ = base64Binary.factory()
            obj_.build(child_)
            self.set_DigestValue(obj_)
# end class ReferenceType


class TransformsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Transform=None):
        if Transform is None:
            self.Transform = []
        else:
            self.Transform = Transform
    def factory(*args_, **kwargs_):
        if TransformsType.subclass:
            return TransformsType.subclass(*args_, **kwargs_)
        else:
            return TransformsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Transform(self): return self.Transform
    def set_Transform(self, Transform): self.Transform = Transform
    def add_Transform(self, value): self.Transform.append(value)
    def insert_Transform(self, index, value): self.Transform[index] = value
    def export(self, outfile, level, namespace_='tns:', name_='TransformsType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TransformsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='TransformsType'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='TransformsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Transform_ in self.Transform:
            Transform_.export(outfile, level, namespace_, name_='Transform', pretty_print=pretty_print)
    def hasContent_(self):
        if (
            self.Transform
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='TransformsType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('Transform=[\n')
        level += 1
        for Transform_ in self.Transform:
            showIndent(outfile, level)
            outfile.write('model_.Transform(\n')
            Transform_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Transform':
            obj_ = TransformType.factory()
            obj_.build(child_)
            self.Transform.append(obj_)
# end class TransformsType


class TransformType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Algorithm=None, anytypeobjs_=None, XPath=None, valueOf_=None, mixedclass_=None, content_=None):
        self.Algorithm = _cast(None, Algorithm)
        self.anytypeobjs_ = anytypeobjs_
        if XPath is None:
            self.XPath = []
        else:
            self.XPath = XPath
        self.valueOf_ = valueOf_
        if mixedclass_ is None:
            self.mixedclass_ = MixedContainer
        else:
            self.mixedclass_ = mixedclass_
        if content_ is None:
            self.content_ = []
        else:
            self.content_ = content_
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if TransformType.subclass:
            return TransformType.subclass(*args_, **kwargs_)
        else:
            return TransformType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def get_XPath(self): return self.XPath
    def set_XPath(self, XPath): self.XPath = XPath
    def add_XPath(self, value): self.XPath.append(value)
    def insert_XPath(self, index, value): self.XPath[index] = value
    def get_Algorithm(self): return self.Algorithm
    def set_Algorithm(self, Algorithm): self.Algorithm = Algorithm
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def export(self, outfile, level, namespace_='tns:', name_='TransformType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TransformType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='TransformType'):
        if self.Algorithm is not None and 'Algorithm' not in already_processed:
            already_processed.append('Algorithm')
            outfile.write(' Algorithm=%s' % (quote_attrib(self.Algorithm), ))
    def exportChildren(self, outfile, level, namespace_='tns:', name_='TransformType', fromsubclass_=False, pretty_print=True):
        if not fromsubclass_:
            for item_ in self.content_:
                item_.export(outfile, level, item_.name, namespace_, pretty_print=pretty_print)
    def hasContent_(self):
        if (
            self.anytypeobjs_ is not None or
            self.XPath or
            self.valueOf_
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='TransformType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('valueOf_ = """%s""",\n' % (self.valueOf_,))
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.Algorithm is not None and 'Algorithm' not in already_processed:
            already_processed.append('Algorithm')
            showIndent(outfile, level)
            outfile.write('Algorithm = %s,\n' % (self.Algorithm,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        self.valueOf_ = get_all_text_(node)
        if node.text is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', node.text)
            self.content_.append(obj_)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Algorithm', node)
        if value is not None and 'Algorithm' not in already_processed:
            already_processed.append('Algorithm')
            self.Algorithm = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == '':
            obj_ = __ANY__.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, '', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_'):
              self.add_(obj_.value)
            elif hasattr(self, 'set_'):
              self.set_(obj_.value)
        elif nodeName_ == 'XPath' and child_.text is not None:
            valuestr_ = child_.text
            obj_ = self.mixedclass_(MixedContainer.CategorySimple,
                MixedContainer.TypeString, 'XPath', valuestr_)
            self.content_.append(obj_)
        if not fromsubclass_ and child_.tail is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', child_.tail)
            self.content_.append(obj_)
# end class TransformType


class DigestMethodType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Algorithm=None, anytypeobjs_=None, valueOf_=None, mixedclass_=None, content_=None):
        self.Algorithm = _cast(None, Algorithm)
        if anytypeobjs_ is None:
            self.anytypeobjs_ = []
        else:
            self.anytypeobjs_ = anytypeobjs_
        self.valueOf_ = valueOf_
        if mixedclass_ is None:
            self.mixedclass_ = MixedContainer
        else:
            self.mixedclass_ = mixedclass_
        if content_ is None:
            self.content_ = []
        else:
            self.content_ = content_
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if DigestMethodType.subclass:
            return DigestMethodType.subclass(*args_, **kwargs_)
        else:
            return DigestMethodType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def add_anytypeobjs_(self, value): self.anytypeobjs_.append(value)
    def insert_anytypeobjs_(self, index, value): self._anytypeobjs_[index] = value
    def get_Algorithm(self): return self.Algorithm
    def set_Algorithm(self, Algorithm): self.Algorithm = Algorithm
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def export(self, outfile, level, namespace_='tns:', name_='DigestMethodType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DigestMethodType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='DigestMethodType'):
        if self.Algorithm is not None and 'Algorithm' not in already_processed:
            already_processed.append('Algorithm')
            outfile.write(' Algorithm=%s' % (quote_attrib(self.Algorithm), ))
    def exportChildren(self, outfile, level, namespace_='tns:', name_='DigestMethodType', fromsubclass_=False, pretty_print=True):
        if not fromsubclass_:
            for item_ in self.content_:
                item_.export(outfile, level, item_.name, namespace_, pretty_print=pretty_print)
    def hasContent_(self):
        if (
            self.anytypeobjs_ or
            self.valueOf_
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='DigestMethodType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('valueOf_ = """%s""",\n' % (self.valueOf_,))
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.Algorithm is not None and 'Algorithm' not in already_processed:
            already_processed.append('Algorithm')
            showIndent(outfile, level)
            outfile.write('Algorithm = %s,\n' % (self.Algorithm,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        self.valueOf_ = get_all_text_(node)
        if node.text is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', node.text)
            self.content_.append(obj_)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Algorithm', node)
        if value is not None and 'Algorithm' not in already_processed:
            already_processed.append('Algorithm')
            self.Algorithm = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == '':
            obj_ = __ANY__.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, '', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_'):
              self.add_(obj_.value)
            elif hasattr(self, 'set_'):
              self.set_(obj_.value)
        if not fromsubclass_ and child_.tail is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', child_.tail)
            self.content_.append(obj_)
# end class DigestMethodType


class KeyInfoType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Id=None, KeyName=None, KeyValue=None, RetrievalMethod=None, X509Data=None, PGPData=None, SPKIData=None, MgmtData=None, anytypeobjs_=None, valueOf_=None, mixedclass_=None, content_=None):
        self.Id = _cast(None, Id)
        if KeyName is None:
            self.KeyName = []
        else:
            self.KeyName = KeyName
        if KeyValue is None:
            self.KeyValue = []
        else:
            self.KeyValue = KeyValue
        if RetrievalMethod is None:
            self.RetrievalMethod = []
        else:
            self.RetrievalMethod = RetrievalMethod
        if X509Data is None:
            self.X509Data = []
        else:
            self.X509Data = X509Data
        if PGPData is None:
            self.PGPData = []
        else:
            self.PGPData = PGPData
        if SPKIData is None:
            self.SPKIData = []
        else:
            self.SPKIData = SPKIData
        if MgmtData is None:
            self.MgmtData = []
        else:
            self.MgmtData = MgmtData
        self.anytypeobjs_ = anytypeobjs_
        self.valueOf_ = valueOf_
        if mixedclass_ is None:
            self.mixedclass_ = MixedContainer
        else:
            self.mixedclass_ = mixedclass_
        if content_ is None:
            self.content_ = []
        else:
            self.content_ = content_
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if KeyInfoType.subclass:
            return KeyInfoType.subclass(*args_, **kwargs_)
        else:
            return KeyInfoType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_KeyName(self): return self.KeyName
    def set_KeyName(self, KeyName): self.KeyName = KeyName
    def add_KeyName(self, value): self.KeyName.append(value)
    def insert_KeyName(self, index, value): self.KeyName[index] = value
    def get_KeyValue(self): return self.KeyValue
    def set_KeyValue(self, KeyValue): self.KeyValue = KeyValue
    def add_KeyValue(self, value): self.KeyValue.append(value)
    def insert_KeyValue(self, index, value): self.KeyValue[index] = value
    def get_RetrievalMethod(self): return self.RetrievalMethod
    def set_RetrievalMethod(self, RetrievalMethod): self.RetrievalMethod = RetrievalMethod
    def add_RetrievalMethod(self, value): self.RetrievalMethod.append(value)
    def insert_RetrievalMethod(self, index, value): self.RetrievalMethod[index] = value
    def get_X509Data(self): return self.X509Data
    def set_X509Data(self, X509Data): self.X509Data = X509Data
    def add_X509Data(self, value): self.X509Data.append(value)
    def insert_X509Data(self, index, value): self.X509Data[index] = value
    def get_PGPData(self): return self.PGPData
    def set_PGPData(self, PGPData): self.PGPData = PGPData
    def add_PGPData(self, value): self.PGPData.append(value)
    def insert_PGPData(self, index, value): self.PGPData[index] = value
    def get_SPKIData(self): return self.SPKIData
    def set_SPKIData(self, SPKIData): self.SPKIData = SPKIData
    def add_SPKIData(self, value): self.SPKIData.append(value)
    def insert_SPKIData(self, index, value): self.SPKIData[index] = value
    def get_MgmtData(self): return self.MgmtData
    def set_MgmtData(self, MgmtData): self.MgmtData = MgmtData
    def add_MgmtData(self, value): self.MgmtData.append(value)
    def insert_MgmtData(self, index, value): self.MgmtData[index] = value
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def get_Id(self): return self.Id
    def set_Id(self, Id): self.Id = Id
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def export(self, outfile, level, namespace_='tns:', name_='KeyInfoType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='KeyInfoType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='KeyInfoType'):
        if self.Id is not None and 'Id' not in already_processed:
            already_processed.append('Id')
            outfile.write(' Id=%s' % (quote_attrib(self.Id), ))
    def exportChildren(self, outfile, level, namespace_='tns:', name_='KeyInfoType', fromsubclass_=False, pretty_print=True):
        if not fromsubclass_:
            for item_ in self.content_:
                item_.export(outfile, level, item_.name, namespace_, pretty_print=pretty_print)
    def hasContent_(self):
        if (
            self.KeyName or
            self.KeyValue or
            self.RetrievalMethod or
            self.X509Data or
            self.PGPData or
            self.SPKIData or
            self.MgmtData or
            self.anytypeobjs_ is not None or
            self.valueOf_
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='KeyInfoType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('valueOf_ = """%s""",\n' % (self.valueOf_,))
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.Id is not None and 'Id' not in already_processed:
            already_processed.append('Id')
            showIndent(outfile, level)
            outfile.write('Id = %s,\n' % (self.Id,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        self.valueOf_ = get_all_text_(node)
        if node.text is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', node.text)
            self.content_.append(obj_)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Id', node)
        if value is not None and 'Id' not in already_processed:
            already_processed.append('Id')
            self.Id = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'KeyName' and child_.text is not None:
            valuestr_ = child_.text
            obj_ = self.mixedclass_(MixedContainer.CategorySimple,
                MixedContainer.TypeString, 'KeyName', valuestr_)
            self.content_.append(obj_)
        elif nodeName_ == 'KeyValue':
            obj_ = KeyValue.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'KeyValue', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_KeyValue'):
              self.add_KeyValue(obj_.value)
            elif hasattr(self, 'set_KeyValue'):
              self.set_KeyValue(obj_.value)
        elif nodeName_ == 'RetrievalMethod':
            obj_ = RetrievalMethod.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'RetrievalMethod', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_RetrievalMethod'):
              self.add_RetrievalMethod(obj_.value)
            elif hasattr(self, 'set_RetrievalMethod'):
              self.set_RetrievalMethod(obj_.value)
        elif nodeName_ == 'X509Data':
            obj_ = X509Data.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'X509Data', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_X509Data'):
              self.add_X509Data(obj_.value)
            elif hasattr(self, 'set_X509Data'):
              self.set_X509Data(obj_.value)
        elif nodeName_ == 'PGPData':
            obj_ = PGPData.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'PGPData', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_PGPData'):
              self.add_PGPData(obj_.value)
            elif hasattr(self, 'set_PGPData'):
              self.set_PGPData(obj_.value)
        elif nodeName_ == 'SPKIData':
            obj_ = SPKIData.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'SPKIData', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_SPKIData'):
              self.add_SPKIData(obj_.value)
            elif hasattr(self, 'set_SPKIData'):
              self.set_SPKIData(obj_.value)
        elif nodeName_ == 'MgmtData' and child_.text is not None:
            valuestr_ = child_.text
            obj_ = self.mixedclass_(MixedContainer.CategorySimple,
                MixedContainer.TypeString, 'MgmtData', valuestr_)
            self.content_.append(obj_)
        elif nodeName_ == '':
            obj_ = __ANY__.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, '', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_'):
              self.add_(obj_.value)
            elif hasattr(self, 'set_'):
              self.set_(obj_.value)
        if not fromsubclass_ and child_.tail is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', child_.tail)
            self.content_.append(obj_)
# end class KeyInfoType


class KeyValueType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, DSAKeyValue=None, RSAKeyValue=None, anytypeobjs_=None, valueOf_=None, mixedclass_=None, content_=None):
        self.DSAKeyValue = DSAKeyValue
        self.RSAKeyValue = RSAKeyValue
        self.anytypeobjs_ = anytypeobjs_
        self.valueOf_ = valueOf_
        if mixedclass_ is None:
            self.mixedclass_ = MixedContainer
        else:
            self.mixedclass_ = mixedclass_
        if content_ is None:
            self.content_ = []
        else:
            self.content_ = content_
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if KeyValueType.subclass:
            return KeyValueType.subclass(*args_, **kwargs_)
        else:
            return KeyValueType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DSAKeyValue(self): return self.DSAKeyValue
    def set_DSAKeyValue(self, DSAKeyValue): self.DSAKeyValue = DSAKeyValue
    def get_RSAKeyValue(self): return self.RSAKeyValue
    def set_RSAKeyValue(self, RSAKeyValue): self.RSAKeyValue = RSAKeyValue
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def export(self, outfile, level, namespace_='tns:', name_='KeyValueType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='KeyValueType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='KeyValueType'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='KeyValueType', fromsubclass_=False, pretty_print=True):
        if not fromsubclass_:
            for item_ in self.content_:
                item_.export(outfile, level, item_.name, namespace_, pretty_print=pretty_print)
    def hasContent_(self):
        if (
            self.DSAKeyValue is not None or
            self.RSAKeyValue is not None or
            self.anytypeobjs_ is not None or
            self.valueOf_
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='KeyValueType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('valueOf_ = """%s""",\n' % (self.valueOf_,))
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        self.valueOf_ = get_all_text_(node)
        if node.text is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', node.text)
            self.content_.append(obj_)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DSAKeyValue':
            obj_ = DSAKeyValue.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'DSAKeyValue', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_DSAKeyValue'):
              self.add_DSAKeyValue(obj_.value)
            elif hasattr(self, 'set_DSAKeyValue'):
              self.set_DSAKeyValue(obj_.value)
        elif nodeName_ == 'RSAKeyValue':
            obj_ = RSAKeyValue.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'RSAKeyValue', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_RSAKeyValue'):
              self.add_RSAKeyValue(obj_.value)
            elif hasattr(self, 'set_RSAKeyValue'):
              self.set_RSAKeyValue(obj_.value)
        elif nodeName_ == '':
            obj_ = __ANY__.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, '', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_'):
              self.add_(obj_.value)
            elif hasattr(self, 'set_'):
              self.set_(obj_.value)
        if not fromsubclass_ and child_.tail is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', child_.tail)
            self.content_.append(obj_)
# end class KeyValueType


class RetrievalMethodType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Type=None, URI=None, Transforms=None):
        self.Type = _cast(None, Type)
        self.URI = _cast(None, URI)
        self.Transforms = Transforms
    def factory(*args_, **kwargs_):
        if RetrievalMethodType.subclass:
            return RetrievalMethodType.subclass(*args_, **kwargs_)
        else:
            return RetrievalMethodType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Transforms(self): return self.Transforms
    def set_Transforms(self, Transforms): self.Transforms = Transforms
    def get_Type(self): return self.Type
    def set_Type(self, Type): self.Type = Type
    def get_URI(self): return self.URI
    def set_URI(self, URI): self.URI = URI
    def export(self, outfile, level, namespace_='tns:', name_='RetrievalMethodType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='RetrievalMethodType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='RetrievalMethodType'):
        if self.Type is not None and 'Type' not in already_processed:
            already_processed.append('Type')
            outfile.write(' Type=%s' % (quote_attrib(self.Type), ))
        if self.URI is not None and 'URI' not in already_processed:
            already_processed.append('URI')
            outfile.write(' URI=%s' % (quote_attrib(self.URI), ))
    def exportChildren(self, outfile, level, namespace_='tns:', name_='RetrievalMethodType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Transforms is not None:
            self.Transforms.export(outfile, level, namespace_, name_='Transforms', pretty_print=pretty_print)
    def hasContent_(self):
        if (
            self.Transforms is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='RetrievalMethodType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.Type is not None and 'Type' not in already_processed:
            already_processed.append('Type')
            showIndent(outfile, level)
            outfile.write('Type = %s,\n' % (self.Type,))
        if self.URI is not None and 'URI' not in already_processed:
            already_processed.append('URI')
            showIndent(outfile, level)
            outfile.write('URI = %s,\n' % (self.URI,))
    def exportLiteralChildren(self, outfile, level, name_):
        if self.Transforms is not None:
            showIndent(outfile, level)
            outfile.write('Transforms=model_.Transforms(\n')
            self.Transforms.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Type', node)
        if value is not None and 'Type' not in already_processed:
            already_processed.append('Type')
            self.Type = value
        value = find_attr_value_('URI', node)
        if value is not None and 'URI' not in already_processed:
            already_processed.append('URI')
            self.URI = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Transforms':
            obj_ = TransformsType.factory()
            obj_.build(child_)
            self.set_Transforms(obj_)
# end class RetrievalMethodType


class X509DataType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, X509IssuerSerial=None, X509SKI=None, X509SubjectName=None, X509Certificate=None, X509CRL=None, anytypeobjs_=None):
        self.X509IssuerSerial = X509IssuerSerial
        self.X509SKI = X509SKI
        self.X509SubjectName = X509SubjectName
        self.X509Certificate = X509Certificate
        self.X509CRL = X509CRL
        self.anytypeobjs_ = anytypeobjs_
    def factory(*args_, **kwargs_):
        if X509DataType.subclass:
            return X509DataType.subclass(*args_, **kwargs_)
        else:
            return X509DataType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_X509IssuerSerial(self): return self.X509IssuerSerial
    def set_X509IssuerSerial(self, X509IssuerSerial): self.X509IssuerSerial = X509IssuerSerial
    def get_X509SKI(self): return self.X509SKI
    def set_X509SKI(self, X509SKI): self.X509SKI = X509SKI
    def get_X509SubjectName(self): return self.X509SubjectName
    def set_X509SubjectName(self, X509SubjectName): self.X509SubjectName = X509SubjectName
    def get_X509Certificate(self): return self.X509Certificate
    def set_X509Certificate(self, X509Certificate): self.X509Certificate = X509Certificate
    def get_X509CRL(self): return self.X509CRL
    def set_X509CRL(self, X509CRL): self.X509CRL = X509CRL
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def export(self, outfile, level, namespace_='tns:', name_='X509DataType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='X509DataType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='X509DataType'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='X509DataType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.X509IssuerSerial is not None:
            self.X509IssuerSerial.export(outfile, level, namespace_, name_='X509IssuerSerial', pretty_print=pretty_print)
        if self.X509SKI is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sX509SKI>%s</%sX509SKI>%s' % (namespace_, self.gds_format_string(quote_xml(self.X509SKI).encode(ExternalEncoding), input_name='X509SKI'), namespace_, eol_))
        if self.X509SubjectName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sX509SubjectName>%s</%sX509SubjectName>%s' % (namespace_, self.gds_format_string(quote_xml(self.X509SubjectName).encode(ExternalEncoding), input_name='X509SubjectName'), namespace_, eol_))
        if self.X509Certificate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sX509Certificate>%s</%sX509Certificate>%s' % (namespace_, self.gds_format_string(quote_xml(self.X509Certificate).encode(ExternalEncoding), input_name='X509Certificate'), namespace_, eol_))
        if self.X509CRL is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sX509CRL>%s</%sX509CRL>%s' % (namespace_, self.gds_format_string(quote_xml(self.X509CRL).encode(ExternalEncoding), input_name='X509CRL'), namespace_, eol_))
        if self.anytypeobjs_ is not None:
            self.anytypeobjs_.export(outfile, level, namespace_, pretty_print=pretty_print)
    def hasContent_(self):
        if (
            self.X509IssuerSerial is not None or
            self.X509SKI is not None or
            self.X509SubjectName is not None or
            self.X509Certificate is not None or
            self.X509CRL is not None or
            self.anytypeobjs_ is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='X509DataType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.X509IssuerSerial is not None:
            showIndent(outfile, level)
            outfile.write('X509IssuerSerial=model_.X509IssuerSerialType(\n')
            self.X509IssuerSerial.exportLiteral(outfile, level, name_='X509IssuerSerial')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.X509SKI is not None:
            showIndent(outfile, level)
            outfile.write('X509SKI=%s,\n' % quote_python(self.X509SKI).encode(ExternalEncoding))
        if self.X509SubjectName is not None:
            showIndent(outfile, level)
            outfile.write('X509SubjectName=%s,\n' % quote_python(self.X509SubjectName).encode(ExternalEncoding))
        if self.X509Certificate is not None:
            showIndent(outfile, level)
            outfile.write('X509Certificate=%s,\n' % quote_python(self.X509Certificate).encode(ExternalEncoding))
        if self.X509CRL is not None:
            showIndent(outfile, level)
            outfile.write('X509CRL=%s,\n' % quote_python(self.X509CRL).encode(ExternalEncoding))
        if self.anytypeobjs_ is not None:
            showIndent(outfile, level)
            outfile.write('anytypeobjs_=model_.anytypeobjs_(\n')
            self.anytypeobjs_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'X509IssuerSerial':
            obj_ = X509IssuerSerialType.factory()
            obj_.build(child_)
            self.set_X509IssuerSerial(obj_)
        elif nodeName_ == 'X509SKI':
            X509SKI_ = child_.text
            X509SKI_ = self.gds_validate_string(X509SKI_, node, 'X509SKI')
            self.X509SKI = X509SKI_
        elif nodeName_ == 'X509SubjectName':
            X509SubjectName_ = child_.text
            X509SubjectName_ = self.gds_validate_string(X509SubjectName_, node, 'X509SubjectName')
            self.X509SubjectName = X509SubjectName_
        elif nodeName_ == 'X509Certificate':
            X509Certificate_ = child_.text
            X509Certificate_ = self.gds_validate_string(X509Certificate_, node, 'X509Certificate')
            self.X509Certificate = X509Certificate_
        elif nodeName_ == 'X509CRL':
            X509CRL_ = child_.text
            X509CRL_ = self.gds_validate_string(X509CRL_, node, 'X509CRL')
            self.X509CRL = X509CRL_
        else:
            obj_ = self.gds_build_any(child_, 'X509DataType')
            if obj_ is not None:
                self.set_anytypeobjs_(obj_)
# end class X509DataType


class X509IssuerSerialType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, X509IssuerName=None, X509SerialNumber=None):
        self.X509IssuerName = X509IssuerName
        self.X509SerialNumber = X509SerialNumber
    def factory(*args_, **kwargs_):
        if X509IssuerSerialType.subclass:
            return X509IssuerSerialType.subclass(*args_, **kwargs_)
        else:
            return X509IssuerSerialType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_X509IssuerName(self): return self.X509IssuerName
    def set_X509IssuerName(self, X509IssuerName): self.X509IssuerName = X509IssuerName
    def get_X509SerialNumber(self): return self.X509SerialNumber
    def set_X509SerialNumber(self, X509SerialNumber): self.X509SerialNumber = X509SerialNumber
    def export(self, outfile, level, namespace_='tns:', name_='X509IssuerSerialType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='X509IssuerSerialType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='X509IssuerSerialType'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='X509IssuerSerialType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.X509IssuerName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sX509IssuerName>%s</%sX509IssuerName>%s' % (namespace_, self.gds_format_string(quote_xml(self.X509IssuerName).encode(ExternalEncoding), input_name='X509IssuerName'), namespace_, eol_))
        if self.X509SerialNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sX509SerialNumber>%s</%sX509SerialNumber>%s' % (namespace_, self.gds_format_string(quote_xml(self.X509SerialNumber).encode(ExternalEncoding), input_name='X509SerialNumber'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.X509IssuerName is not None or
            self.X509SerialNumber is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='X509IssuerSerialType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.X509IssuerName is not None:
            showIndent(outfile, level)
            outfile.write('X509IssuerName=%s,\n' % quote_python(self.X509IssuerName).encode(ExternalEncoding))
        if self.X509SerialNumber is not None:
            showIndent(outfile, level)
            outfile.write('X509SerialNumber=%s,\n' % quote_python(self.X509SerialNumber).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'X509IssuerName':
            X509IssuerName_ = child_.text
            X509IssuerName_ = self.gds_validate_string(X509IssuerName_, node, 'X509IssuerName')
            self.X509IssuerName = X509IssuerName_
        elif nodeName_ == 'X509SerialNumber':
            X509SerialNumber_ = child_.text
            X509SerialNumber_ = self.gds_validate_string(X509SerialNumber_, node, 'X509SerialNumber')
            self.X509SerialNumber = X509SerialNumber_
# end class X509IssuerSerialType


class PGPDataType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, PGPKeyID=None, PGPKeyPacket=None, anytypeobjs_=None):
        self.PGPKeyID = PGPKeyID
        self.PGPKeyPacket = PGPKeyPacket
        if anytypeobjs_ is None:
            self.anytypeobjs_ = []
        else:
            self.anytypeobjs_ = anytypeobjs_
        self.PGPKeyPacket = PGPKeyPacket
        if anytypeobjs_ is None:
            self.anytypeobjs_ = []
        else:
            self.anytypeobjs_ = anytypeobjs_
    def factory(*args_, **kwargs_):
        if PGPDataType.subclass:
            return PGPDataType.subclass(*args_, **kwargs_)
        else:
            return PGPDataType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_PGPKeyID(self): return self.PGPKeyID
    def set_PGPKeyID(self, PGPKeyID): self.PGPKeyID = PGPKeyID
    def get_PGPKeyPacket(self): return self.PGPKeyPacket
    def set_PGPKeyPacket(self, PGPKeyPacket): self.PGPKeyPacket = PGPKeyPacket
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def add_anytypeobjs_(self, value): self.anytypeobjs_.append(value)
    def insert_anytypeobjs_(self, index, value): self._anytypeobjs_[index] = value
    def get_PGPKeyPacket(self): return self.PGPKeyPacket
    def set_PGPKeyPacket(self, PGPKeyPacket): self.PGPKeyPacket = PGPKeyPacket
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def add_anytypeobjs_(self, value): self.anytypeobjs_.append(value)
    def insert_anytypeobjs_(self, index, value): self._anytypeobjs_[index] = value
    def export(self, outfile, level, namespace_='tns:', name_='PGPDataType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PGPDataType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='PGPDataType'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='PGPDataType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PGPKeyID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPGPKeyID>%s</%sPGPKeyID>%s' % (namespace_, self.gds_format_string(quote_xml(self.PGPKeyID).encode(ExternalEncoding), input_name='PGPKeyID'), namespace_, eol_))
        if self.PGPKeyPacket is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPGPKeyPacket>%s</%sPGPKeyPacket>%s' % (namespace_, self.gds_format_string(quote_xml(self.PGPKeyPacket).encode(ExternalEncoding), input_name='PGPKeyPacket'), namespace_, eol_))
        if self.PGPKeyPacket is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPGPKeyPacket>%s</%sPGPKeyPacket>%s' % (namespace_, self.gds_format_string(quote_xml(self.PGPKeyPacket).encode(ExternalEncoding), input_name='PGPKeyPacket'), namespace_, eol_))
        for obj_ in self.anytypeobjs_:
            obj_.export(outfile, level, namespace_, pretty_print=pretty_print)
    def hasContent_(self):
        if (
            self.PGPKeyID is not None or
            self.PGPKeyPacket is not None or
            self.anytypeobjs_ or
            self.PGPKeyPacket is not None or
            self.anytypeobjs_
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='PGPDataType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.PGPKeyID is not None:
            showIndent(outfile, level)
            outfile.write('PGPKeyID=%s,\n' % quote_python(self.PGPKeyID).encode(ExternalEncoding))
        if self.PGPKeyPacket is not None:
            showIndent(outfile, level)
            outfile.write('PGPKeyPacket=%s,\n' % quote_python(self.PGPKeyPacket).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('anytypeobjs_=[\n')
        level += 1
        for anytypeobjs_ in self.anytypeobjs_:
            anytypeobjs_.exportLiteral(outfile, level)
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        if self.PGPKeyPacket is not None:
            showIndent(outfile, level)
            outfile.write('PGPKeyPacket=%s,\n' % quote_python(self.PGPKeyPacket).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('anytypeobjs_=[\n')
        level += 1
        for anytypeobjs_ in self.anytypeobjs_:
            anytypeobjs_.exportLiteral(outfile, level)
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'PGPKeyID':
            PGPKeyID_ = child_.text
            PGPKeyID_ = self.gds_validate_string(PGPKeyID_, node, 'PGPKeyID')
            self.PGPKeyID = PGPKeyID_
        elif nodeName_ == 'PGPKeyPacket':
            PGPKeyPacket_ = child_.text
            PGPKeyPacket_ = self.gds_validate_string(PGPKeyPacket_, node, 'PGPKeyPacket')
            self.PGPKeyPacket = PGPKeyPacket_
        elif nodeName_ == 'PGPKeyPacket':
            PGPKeyPacket_ = child_.text
            PGPKeyPacket_ = self.gds_validate_string(PGPKeyPacket_, node, 'PGPKeyPacket')
            self.PGPKeyPacket = PGPKeyPacket_
        else:
            obj_ = self.gds_build_any(child_, 'PGPDataType')
            if obj_ is not None:
                self.add_anytypeobjs_(obj_)
# end class PGPDataType


class SPKIDataType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, SPKISexp=None, anytypeobjs_=None):
        self.SPKISexp = SPKISexp
        self.anytypeobjs_ = anytypeobjs_
    def factory(*args_, **kwargs_):
        if SPKIDataType.subclass:
            return SPKIDataType.subclass(*args_, **kwargs_)
        else:
            return SPKIDataType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_SPKISexp(self): return self.SPKISexp
    def set_SPKISexp(self, SPKISexp): self.SPKISexp = SPKISexp
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def export(self, outfile, level, namespace_='tns:', name_='SPKIDataType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SPKIDataType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='SPKIDataType'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='SPKIDataType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.SPKISexp is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSPKISexp>%s</%sSPKISexp>%s' % (namespace_, self.gds_format_string(quote_xml(self.SPKISexp).encode(ExternalEncoding), input_name='SPKISexp'), namespace_, eol_))
        if self.anytypeobjs_ is not None:
            self.anytypeobjs_.export(outfile, level, namespace_, pretty_print=pretty_print)
    def hasContent_(self):
        if (
            self.SPKISexp is not None or
            self.anytypeobjs_ is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='SPKIDataType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.SPKISexp is not None:
            showIndent(outfile, level)
            outfile.write('SPKISexp=%s,\n' % quote_python(self.SPKISexp).encode(ExternalEncoding))
        if self.anytypeobjs_ is not None:
            showIndent(outfile, level)
            outfile.write('anytypeobjs_=model_.anytypeobjs_(\n')
            self.anytypeobjs_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'SPKISexp':
            SPKISexp_ = child_.text
            SPKISexp_ = self.gds_validate_string(SPKISexp_, node, 'SPKISexp')
            self.SPKISexp = SPKISexp_
        else:
            obj_ = self.gds_build_any(child_, 'SPKIDataType')
            if obj_ is not None:
                self.set_anytypeobjs_(obj_)
# end class SPKIDataType


class ObjectType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, MimeType=None, Id=None, Encoding=None, anytypeobjs_=None, valueOf_=None, mixedclass_=None, content_=None):
        self.MimeType = _cast(None, MimeType)
        self.Id = _cast(None, Id)
        self.Encoding = _cast(None, Encoding)
        self.anytypeobjs_ = anytypeobjs_
        self.valueOf_ = valueOf_
        if mixedclass_ is None:
            self.mixedclass_ = MixedContainer
        else:
            self.mixedclass_ = mixedclass_
        if content_ is None:
            self.content_ = []
        else:
            self.content_ = content_
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if ObjectType.subclass:
            return ObjectType.subclass(*args_, **kwargs_)
        else:
            return ObjectType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def get_MimeType(self): return self.MimeType
    def set_MimeType(self, MimeType): self.MimeType = MimeType
    def get_Id(self): return self.Id
    def set_Id(self, Id): self.Id = Id
    def get_Encoding(self): return self.Encoding
    def set_Encoding(self, Encoding): self.Encoding = Encoding
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def export(self, outfile, level, namespace_='tns:', name_='ObjectType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ObjectType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='ObjectType'):
        if self.MimeType is not None and 'MimeType' not in already_processed:
            already_processed.append('MimeType')
            outfile.write(' MimeType=%s' % (quote_attrib(self.MimeType), ))
        if self.Id is not None and 'Id' not in already_processed:
            already_processed.append('Id')
            outfile.write(' Id=%s' % (quote_attrib(self.Id), ))
        if self.Encoding is not None and 'Encoding' not in already_processed:
            already_processed.append('Encoding')
            outfile.write(' Encoding=%s' % (quote_attrib(self.Encoding), ))
    def exportChildren(self, outfile, level, namespace_='tns:', name_='ObjectType', fromsubclass_=False, pretty_print=True):
        if not fromsubclass_:
            for item_ in self.content_:
                item_.export(outfile, level, item_.name, namespace_, pretty_print=pretty_print)
    def hasContent_(self):
        if (
            self.anytypeobjs_ is not None or
            self.valueOf_
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='ObjectType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('valueOf_ = """%s""",\n' % (self.valueOf_,))
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.MimeType is not None and 'MimeType' not in already_processed:
            already_processed.append('MimeType')
            showIndent(outfile, level)
            outfile.write('MimeType = %s,\n' % (self.MimeType,))
        if self.Id is not None and 'Id' not in already_processed:
            already_processed.append('Id')
            showIndent(outfile, level)
            outfile.write('Id = %s,\n' % (self.Id,))
        if self.Encoding is not None and 'Encoding' not in already_processed:
            already_processed.append('Encoding')
            showIndent(outfile, level)
            outfile.write('Encoding = %s,\n' % (self.Encoding,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        self.valueOf_ = get_all_text_(node)
        if node.text is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', node.text)
            self.content_.append(obj_)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('MimeType', node)
        if value is not None and 'MimeType' not in already_processed:
            already_processed.append('MimeType')
            self.MimeType = value
        value = find_attr_value_('Id', node)
        if value is not None and 'Id' not in already_processed:
            already_processed.append('Id')
            self.Id = value
        value = find_attr_value_('Encoding', node)
        if value is not None and 'Encoding' not in already_processed:
            already_processed.append('Encoding')
            self.Encoding = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == '':
            obj_ = __ANY__.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, '', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_'):
              self.add_(obj_.value)
            elif hasattr(self, 'set_'):
              self.set_(obj_.value)
        if not fromsubclass_ and child_.tail is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', child_.tail)
            self.content_.append(obj_)
# end class ObjectType


class ManifestType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Id=None, Reference=None):
        self.Id = _cast(None, Id)
        if Reference is None:
            self.Reference = []
        else:
            self.Reference = Reference
    def factory(*args_, **kwargs_):
        if ManifestType.subclass:
            return ManifestType.subclass(*args_, **kwargs_)
        else:
            return ManifestType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Reference(self): return self.Reference
    def set_Reference(self, Reference): self.Reference = Reference
    def add_Reference(self, value): self.Reference.append(value)
    def insert_Reference(self, index, value): self.Reference[index] = value
    def get_Id(self): return self.Id
    def set_Id(self, Id): self.Id = Id
    def export(self, outfile, level, namespace_='tns:', name_='ManifestType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ManifestType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='ManifestType'):
        if self.Id is not None and 'Id' not in already_processed:
            already_processed.append('Id')
            outfile.write(' Id=%s' % (quote_attrib(self.Id), ))
    def exportChildren(self, outfile, level, namespace_='tns:', name_='ManifestType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Reference_ in self.Reference:
            Reference_.export(outfile, level, namespace_, name_='Reference', pretty_print=pretty_print)
    def hasContent_(self):
        if (
            self.Reference
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='ManifestType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.Id is not None and 'Id' not in already_processed:
            already_processed.append('Id')
            showIndent(outfile, level)
            outfile.write('Id = %s,\n' % (self.Id,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('Reference=[\n')
        level += 1
        for Reference_ in self.Reference:
            showIndent(outfile, level)
            outfile.write('model_.Reference(\n')
            Reference_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Id', node)
        if value is not None and 'Id' not in already_processed:
            already_processed.append('Id')
            self.Id = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Reference':
            obj_ = ReferenceType.factory()
            obj_.build(child_)
            self.Reference.append(obj_)
# end class ManifestType


class SignaturePropertiesType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Id=None, SignatureProperty=None):
        self.Id = _cast(None, Id)
        if SignatureProperty is None:
            self.SignatureProperty = []
        else:
            self.SignatureProperty = SignatureProperty
    def factory(*args_, **kwargs_):
        if SignaturePropertiesType.subclass:
            return SignaturePropertiesType.subclass(*args_, **kwargs_)
        else:
            return SignaturePropertiesType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_SignatureProperty(self): return self.SignatureProperty
    def set_SignatureProperty(self, SignatureProperty): self.SignatureProperty = SignatureProperty
    def add_SignatureProperty(self, value): self.SignatureProperty.append(value)
    def insert_SignatureProperty(self, index, value): self.SignatureProperty[index] = value
    def get_Id(self): return self.Id
    def set_Id(self, Id): self.Id = Id
    def export(self, outfile, level, namespace_='tns:', name_='SignaturePropertiesType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SignaturePropertiesType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='SignaturePropertiesType'):
        if self.Id is not None and 'Id' not in already_processed:
            already_processed.append('Id')
            outfile.write(' Id=%s' % (quote_attrib(self.Id), ))
    def exportChildren(self, outfile, level, namespace_='tns:', name_='SignaturePropertiesType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for SignatureProperty_ in self.SignatureProperty:
            SignatureProperty_.export(outfile, level, namespace_, name_='SignatureProperty', pretty_print=pretty_print)
    def hasContent_(self):
        if (
            self.SignatureProperty
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='SignaturePropertiesType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.Id is not None and 'Id' not in already_processed:
            already_processed.append('Id')
            showIndent(outfile, level)
            outfile.write('Id = %s,\n' % (self.Id,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('SignatureProperty=[\n')
        level += 1
        for SignatureProperty_ in self.SignatureProperty:
            showIndent(outfile, level)
            outfile.write('model_.SignatureProperty(\n')
            SignatureProperty_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Id', node)
        if value is not None and 'Id' not in already_processed:
            already_processed.append('Id')
            self.Id = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'SignatureProperty':
            obj_ = SignaturePropertyType.factory()
            obj_.build(child_)
            self.SignatureProperty.append(obj_)
# end class SignaturePropertiesType


class SignaturePropertyType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Target=None, Id=None, anytypeobjs_=None, valueOf_=None, mixedclass_=None, content_=None):
        self.Target = _cast(None, Target)
        self.Id = _cast(None, Id)
        self.anytypeobjs_ = anytypeobjs_
        self.valueOf_ = valueOf_
        if mixedclass_ is None:
            self.mixedclass_ = MixedContainer
        else:
            self.mixedclass_ = mixedclass_
        if content_ is None:
            self.content_ = []
        else:
            self.content_ = content_
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if SignaturePropertyType.subclass:
            return SignaturePropertyType.subclass(*args_, **kwargs_)
        else:
            return SignaturePropertyType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def get_Target(self): return self.Target
    def set_Target(self, Target): self.Target = Target
    def get_Id(self): return self.Id
    def set_Id(self, Id): self.Id = Id
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def export(self, outfile, level, namespace_='tns:', name_='SignaturePropertyType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SignaturePropertyType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='SignaturePropertyType'):
        if self.Target is not None and 'Target' not in already_processed:
            already_processed.append('Target')
            outfile.write(' Target=%s' % (quote_attrib(self.Target), ))
        if self.Id is not None and 'Id' not in already_processed:
            already_processed.append('Id')
            outfile.write(' Id=%s' % (quote_attrib(self.Id), ))
    def exportChildren(self, outfile, level, namespace_='tns:', name_='SignaturePropertyType', fromsubclass_=False, pretty_print=True):
        if not fromsubclass_:
            for item_ in self.content_:
                item_.export(outfile, level, item_.name, namespace_, pretty_print=pretty_print)
    def hasContent_(self):
        if (
            self.anytypeobjs_ is not None or
            self.valueOf_
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='SignaturePropertyType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('valueOf_ = """%s""",\n' % (self.valueOf_,))
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.Target is not None and 'Target' not in already_processed:
            already_processed.append('Target')
            showIndent(outfile, level)
            outfile.write('Target = %s,\n' % (self.Target,))
        if self.Id is not None and 'Id' not in already_processed:
            already_processed.append('Id')
            showIndent(outfile, level)
            outfile.write('Id = %s,\n' % (self.Id,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        self.valueOf_ = get_all_text_(node)
        if node.text is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', node.text)
            self.content_.append(obj_)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Target', node)
        if value is not None and 'Target' not in already_processed:
            already_processed.append('Target')
            self.Target = value
        value = find_attr_value_('Id', node)
        if value is not None and 'Id' not in already_processed:
            already_processed.append('Id')
            self.Id = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == '':
            obj_ = __ANY__.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, '', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_'):
              self.add_(obj_.value)
            elif hasattr(self, 'set_'):
              self.set_(obj_.value)
        if not fromsubclass_ and child_.tail is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', child_.tail)
            self.content_.append(obj_)
# end class SignaturePropertyType


class DSAKeyValueType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, P=None, Q=None, G=None, Y=None, J=None, Seed=None, PgenCounter=None):
        self.P = P
        self.Q = Q
        self.G = G
        self.Y = Y
        self.J = J
        self.Seed = Seed
        self.PgenCounter = PgenCounter
    def factory(*args_, **kwargs_):
        if DSAKeyValueType.subclass:
            return DSAKeyValueType.subclass(*args_, **kwargs_)
        else:
            return DSAKeyValueType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_P(self): return self.P
    def set_P(self, P): self.P = P
    def validate_CryptoBinary(self, value):
        # Validate type CryptoBinary, a restriction on base64Binary.
        pass
    def get_Q(self): return self.Q
    def set_Q(self, Q): self.Q = Q
    def get_G(self): return self.G
    def set_G(self, G): self.G = G
    def get_Y(self): return self.Y
    def set_Y(self, Y): self.Y = Y
    def get_J(self): return self.J
    def set_J(self, J): self.J = J
    def get_Seed(self): return self.Seed
    def set_Seed(self, Seed): self.Seed = Seed
    def get_PgenCounter(self): return self.PgenCounter
    def set_PgenCounter(self, PgenCounter): self.PgenCounter = PgenCounter
    def export(self, outfile, level, namespace_='tns:', name_='DSAKeyValueType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DSAKeyValueType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='DSAKeyValueType'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='DSAKeyValueType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.P is not None:
            self.P.export(outfile, level, namespace_, name_='P', pretty_print=pretty_print)
        if self.Q is not None:
            self.Q.export(outfile, level, namespace_, name_='Q', pretty_print=pretty_print)
        if self.G is not None:
            self.G.export(outfile, level, namespace_, name_='G', pretty_print=pretty_print)
        if self.Y is not None:
            self.Y.export(outfile, level, namespace_, name_='Y', pretty_print=pretty_print)
        if self.J is not None:
            self.J.export(outfile, level, namespace_, name_='J', pretty_print=pretty_print)
        if self.Seed is not None:
            self.Seed.export(outfile, level, namespace_, name_='Seed', pretty_print=pretty_print)
        if self.PgenCounter is not None:
            self.PgenCounter.export(outfile, level, namespace_, name_='PgenCounter', pretty_print=pretty_print)
    def hasContent_(self):
        if (
            self.P is not None or
            self.Q is not None or
            self.G is not None or
            self.Y is not None or
            self.J is not None or
            self.Seed is not None or
            self.PgenCounter is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='DSAKeyValueType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.P is not None:
            showIndent(outfile, level)
            outfile.write('P=model_.base64Binary(\n')
            self.P.exportLiteral(outfile, level, name_='P')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.Q is not None:
            showIndent(outfile, level)
            outfile.write('Q=model_.base64Binary(\n')
            self.Q.exportLiteral(outfile, level, name_='Q')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.G is not None:
            showIndent(outfile, level)
            outfile.write('G=model_.base64Binary(\n')
            self.G.exportLiteral(outfile, level, name_='G')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.Y is not None:
            showIndent(outfile, level)
            outfile.write('Y=model_.base64Binary(\n')
            self.Y.exportLiteral(outfile, level, name_='Y')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.J is not None:
            showIndent(outfile, level)
            outfile.write('J=model_.base64Binary(\n')
            self.J.exportLiteral(outfile, level, name_='J')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.Seed is not None:
            showIndent(outfile, level)
            outfile.write('Seed=model_.base64Binary(\n')
            self.Seed.exportLiteral(outfile, level, name_='Seed')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.PgenCounter is not None:
            showIndent(outfile, level)
            outfile.write('PgenCounter=model_.base64Binary(\n')
            self.PgenCounter.exportLiteral(outfile, level, name_='PgenCounter')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'P':
            obj_ = None
            self.set_P(obj_)
            self.validate_CryptoBinary(self.P)    # validate type CryptoBinary
        elif nodeName_ == 'Q':
            obj_ = None
            self.set_Q(obj_)
            self.validate_CryptoBinary(self.Q)    # validate type CryptoBinary
        elif nodeName_ == 'G':
            obj_ = None
            self.set_G(obj_)
            self.validate_CryptoBinary(self.G)    # validate type CryptoBinary
        elif nodeName_ == 'Y':
            obj_ = None
            self.set_Y(obj_)
            self.validate_CryptoBinary(self.Y)    # validate type CryptoBinary
        elif nodeName_ == 'J':
            obj_ = None
            self.set_J(obj_)
            self.validate_CryptoBinary(self.J)    # validate type CryptoBinary
        elif nodeName_ == 'Seed':
            obj_ = None
            self.set_Seed(obj_)
            self.validate_CryptoBinary(self.Seed)    # validate type CryptoBinary
        elif nodeName_ == 'PgenCounter':
            obj_ = None
            self.set_PgenCounter(obj_)
            self.validate_CryptoBinary(self.PgenCounter)    # validate type CryptoBinary
# end class DSAKeyValueType


class RSAKeyValueType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Modulus=None, Exponent=None):
        self.Modulus = Modulus
        self.Exponent = Exponent
    def factory(*args_, **kwargs_):
        if RSAKeyValueType.subclass:
            return RSAKeyValueType.subclass(*args_, **kwargs_)
        else:
            return RSAKeyValueType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Modulus(self): return self.Modulus
    def set_Modulus(self, Modulus): self.Modulus = Modulus
    def validate_CryptoBinary(self, value):
        # Validate type CryptoBinary, a restriction on base64Binary.
        pass
    def get_Exponent(self): return self.Exponent
    def set_Exponent(self, Exponent): self.Exponent = Exponent
    def export(self, outfile, level, namespace_='tns:', name_='RSAKeyValueType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='RSAKeyValueType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='RSAKeyValueType'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='RSAKeyValueType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Modulus is not None:
            self.Modulus.export(outfile, level, namespace_, name_='Modulus', pretty_print=pretty_print)
        if self.Exponent is not None:
            self.Exponent.export(outfile, level, namespace_, name_='Exponent', pretty_print=pretty_print)
    def hasContent_(self):
        if (
            self.Modulus is not None or
            self.Exponent is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='RSAKeyValueType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.Modulus is not None:
            showIndent(outfile, level)
            outfile.write('Modulus=model_.base64Binary(\n')
            self.Modulus.exportLiteral(outfile, level, name_='Modulus')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.Exponent is not None:
            showIndent(outfile, level)
            outfile.write('Exponent=model_.base64Binary(\n')
            self.Exponent.exportLiteral(outfile, level, name_='Exponent')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Modulus':
            obj_ = None
            self.set_Modulus(obj_)
            self.validate_CryptoBinary(self.Modulus)    # validate type CryptoBinary
        elif nodeName_ == 'Exponent':
            obj_ = None
            self.set_Exponent(obj_)
            self.validate_CryptoBinary(self.Exponent)    # validate type CryptoBinary
# end class RSAKeyValueType


class EncryptedType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, MimeType=None, Type=None, Id=None, Encoding=None, EncryptionMethod=None, KeyInfo=None, CipherData=None, EncryptionProperties=None, extensiontype_=None):
        self.MimeType = _cast(None, MimeType)
        self.Type = _cast(None, Type)
        self.Id = _cast(None, Id)
        self.Encoding = _cast(None, Encoding)
        self.EncryptionMethod = EncryptionMethod
        self.KeyInfo = KeyInfo
        self.CipherData = CipherData
        self.EncryptionProperties = EncryptionProperties
        self.extensiontype_ = extensiontype_
    def factory(*args_, **kwargs_):
        if EncryptedType.subclass:
            return EncryptedType.subclass(*args_, **kwargs_)
        else:
            return EncryptedType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_EncryptionMethod(self): return self.EncryptionMethod
    def set_EncryptionMethod(self, EncryptionMethod): self.EncryptionMethod = EncryptionMethod
    def get_KeyInfo(self): return self.KeyInfo
    def set_KeyInfo(self, KeyInfo): self.KeyInfo = KeyInfo
    def get_CipherData(self): return self.CipherData
    def set_CipherData(self, CipherData): self.CipherData = CipherData
    def get_EncryptionProperties(self): return self.EncryptionProperties
    def set_EncryptionProperties(self, EncryptionProperties): self.EncryptionProperties = EncryptionProperties
    def get_MimeType(self): return self.MimeType
    def set_MimeType(self, MimeType): self.MimeType = MimeType
    def get_Type(self): return self.Type
    def set_Type(self, Type): self.Type = Type
    def get_Id(self): return self.Id
    def set_Id(self, Id): self.Id = Id
    def get_Encoding(self): return self.Encoding
    def set_Encoding(self, Encoding): self.Encoding = Encoding
    def get_extensiontype_(self): return self.extensiontype_
    def set_extensiontype_(self, extensiontype_): self.extensiontype_ = extensiontype_
    def export(self, outfile, level, namespace_='tns:', name_='EncryptedType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='EncryptedType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='EncryptedType'):
        if self.MimeType is not None and 'MimeType' not in already_processed:
            already_processed.append('MimeType')
            outfile.write(' MimeType=%s' % (quote_attrib(self.MimeType), ))
        if self.Type is not None and 'Type' not in already_processed:
            already_processed.append('Type')
            outfile.write(' Type=%s' % (quote_attrib(self.Type), ))
        if self.Id is not None and 'Id' not in already_processed:
            already_processed.append('Id')
            outfile.write(' Id=%s' % (quote_attrib(self.Id), ))
        if self.Encoding is not None and 'Encoding' not in already_processed:
            already_processed.append('Encoding')
            outfile.write(' Encoding=%s' % (quote_attrib(self.Encoding), ))
        if self.extensiontype_ is not None and 'xsi:type' not in already_processed:
            already_processed.append('xsi:type')
            outfile.write(' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"')
            outfile.write(' xsi:type="%s"' % self.extensiontype_)
    def exportChildren(self, outfile, level, namespace_='tns:', name_='EncryptedType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.EncryptionMethod is not None:
            self.EncryptionMethod.export(outfile, level, namespace_, name_='EncryptionMethod', pretty_print=pretty_print)
        if self.KeyInfo is not None:
            self.KeyInfo.export(outfile, level, namespace_, name_='KeyInfo', pretty_print=pretty_print)
        if self.CipherData is not None:
            self.CipherData.export(outfile, level, namespace_, name_='CipherData', pretty_print=pretty_print)
        if self.EncryptionProperties is not None:
            self.EncryptionProperties.export(outfile, level, namespace_, name_='EncryptionProperties', pretty_print=pretty_print)
    def hasContent_(self):
        if (
            self.EncryptionMethod is not None or
            self.KeyInfo is not None or
            self.CipherData is not None or
            self.EncryptionProperties is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='EncryptedType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.MimeType is not None and 'MimeType' not in already_processed:
            already_processed.append('MimeType')
            showIndent(outfile, level)
            outfile.write('MimeType = %s,\n' % (self.MimeType,))
        if self.Type is not None and 'Type' not in already_processed:
            already_processed.append('Type')
            showIndent(outfile, level)
            outfile.write('Type = %s,\n' % (self.Type,))
        if self.Id is not None and 'Id' not in already_processed:
            already_processed.append('Id')
            showIndent(outfile, level)
            outfile.write('Id = %s,\n' % (self.Id,))
        if self.Encoding is not None and 'Encoding' not in already_processed:
            already_processed.append('Encoding')
            showIndent(outfile, level)
            outfile.write('Encoding = %s,\n' % (self.Encoding,))
    def exportLiteralChildren(self, outfile, level, name_):
        if self.EncryptionMethod is not None:
            showIndent(outfile, level)
            outfile.write('EncryptionMethod=model_.EncryptionMethodType(\n')
            self.EncryptionMethod.exportLiteral(outfile, level, name_='EncryptionMethod')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.KeyInfo is not None:
            showIndent(outfile, level)
            outfile.write('KeyInfo=model_.KeyInfo(\n')
            self.KeyInfo.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.CipherData is not None:
            showIndent(outfile, level)
            outfile.write('CipherData=model_.CipherData(\n')
            self.CipherData.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.EncryptionProperties is not None:
            showIndent(outfile, level)
            outfile.write('EncryptionProperties=model_.EncryptionProperties(\n')
            self.EncryptionProperties.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('MimeType', node)
        if value is not None and 'MimeType' not in already_processed:
            already_processed.append('MimeType')
            self.MimeType = value
        value = find_attr_value_('Type', node)
        if value is not None and 'Type' not in already_processed:
            already_processed.append('Type')
            self.Type = value
        value = find_attr_value_('Id', node)
        if value is not None and 'Id' not in already_processed:
            already_processed.append('Id')
            self.Id = value
        value = find_attr_value_('Encoding', node)
        if value is not None and 'Encoding' not in already_processed:
            already_processed.append('Encoding')
            self.Encoding = value
        value = find_attr_value_('xsi:type', node)
        if value is not None and 'xsi:type' not in already_processed:
            already_processed.append('xsi:type')
            self.extensiontype_ = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'EncryptionMethod':
            obj_ = EncryptionMethodType.factory()
            obj_.build(child_)
            self.set_EncryptionMethod(obj_)
        elif nodeName_ == 'KeyInfo':
            obj_ = KeyInfoType.factory()
            obj_.build(child_)
            self.set_KeyInfo(obj_)
        elif nodeName_ == 'CipherData':
            obj_ = CipherDataType.factory()
            obj_.build(child_)
            self.set_CipherData(obj_)
        elif nodeName_ == 'EncryptionProperties':
            obj_ = EncryptionPropertiesType.factory()
            obj_.build(child_)
            self.set_EncryptionProperties(obj_)
# end class EncryptedType


class EncryptionMethodType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Algorithm=None, KeySize=None, OAEPparams=None, anytypeobjs_=None, valueOf_=None, mixedclass_=None, content_=None):
        self.Algorithm = _cast(None, Algorithm)
        self.KeySize = KeySize
        self.OAEPparams = OAEPparams
        if anytypeobjs_ is None:
            self.anytypeobjs_ = []
        else:
            self.anytypeobjs_ = anytypeobjs_
        self.valueOf_ = valueOf_
        if mixedclass_ is None:
            self.mixedclass_ = MixedContainer
        else:
            self.mixedclass_ = mixedclass_
        if content_ is None:
            self.content_ = []
        else:
            self.content_ = content_
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if EncryptionMethodType.subclass:
            return EncryptionMethodType.subclass(*args_, **kwargs_)
        else:
            return EncryptionMethodType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_KeySize(self): return self.KeySize
    def set_KeySize(self, KeySize): self.KeySize = KeySize
    def validate_KeySizeType(self, value):
        # Validate type KeySizeType, a restriction on integer.
        pass
    def get_OAEPparams(self): return self.OAEPparams
    def set_OAEPparams(self, OAEPparams): self.OAEPparams = OAEPparams
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def add_anytypeobjs_(self, value): self.anytypeobjs_.append(value)
    def insert_anytypeobjs_(self, index, value): self._anytypeobjs_[index] = value
    def get_Algorithm(self): return self.Algorithm
    def set_Algorithm(self, Algorithm): self.Algorithm = Algorithm
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def export(self, outfile, level, namespace_='tns:', name_='EncryptionMethodType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='EncryptionMethodType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='EncryptionMethodType'):
        if self.Algorithm is not None and 'Algorithm' not in already_processed:
            already_processed.append('Algorithm')
            outfile.write(' Algorithm=%s' % (quote_attrib(self.Algorithm), ))
    def exportChildren(self, outfile, level, namespace_='tns:', name_='EncryptionMethodType', fromsubclass_=False, pretty_print=True):
        if not fromsubclass_:
            for item_ in self.content_:
                item_.export(outfile, level, item_.name, namespace_, pretty_print=pretty_print)
    def hasContent_(self):
        if (
            self.KeySize is not None or
            self.OAEPparams is not None or
            self.anytypeobjs_ or
            self.valueOf_
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='EncryptionMethodType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('valueOf_ = """%s""",\n' % (self.valueOf_,))
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.Algorithm is not None and 'Algorithm' not in already_processed:
            already_processed.append('Algorithm')
            showIndent(outfile, level)
            outfile.write('Algorithm = %s,\n' % (self.Algorithm,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        self.valueOf_ = get_all_text_(node)
        if node.text is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', node.text)
            self.content_.append(obj_)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Algorithm', node)
        if value is not None and 'Algorithm' not in already_processed:
            already_processed.append('Algorithm')
            self.Algorithm = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'KeySize':
            obj_ = integer.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'KeySize', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_KeySize'):
              self.add_KeySize(obj_.value)
            elif hasattr(self, 'set_KeySize'):
              self.set_KeySize(obj_.value)
        elif nodeName_ == 'OAEPparams' and child_.text is not None:
            valuestr_ = child_.text
            obj_ = self.mixedclass_(MixedContainer.CategorySimple,
                MixedContainer.TypeString, 'OAEPparams', valuestr_)
            self.content_.append(obj_)
        elif nodeName_ == '':
            obj_ = __ANY__.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, '', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_'):
              self.add_(obj_.value)
            elif hasattr(self, 'set_'):
              self.set_(obj_.value)
        if not fromsubclass_ and child_.tail is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', child_.tail)
            self.content_.append(obj_)
# end class EncryptionMethodType


class CipherDataType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, CipherValue=None, CipherReference=None):
        self.CipherValue = CipherValue
        self.CipherReference = CipherReference
    def factory(*args_, **kwargs_):
        if CipherDataType.subclass:
            return CipherDataType.subclass(*args_, **kwargs_)
        else:
            return CipherDataType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CipherValue(self): return self.CipherValue
    def set_CipherValue(self, CipherValue): self.CipherValue = CipherValue
    def get_CipherReference(self): return self.CipherReference
    def set_CipherReference(self, CipherReference): self.CipherReference = CipherReference
    def export(self, outfile, level, namespace_='tns:', name_='CipherDataType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CipherDataType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='CipherDataType'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='CipherDataType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CipherValue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCipherValue>%s</%sCipherValue>%s' % (namespace_, self.gds_format_string(quote_xml(self.CipherValue).encode(ExternalEncoding), input_name='CipherValue'), namespace_, eol_))
        if self.CipherReference is not None:
            self.CipherReference.export(outfile, level, namespace_, name_='CipherReference', pretty_print=pretty_print)
    def hasContent_(self):
        if (
            self.CipherValue is not None or
            self.CipherReference is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='CipherDataType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.CipherValue is not None:
            showIndent(outfile, level)
            outfile.write('CipherValue=%s,\n' % quote_python(self.CipherValue).encode(ExternalEncoding))
        if self.CipherReference is not None:
            showIndent(outfile, level)
            outfile.write('CipherReference=model_.CipherReference(\n')
            self.CipherReference.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CipherValue':
            CipherValue_ = child_.text
            CipherValue_ = self.gds_validate_string(CipherValue_, node, 'CipherValue')
            self.CipherValue = CipherValue_
        elif nodeName_ == 'CipherReference':
            obj_ = CipherReferenceType.factory()
            obj_.build(child_)
            self.set_CipherReference(obj_)
# end class CipherDataType


class CipherReferenceType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, URI=None, Transforms=None):
        self.URI = _cast(None, URI)
        self.Transforms = Transforms
    def factory(*args_, **kwargs_):
        if CipherReferenceType.subclass:
            return CipherReferenceType.subclass(*args_, **kwargs_)
        else:
            return CipherReferenceType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Transforms(self): return self.Transforms
    def set_Transforms(self, Transforms): self.Transforms = Transforms
    def get_URI(self): return self.URI
    def set_URI(self, URI): self.URI = URI
    def export(self, outfile, level, namespace_='tns:', name_='CipherReferenceType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CipherReferenceType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='CipherReferenceType'):
        if self.URI is not None and 'URI' not in already_processed:
            already_processed.append('URI')
            outfile.write(' URI=%s' % (quote_attrib(self.URI), ))
    def exportChildren(self, outfile, level, namespace_='tns:', name_='CipherReferenceType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Transforms is not None:
            self.Transforms.export(outfile, level, namespace_, name_='Transforms', pretty_print=pretty_print)
    def hasContent_(self):
        if (
            self.Transforms is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='CipherReferenceType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.URI is not None and 'URI' not in already_processed:
            already_processed.append('URI')
            showIndent(outfile, level)
            outfile.write('URI = %s,\n' % (self.URI,))
    def exportLiteralChildren(self, outfile, level, name_):
        if self.Transforms is not None:
            showIndent(outfile, level)
            outfile.write('Transforms=model_.TransformsType(\n')
            self.Transforms.exportLiteral(outfile, level, name_='Transforms')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('URI', node)
        if value is not None and 'URI' not in already_processed:
            already_processed.append('URI')
            self.URI = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Transforms':
            obj_ = TransformsType.factory()
            obj_.build(child_)
            self.set_Transforms(obj_)
# end class CipherReferenceType


class EncryptedDataType(EncryptedType):
    subclass = None
    superclass = EncryptedType
    def __init__(self, MimeType=None, Type=None, Id=None, Encoding=None, EncryptionMethod=None, KeyInfo=None, CipherData=None, EncryptionProperties=None):
        super(EncryptedDataType, self).__init__(MimeType, Type, Id, Encoding, EncryptionMethod, KeyInfo, CipherData, EncryptionProperties, )
        pass
    def factory(*args_, **kwargs_):
        if EncryptedDataType.subclass:
            return EncryptedDataType.subclass(*args_, **kwargs_)
        else:
            return EncryptedDataType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def export(self, outfile, level, namespace_='tns:', name_='EncryptedDataType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='EncryptedDataType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='EncryptedDataType'):
        super(EncryptedDataType, self).exportAttributes(outfile, level, already_processed, namespace_, name_='EncryptedDataType')
    def exportChildren(self, outfile, level, namespace_='tns:', name_='EncryptedDataType', fromsubclass_=False, pretty_print=True):
        super(EncryptedDataType, self).exportChildren(outfile, level, namespace_, name_, True, pretty_print=pretty_print)
    def hasContent_(self):
        if (
            super(EncryptedDataType, self).hasContent_()
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='EncryptedDataType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        super(EncryptedDataType, self).exportLiteralAttributes(outfile, level, already_processed, name_)
    def exportLiteralChildren(self, outfile, level, name_):
        super(EncryptedDataType, self).exportLiteralChildren(outfile, level, name_)
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        super(EncryptedDataType, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        super(EncryptedDataType, self).buildChildren(child_, node, nodeName_, True)
        pass
# end class EncryptedDataType


class EncryptedKeyType(EncryptedType):
    subclass = None
    superclass = EncryptedType
    def __init__(self, MimeType=None, Type=None, Id=None, Encoding=None, EncryptionMethod=None, KeyInfo=None, CipherData=None, EncryptionProperties=None, Recipient=None, ReferenceList=None, CarriedKeyName=None):
        super(EncryptedKeyType, self).__init__(MimeType, Type, Id, Encoding, EncryptionMethod, KeyInfo, CipherData, EncryptionProperties, )
        self.Recipient = _cast(None, Recipient)
        self.ReferenceList = ReferenceList
        self.CarriedKeyName = CarriedKeyName
    def factory(*args_, **kwargs_):
        if EncryptedKeyType.subclass:
            return EncryptedKeyType.subclass(*args_, **kwargs_)
        else:
            return EncryptedKeyType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ReferenceList(self): return self.ReferenceList
    def set_ReferenceList(self, ReferenceList): self.ReferenceList = ReferenceList
    def get_CarriedKeyName(self): return self.CarriedKeyName
    def set_CarriedKeyName(self, CarriedKeyName): self.CarriedKeyName = CarriedKeyName
    def get_Recipient(self): return self.Recipient
    def set_Recipient(self, Recipient): self.Recipient = Recipient
    def export(self, outfile, level, namespace_='tns:', name_='EncryptedKeyType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='EncryptedKeyType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='EncryptedKeyType'):
        super(EncryptedKeyType, self).exportAttributes(outfile, level, already_processed, namespace_, name_='EncryptedKeyType')
        if self.Recipient is not None and 'Recipient' not in already_processed:
            already_processed.append('Recipient')
            outfile.write(' Recipient=%s' % (quote_attrib(self.Recipient), ))
    def exportChildren(self, outfile, level, namespace_='tns:', name_='EncryptedKeyType', fromsubclass_=False, pretty_print=True):
        super(EncryptedKeyType, self).exportChildren(outfile, level, namespace_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ReferenceList is not None:
            self.ReferenceList.export(outfile, level, namespace_, name_='ReferenceList', pretty_print=pretty_print)
        if self.CarriedKeyName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCarriedKeyName>%s</%sCarriedKeyName>%s' % (namespace_, self.gds_format_string(quote_xml(self.CarriedKeyName).encode(ExternalEncoding), input_name='CarriedKeyName'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.ReferenceList is not None or
            self.CarriedKeyName is not None or
            super(EncryptedKeyType, self).hasContent_()
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='EncryptedKeyType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.Recipient is not None and 'Recipient' not in already_processed:
            already_processed.append('Recipient')
            showIndent(outfile, level)
            outfile.write('Recipient = %s,\n' % (self.Recipient,))
        super(EncryptedKeyType, self).exportLiteralAttributes(outfile, level, already_processed, name_)
    def exportLiteralChildren(self, outfile, level, name_):
        super(EncryptedKeyType, self).exportLiteralChildren(outfile, level, name_)
        if self.ReferenceList is not None:
            showIndent(outfile, level)
            outfile.write('ReferenceList=model_.ReferenceList(\n')
            self.ReferenceList.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.CarriedKeyName is not None:
            showIndent(outfile, level)
            outfile.write('CarriedKeyName=%s,\n' % quote_python(self.CarriedKeyName).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Recipient', node)
        if value is not None and 'Recipient' not in already_processed:
            already_processed.append('Recipient')
            self.Recipient = value
        super(EncryptedKeyType, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ReferenceList':
            obj_ = ReferenceList.factory()
            obj_.build(child_)
            self.set_ReferenceList(obj_)
        elif nodeName_ == 'CarriedKeyName':
            CarriedKeyName_ = child_.text
            CarriedKeyName_ = self.gds_validate_string(CarriedKeyName_, node, 'CarriedKeyName')
            self.CarriedKeyName = CarriedKeyName_
        super(EncryptedKeyType, self).buildChildren(child_, node, nodeName_, True)
# end class EncryptedKeyType


class AgreementMethodType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Algorithm=None, KA_Nonce=None, anytypeobjs_=None, OriginatorKeyInfo=None, RecipientKeyInfo=None, valueOf_=None, mixedclass_=None, content_=None):
        self.Algorithm = _cast(None, Algorithm)
        self.KA_Nonce = KA_Nonce
        if anytypeobjs_ is None:
            self.anytypeobjs_ = []
        else:
            self.anytypeobjs_ = anytypeobjs_
        self.OriginatorKeyInfo = OriginatorKeyInfo
        self.RecipientKeyInfo = RecipientKeyInfo
        self.valueOf_ = valueOf_
        if mixedclass_ is None:
            self.mixedclass_ = MixedContainer
        else:
            self.mixedclass_ = mixedclass_
        if content_ is None:
            self.content_ = []
        else:
            self.content_ = content_
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if AgreementMethodType.subclass:
            return AgreementMethodType.subclass(*args_, **kwargs_)
        else:
            return AgreementMethodType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_KA_Nonce(self): return self.KA_Nonce
    def set_KA_Nonce(self, KA_Nonce): self.KA_Nonce = KA_Nonce
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def add_anytypeobjs_(self, value): self.anytypeobjs_.append(value)
    def insert_anytypeobjs_(self, index, value): self._anytypeobjs_[index] = value
    def get_OriginatorKeyInfo(self): return self.OriginatorKeyInfo
    def set_OriginatorKeyInfo(self, OriginatorKeyInfo): self.OriginatorKeyInfo = OriginatorKeyInfo
    def get_RecipientKeyInfo(self): return self.RecipientKeyInfo
    def set_RecipientKeyInfo(self, RecipientKeyInfo): self.RecipientKeyInfo = RecipientKeyInfo
    def get_Algorithm(self): return self.Algorithm
    def set_Algorithm(self, Algorithm): self.Algorithm = Algorithm
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def export(self, outfile, level, namespace_='tns:', name_='AgreementMethodType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AgreementMethodType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='AgreementMethodType'):
        if self.Algorithm is not None and 'Algorithm' not in already_processed:
            already_processed.append('Algorithm')
            outfile.write(' Algorithm=%s' % (quote_attrib(self.Algorithm), ))
    def exportChildren(self, outfile, level, namespace_='tns:', name_='AgreementMethodType', fromsubclass_=False, pretty_print=True):
        if not fromsubclass_:
            for item_ in self.content_:
                item_.export(outfile, level, item_.name, namespace_, pretty_print=pretty_print)
    def hasContent_(self):
        if (
            self.KA_Nonce is not None or
            self.anytypeobjs_ or
            self.OriginatorKeyInfo is not None or
            self.RecipientKeyInfo is not None or
            self.valueOf_
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='AgreementMethodType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('valueOf_ = """%s""",\n' % (self.valueOf_,))
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.Algorithm is not None and 'Algorithm' not in already_processed:
            already_processed.append('Algorithm')
            showIndent(outfile, level)
            outfile.write('Algorithm = %s,\n' % (self.Algorithm,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        self.valueOf_ = get_all_text_(node)
        if node.text is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', node.text)
            self.content_.append(obj_)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Algorithm', node)
        if value is not None and 'Algorithm' not in already_processed:
            already_processed.append('Algorithm')
            self.Algorithm = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'KA-Nonce' and child_.text is not None:
            valuestr_ = child_.text
            obj_ = self.mixedclass_(MixedContainer.CategorySimple,
                MixedContainer.TypeString, 'KA-Nonce', valuestr_)
            self.content_.append(obj_)
        elif nodeName_ == '':
            obj_ = __ANY__.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, '', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_'):
              self.add_(obj_.value)
            elif hasattr(self, 'set_'):
              self.set_(obj_.value)
        elif nodeName_ == 'OriginatorKeyInfo':
            obj_ = KeyInfoType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'OriginatorKeyInfo', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_OriginatorKeyInfo'):
              self.add_OriginatorKeyInfo(obj_.value)
            elif hasattr(self, 'set_OriginatorKeyInfo'):
              self.set_OriginatorKeyInfo(obj_.value)
        elif nodeName_ == 'RecipientKeyInfo':
            obj_ = KeyInfoType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'RecipientKeyInfo', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_RecipientKeyInfo'):
              self.add_RecipientKeyInfo(obj_.value)
            elif hasattr(self, 'set_RecipientKeyInfo'):
              self.set_RecipientKeyInfo(obj_.value)
        if not fromsubclass_ and child_.tail is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', child_.tail)
            self.content_.append(obj_)
# end class AgreementMethodType


class ReferenceList(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, DataReference=None, KeyReference=None):
        if DataReference is None:
            self.DataReference = []
        else:
            self.DataReference = DataReference
        if KeyReference is None:
            self.KeyReference = []
        else:
            self.KeyReference = KeyReference
    def factory(*args_, **kwargs_):
        if ReferenceList.subclass:
            return ReferenceList.subclass(*args_, **kwargs_)
        else:
            return ReferenceList(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DataReference(self): return self.DataReference
    def set_DataReference(self, DataReference): self.DataReference = DataReference
    def add_DataReference(self, value): self.DataReference.append(value)
    def insert_DataReference(self, index, value): self.DataReference[index] = value
    def get_KeyReference(self): return self.KeyReference
    def set_KeyReference(self, KeyReference): self.KeyReference = KeyReference
    def add_KeyReference(self, value): self.KeyReference.append(value)
    def insert_KeyReference(self, index, value): self.KeyReference[index] = value
    def export(self, outfile, level, namespace_='tns:', name_='ReferenceList', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ReferenceList')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='ReferenceList'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='ReferenceList', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for DataReference_ in self.DataReference:
            DataReference_.export(outfile, level, namespace_, name_='DataReference', pretty_print=pretty_print)
        for KeyReference_ in self.KeyReference:
            KeyReference_.export(outfile, level, namespace_, name_='KeyReference', pretty_print=pretty_print)
    def hasContent_(self):
        if (
            self.DataReference or
            self.KeyReference
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='ReferenceList'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('DataReference=[\n')
        level += 1
        for DataReference_ in self.DataReference:
            showIndent(outfile, level)
            outfile.write('model_.ReferenceType(\n')
            DataReference_.exportLiteral(outfile, level, name_='ReferenceType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('KeyReference=[\n')
        level += 1
        for KeyReference_ in self.KeyReference:
            showIndent(outfile, level)
            outfile.write('model_.ReferenceType(\n')
            KeyReference_.exportLiteral(outfile, level, name_='ReferenceType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DataReference':
            obj_ = ReferenceType.factory()
            obj_.build(child_)
            self.DataReference.append(obj_)
        elif nodeName_ == 'KeyReference':
            obj_ = ReferenceType.factory()
            obj_.build(child_)
            self.KeyReference.append(obj_)
# end class ReferenceList


class EncryptionPropertiesType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Id=None, EncryptionProperty=None):
        self.Id = _cast(None, Id)
        if EncryptionProperty is None:
            self.EncryptionProperty = []
        else:
            self.EncryptionProperty = EncryptionProperty
    def factory(*args_, **kwargs_):
        if EncryptionPropertiesType.subclass:
            return EncryptionPropertiesType.subclass(*args_, **kwargs_)
        else:
            return EncryptionPropertiesType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_EncryptionProperty(self): return self.EncryptionProperty
    def set_EncryptionProperty(self, EncryptionProperty): self.EncryptionProperty = EncryptionProperty
    def add_EncryptionProperty(self, value): self.EncryptionProperty.append(value)
    def insert_EncryptionProperty(self, index, value): self.EncryptionProperty[index] = value
    def get_Id(self): return self.Id
    def set_Id(self, Id): self.Id = Id
    def export(self, outfile, level, namespace_='tns:', name_='EncryptionPropertiesType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='EncryptionPropertiesType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='EncryptionPropertiesType'):
        if self.Id is not None and 'Id' not in already_processed:
            already_processed.append('Id')
            outfile.write(' Id=%s' % (quote_attrib(self.Id), ))
    def exportChildren(self, outfile, level, namespace_='tns:', name_='EncryptionPropertiesType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for EncryptionProperty_ in self.EncryptionProperty:
            EncryptionProperty_.export(outfile, level, namespace_, name_='EncryptionProperty', pretty_print=pretty_print)
    def hasContent_(self):
        if (
            self.EncryptionProperty
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='EncryptionPropertiesType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.Id is not None and 'Id' not in already_processed:
            already_processed.append('Id')
            showIndent(outfile, level)
            outfile.write('Id = %s,\n' % (self.Id,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('EncryptionProperty=[\n')
        level += 1
        for EncryptionProperty_ in self.EncryptionProperty:
            showIndent(outfile, level)
            outfile.write('model_.EncryptionProperty(\n')
            EncryptionProperty_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Id', node)
        if value is not None and 'Id' not in already_processed:
            already_processed.append('Id')
            self.Id = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'EncryptionProperty':
            obj_ = EncryptionPropertyType.factory()
            obj_.build(child_)
            self.EncryptionProperty.append(obj_)
# end class EncryptionPropertiesType


class EncryptionPropertyType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Target=None, Id=None, anytypeobjs_=None, valueOf_=None, mixedclass_=None, content_=None):
        self.Target = _cast(None, Target)
        self.Id = _cast(None, Id)
        self.anytypeobjs_ = anytypeobjs_
        self.valueOf_ = valueOf_
        self.anyAttributes_ = {}
        if mixedclass_ is None:
            self.mixedclass_ = MixedContainer
        else:
            self.mixedclass_ = mixedclass_
        if content_ is None:
            self.content_ = []
        else:
            self.content_ = content_
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if EncryptionPropertyType.subclass:
            return EncryptionPropertyType.subclass(*args_, **kwargs_)
        else:
            return EncryptionPropertyType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def get_Target(self): return self.Target
    def set_Target(self, Target): self.Target = Target
    def get_Id(self): return self.Id
    def set_Id(self, Id): self.Id = Id
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def get_anyAttributes_(self): return self.anyAttributes_
    def set_anyAttributes_(self, anyAttributes_): self.anyAttributes_ = anyAttributes_
    def export(self, outfile, level, namespace_='tns:', name_='EncryptionPropertyType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='EncryptionPropertyType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='EncryptionPropertyType'):
        unique_counter = 0
        for name, value in self.anyAttributes_.items():
            xsinamespaceprefix = 'xsi'
            xsinamespace1 = 'http://www.w3.org/2001/XMLSchema-instance'
            xsinamespace2 = '{%s}' % (xsinamespace1, )
            if name.startswith(xsinamespace2):
                name1 = name[len(xsinamespace2):]
                name2 = '%s:%s' % (xsinamespaceprefix, name1, )
                if name2 not in already_processed:
                    already_processed.append(name2)
                    outfile.write(' %s=%s' % (name2, quote_attrib(value), ))
            else:
                mo = re_.match(Namespace_extract_pat_, name)
                if mo is not None:
                    namespace, name = mo.group(1, 2)
                    if name not in already_processed:
                        already_processed.append(name)
                        if namespace == 'http://www.w3.org/XML/1998/namespace':
                            outfile.write(' %s=%s' % (name, quote_attrib(value), ))
                        else:
                            unique_counter += 1
                            outfile.write(' xmlns:yyy%d="%s"' % (unique_counter, namespace, ))
                            outfile.write(' yyy%d:%s=%s' % (unique_counter, name, quote_attrib(value), ))
                else:
                    if name not in already_processed:
                        already_processed.append(name)
                        outfile.write(' %s=%s' % (name, quote_attrib(value), ))
        if self.Target is not None and 'Target' not in already_processed:
            already_processed.append('Target')
            outfile.write(' Target=%s' % (quote_attrib(self.Target), ))
        if self.Id is not None and 'Id' not in already_processed:
            already_processed.append('Id')
            outfile.write(' Id=%s' % (quote_attrib(self.Id), ))
    def exportChildren(self, outfile, level, namespace_='tns:', name_='EncryptionPropertyType', fromsubclass_=False, pretty_print=True):
        if not fromsubclass_:
            for item_ in self.content_:
                item_.export(outfile, level, item_.name, namespace_, pretty_print=pretty_print)
    def hasContent_(self):
        if (
            self.anytypeobjs_ is not None or
            self.valueOf_
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='EncryptionPropertyType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('valueOf_ = """%s""",\n' % (self.valueOf_,))
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.Target is not None and 'Target' not in already_processed:
            already_processed.append('Target')
            showIndent(outfile, level)
            outfile.write('Target = %s,\n' % (self.Target,))
        if self.Id is not None and 'Id' not in already_processed:
            already_processed.append('Id')
            showIndent(outfile, level)
            outfile.write('Id = %s,\n' % (self.Id,))
        for name, value in self.anyAttributes_.items():
            showIndent(outfile, level)
            outfile.write('%s = "%s",\n' % (name, value,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        self.valueOf_ = get_all_text_(node)
        if node.text is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', node.text)
            self.content_.append(obj_)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Target', node)
        if value is not None and 'Target' not in already_processed:
            already_processed.append('Target')
            self.Target = value
        value = find_attr_value_('Id', node)
        if value is not None and 'Id' not in already_processed:
            already_processed.append('Id')
            self.Id = value
        self.anyAttributes_ = {}
        for name, value in attrs.items():
            if name not in already_processed:
                self.anyAttributes_[name] = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == '':
            obj_ = __ANY__.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, '', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_'):
              self.add_(obj_.value)
            elif hasattr(self, 'set_'):
              self.set_(obj_.value)
        if not fromsubclass_ and child_.tail is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', child_.tail)
            self.content_.append(obj_)
# end class EncryptionPropertyType


class ServiceExceptionType(GeneratedsSuper):
    """Common service exception used for SOAP faults and Failed message.
    Elements: nsaId - NSA that generated the service exception.
    errorId - Error identifier uniquely identifying each known fault
    within the protocol. text - User friendly message text
    describing the error. variables - A collection of type/value
    pairs providing addition information relating to the error.
    childException - Hierarchical list of service exceptions
    capturing failures within the request tree."""
    subclass = None
    superclass = None
    def __init__(self, nsaId=None, errorId=None, text=None, variables=None, childException=None):
        self.nsaId = nsaId
        self.errorId = errorId
        self.text = text
        self.variables = variables
        if childException is None:
            self.childException = []
        else:
            self.childException = childException
    def factory(*args_, **kwargs_):
        if ServiceExceptionType.subclass:
            return ServiceExceptionType.subclass(*args_, **kwargs_)
        else:
            return ServiceExceptionType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_nsaId(self): return self.nsaId
    def set_nsaId(self, nsaId): self.nsaId = nsaId
    def validate_NsaIdType(self, value):
        # Validate type NsaIdType, a restriction on xsd:anyURI.
        pass
    def get_errorId(self): return self.errorId
    def set_errorId(self, errorId): self.errorId = errorId
    def get_text(self): return self.text
    def set_text(self, text): self.text = text
    def get_variables(self): return self.variables
    def set_variables(self, variables): self.variables = variables
    def get_childException(self): return self.childException
    def set_childException(self, childException): self.childException = childException
    def add_childException(self, value): self.childException.append(value)
    def insert_childException(self, index, value): self.childException[index] = value
    def export(self, outfile, level, namespace_='tns:', name_='ServiceExceptionType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ServiceExceptionType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='ServiceExceptionType'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='ServiceExceptionType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.nsaId is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snsaId>%s</%snsaId>%s' % (namespace_, self.gds_format_string(quote_xml(self.nsaId).encode(ExternalEncoding), input_name='nsaId'), namespace_, eol_))
        if self.errorId is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%serrorId>%s</%serrorId>%s' % (namespace_, self.gds_format_string(quote_xml(self.errorId).encode(ExternalEncoding), input_name='errorId'), namespace_, eol_))
        if self.text is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%stext>%s</%stext>%s' % (namespace_, self.gds_format_string(quote_xml(self.text).encode(ExternalEncoding), input_name='text'), namespace_, eol_))
        if self.variables is not None:
            self.variables.export(outfile, level, namespace_, name_='variables', pretty_print=pretty_print)
        for childException_ in self.childException:
            childException_.export(outfile, level, namespace_, name_='childException', pretty_print=pretty_print)
    def hasContent_(self):
        if (
            self.nsaId is not None or
            self.errorId is not None or
            self.text is not None or
            self.variables is not None or
            self.childException
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='ServiceExceptionType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.nsaId is not None:
            showIndent(outfile, level)
            outfile.write('nsaId=%s,\n' % quote_python(self.nsaId).encode(ExternalEncoding))
        if self.errorId is not None:
            showIndent(outfile, level)
            outfile.write('errorId=%s,\n' % quote_python(self.errorId).encode(ExternalEncoding))
        if self.text is not None:
            showIndent(outfile, level)
            outfile.write('text=%s,\n' % quote_python(self.text).encode(ExternalEncoding))
        if self.variables is not None:
            showIndent(outfile, level)
            outfile.write('variables=model_.VariablesType(\n')
            self.variables.exportLiteral(outfile, level, name_='variables')
            showIndent(outfile, level)
            outfile.write('),\n')
        showIndent(outfile, level)
        outfile.write('childException=[\n')
        level += 1
        for childException_ in self.childException:
            showIndent(outfile, level)
            outfile.write('model_.ServiceExceptionType(\n')
            childException_.exportLiteral(outfile, level, name_='ServiceExceptionType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'nsaId':
            nsaId_ = child_.text
            nsaId_ = self.gds_validate_string(nsaId_, node, 'nsaId')
            self.nsaId = nsaId_
            self.validate_NsaIdType(self.nsaId)    # validate type NsaIdType
        elif nodeName_ == 'errorId':
            errorId_ = child_.text
            errorId_ = self.gds_validate_string(errorId_, node, 'errorId')
            self.errorId = errorId_
        elif nodeName_ == 'text':
            text_ = child_.text
            text_ = self.gds_validate_string(text_, node, 'text')
            self.text = text_
        elif nodeName_ == 'variables':
            obj_ = VariablesType.factory()
            obj_.build(child_)
            self.set_variables(obj_)
        elif nodeName_ == 'childException':
            obj_ = ServiceExceptionType.factory()
            obj_.build(child_)
            self.childException.append(obj_)
# end class ServiceExceptionType


class VariablesType(GeneratedsSuper):
    """A specific type definition providing a set of zero or more variables
    associated with the ServiceException."""
    subclass = None
    superclass = None
    def __init__(self, variable=None):
        if variable is None:
            self.variable = []
        else:
            self.variable = variable
    def factory(*args_, **kwargs_):
        if VariablesType.subclass:
            return VariablesType.subclass(*args_, **kwargs_)
        else:
            return VariablesType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_variable(self): return self.variable
    def set_variable(self, variable): self.variable = variable
    def add_variable(self, value): self.variable.append(value)
    def insert_variable(self, index, value): self.variable[index] = value
    def export(self, outfile, level, namespace_='tns:', name_='VariablesType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='VariablesType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='VariablesType'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='VariablesType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for variable_ in self.variable:
            variable_.export(outfile, level, namespace_, name_='variable', pretty_print=pretty_print)
    def hasContent_(self):
        if (
            self.variable
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='VariablesType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('variable=[\n')
        level += 1
        for variable_ in self.variable:
            showIndent(outfile, level)
            outfile.write('model_.TypeValuePairType(\n')
            variable_.exportLiteral(outfile, level, name_='TypeValuePairType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'variable':
            obj_ = TypeValuePairType.factory()
            obj_.build(child_)
            self.variable.append(obj_)
# end class VariablesType


class TypeValuePairListType(GeneratedsSuper):
    """A holder element providing an attribute list definition for the
    type/value pair. Elements: attribute - An instance of a
    type/value pair."""
    subclass = None
    superclass = None
    def __init__(self, attribute=None):
        if attribute is None:
            self.attribute = []
        else:
            self.attribute = attribute
    def factory(*args_, **kwargs_):
        if TypeValuePairListType.subclass:
            return TypeValuePairListType.subclass(*args_, **kwargs_)
        else:
            return TypeValuePairListType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_attribute(self): return self.attribute
    def set_attribute(self, attribute): self.attribute = attribute
    def add_attribute(self, value): self.attribute.append(value)
    def insert_attribute(self, index, value): self.attribute[index] = value
    def export(self, outfile, level, namespace_='tns:', name_='TypeValuePairListType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TypeValuePairListType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='TypeValuePairListType'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='TypeValuePairListType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for attribute_ in self.attribute:
            attribute_.export(outfile, level, namespace_, name_='attribute', pretty_print=pretty_print)
    def hasContent_(self):
        if (
            self.attribute
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='TypeValuePairListType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('attribute=[\n')
        level += 1
        for attribute_ in self.attribute:
            showIndent(outfile, level)
            outfile.write('model_.TypeValuePairType(\n')
            attribute_.exportLiteral(outfile, level, name_='TypeValuePairType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'attribute':
            obj_ = TypeValuePairType.factory()
            obj_.build(child_)
            self.attribute.append(obj_)
# end class TypeValuePairListType


class TypeValuePairType(GeneratedsSuper):
    """Definition for a simple type and multi-value tuple. Includes simple
    string type and value, as well as more advanced extensions if
    needed. A targetNamespace attribute is include to provide
    context where needed. Elements: value - A string value
    corresponding to type. any - Provides a flexible mechanism
    allowing additional elements to be provided as an alternative,
    or in combination with value. Use of this element field is
    beyond the current scope of this NSI specification, but may be
    used in the future to extend the existing protocol without
    requiring a schema change. Attributes: type - A string
    representing the name of the type. targetNamespace - An optional
    URL to qualify the name space of the capability. anyAttribute -
    Provides a flexible mechanism allowing additional attributes
    non-specified to be provided as needed for peer-to-peer NSA
    communications. Use of this attribute field is beyond the
    current scope of this NSI specification, but may be used in the
    future to extend the existing protocol without requiring a
    schema change."""
    subclass = None
    superclass = None
    def __init__(self, targetNamespace=None, type_=None, value=None, anytypeobjs_=None):
        self.targetNamespace = _cast(None, targetNamespace)
        self.type_ = _cast(None, type_)
        if value is None:
            self.value = []
        else:
            self.value = value
        if anytypeobjs_ is None:
            self.anytypeobjs_ = []
        else:
            self.anytypeobjs_ = anytypeobjs_
        self.anyAttributes_ = {}
    def factory(*args_, **kwargs_):
        if TypeValuePairType.subclass:
            return TypeValuePairType.subclass(*args_, **kwargs_)
        else:
            return TypeValuePairType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_value(self): return self.value
    def set_value(self, value): self.value = value
    def add_value(self, value): self.value.append(value)
    def insert_value(self, index, value): self.value[index] = value
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def add_anytypeobjs_(self, value): self.anytypeobjs_.append(value)
    def insert_anytypeobjs_(self, index, value): self._anytypeobjs_[index] = value
    def get_targetNamespace(self): return self.targetNamespace
    def set_targetNamespace(self, targetNamespace): self.targetNamespace = targetNamespace
    def get_type(self): return self.type_
    def set_type(self, type_): self.type_ = type_
    def get_anyAttributes_(self): return self.anyAttributes_
    def set_anyAttributes_(self, anyAttributes_): self.anyAttributes_ = anyAttributes_
    def export(self, outfile, level, namespace_='tns:', name_='TypeValuePairType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TypeValuePairType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='TypeValuePairType'):
        unique_counter = 0
        for name, value in self.anyAttributes_.items():
            xsinamespaceprefix = 'xsi'
            xsinamespace1 = 'http://www.w3.org/2001/XMLSchema-instance'
            xsinamespace2 = '{%s}' % (xsinamespace1, )
            if name.startswith(xsinamespace2):
                name1 = name[len(xsinamespace2):]
                name2 = '%s:%s' % (xsinamespaceprefix, name1, )
                if name2 not in already_processed:
                    already_processed.append(name2)
                    outfile.write(' %s=%s' % (name2, quote_attrib(value), ))
            else:
                mo = re_.match(Namespace_extract_pat_, name)
                if mo is not None:
                    namespace, name = mo.group(1, 2)
                    if name not in already_processed:
                        already_processed.append(name)
                        if namespace == 'http://www.w3.org/XML/1998/namespace':
                            outfile.write(' %s=%s' % (name, quote_attrib(value), ))
                        else:
                            unique_counter += 1
                            outfile.write(' xmlns:yyy%d="%s"' % (unique_counter, namespace, ))
                            outfile.write(' yyy%d:%s=%s' % (unique_counter, name, quote_attrib(value), ))
                else:
                    if name not in already_processed:
                        already_processed.append(name)
                        outfile.write(' %s=%s' % (name, quote_attrib(value), ))
        if self.targetNamespace is not None and 'targetNamespace' not in already_processed:
            already_processed.append('targetNamespace')
            outfile.write(' targetNamespace=%s' % (self.gds_format_string(quote_attrib(self.targetNamespace).encode(ExternalEncoding), input_name='targetNamespace'), ))
        if self.type_ is not None and 'type_' not in already_processed:
            already_processed.append('type_')
            outfile.write(' type=%s' % (self.gds_format_string(quote_attrib(self.type_).encode(ExternalEncoding), input_name='type'), ))
    def exportChildren(self, outfile, level, namespace_='tns:', name_='TypeValuePairType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for value_ in self.value:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svalue>%s</%svalue>%s' % (namespace_, self.gds_format_string(quote_xml(value_).encode(ExternalEncoding), input_name='value'), namespace_, eol_))
        for obj_ in self.anytypeobjs_:
            obj_.export(outfile, level, namespace_, pretty_print=pretty_print)
    def hasContent_(self):
        if (
            self.value or
            self.anytypeobjs_
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='TypeValuePairType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.targetNamespace is not None and 'targetNamespace' not in already_processed:
            already_processed.append('targetNamespace')
            showIndent(outfile, level)
            outfile.write('targetNamespace = "%s",\n' % (self.targetNamespace,))
        if self.type_ is not None and 'type_' not in already_processed:
            already_processed.append('type_')
            showIndent(outfile, level)
            outfile.write('type_ = "%s",\n' % (self.type_,))
        for name, value in self.anyAttributes_.items():
            showIndent(outfile, level)
            outfile.write('%s = "%s",\n' % (name, value,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('value=[\n')
        level += 1
        for value_ in self.value:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(value_).encode(ExternalEncoding))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('anytypeobjs_=[\n')
        level += 1
        for anytypeobjs_ in self.anytypeobjs_:
            anytypeobjs_.exportLiteral(outfile, level)
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('targetNamespace', node)
        if value is not None and 'targetNamespace' not in already_processed:
            already_processed.append('targetNamespace')
            self.targetNamespace = value
        value = find_attr_value_('type', node)
        if value is not None and 'type' not in already_processed:
            already_processed.append('type')
            self.type_ = value
        self.anyAttributes_ = {}
        for name, value in attrs.items():
            if name not in already_processed:
                self.anyAttributes_[name] = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'value':
            value_ = child_.text
            value_ = self.gds_validate_string(value_, node, 'value')
            self.value.append(value_)
        else:
            obj_ = self.gds_build_any(child_, 'TypeValuePairType')
            if obj_ is not None:
                self.add_anytypeobjs_(obj_)
# end class TypeValuePairType


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""

def usage():
    print USAGE_TEXT
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    rootClass = globals().get(tag)
    return tag, rootClass


def parse(inFileName):
    doc = parsexml_(inFileName)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'nsiHeader'
        rootClass = CommonHeaderType
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    sys.stdout.write('<?xml version="1.0" ?>\n')
    rootObj.export(sys.stdout, 0, name_=rootTag,
        namespacedef_='',
        pretty_print=True)
    return rootObj


def parseString(inString):
    from StringIO import StringIO
    doc = parsexml_(StringIO(inString))
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'nsiHeader'
        rootClass = CommonHeaderType
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    return rootObj


def parseLiteral(inFileName):
    doc = parsexml_(inFileName)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'nsiHeader'
        rootClass = CommonHeaderType
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    sys.stdout.write('#from header import *\n\n')
    sys.stdout.write('import header as model_\n\n')
    sys.stdout.write('rootObj = model_.rootTag(\n')
    rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
    sys.stdout.write(')\n')
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()


__all__ = [
    "ActionType",
    "AdviceType",
    "AgreementMethodType",
    "AssertionType",
    "AttributeStatementType",
    "AttributeType",
    "AudienceRestrictionType",
    "AuthnContextType",
    "AuthnStatementType",
    "AuthzDecisionStatementType",
    "BaseIDAbstractType",
    "CanonicalizationMethodType",
    "CipherDataType",
    "CipherReferenceType",
    "CommonHeaderType",
    "ConditionAbstractType",
    "ConditionsType",
    "DSAKeyValueType",
    "DigestMethodType",
    "EncryptedDataType",
    "EncryptedElementType",
    "EncryptedKeyType",
    "EncryptedType",
    "EncryptionMethodType",
    "EncryptionPropertiesType",
    "EncryptionPropertyType",
    "EvidenceType",
    "KeyInfoConfirmationDataType",
    "KeyInfoType",
    "KeyValueType",
    "ManifestType",
    "NameIDType",
    "ObjectType",
    "OneTimeUseType",
    "PGPDataType",
    "ProxyRestrictionType",
    "RSAKeyValueType",
    "ReferenceList",
    "ReferenceType",
    "RetrievalMethodType",
    "SPKIDataType",
    "ServiceExceptionType",
    "SignatureMethodType",
    "SignaturePropertiesType",
    "SignaturePropertyType",
    "SignatureType",
    "SignatureValueType",
    "SignedInfoType",
    "StatementAbstractType",
    "SubjectConfirmationDataType",
    "SubjectConfirmationType",
    "SubjectLocalityType",
    "SubjectType",
    "TransformType",
    "TransformsType",
    "TypeValuePairListType",
    "TypeValuePairType",
    "VariablesType",
    "X509DataType",
    "X509IssuerSerialType"
    ]
