## Generated by pyxsdgen

from xml.etree import ElementTree as ET

# header types


class AttributeType:
    def __init__(self, Name, NameFormat, FriendlyName, AttributeValue):
        self.Name = Name  # string
        self.NameFormat = NameFormat  # anyURI
        self.FriendlyName = FriendlyName  # string
        self.AttributeValue = AttributeValue  # anyType

    @classmethod
    def build(self, element):
        return AttributeType(
                element.get('Name'),
                element.get('NameFormat'),
                element.get('FriendlyName'),
                None
               )

    def xml(self, elementName):
        r = ET.Element(elementName, attrib={'Name' : str(self.Name), 'NameFormat' : str(self.NameFormat), 'FriendlyName' : str(self.FriendlyName)})
        pass # anyType not handled
        return r



class AttributeStatementType:
    def __init__(self, Attribute, EncryptedAttribute):
        self.Attribute = Attribute  # AttributeType
        self.EncryptedAttribute = EncryptedAttribute  # EncryptedElementType

    @classmethod
    def build(self, element):
        # I've taken out the encrypted attributes, as there are no plans to use it, and it drags in a heap of dependencies
        if element.find('EncryptedAttribute'):
            print "Warning, not parsing encrypted attributed"
        return AttributeStatementType(
                AttributeType.build(element.find('Attribute')) if element.find('Attribute') is not None else None,
                None
               )

    def xml(self, elementName):
        r = ET.Element(elementName)
        r.append(self.Attribute.xml('Attribute'))
        r.append(self.EncryptedAttribute.xml('EncryptedAttribute'))
        return r



class CommonHeaderType:
    def __init__(self, protocolVersion, correlationId, requesterNSA, providerNSA, replyTo, sessionSecurityAttr):
        self.protocolVersion = protocolVersion  # string
        self.correlationId = correlationId  # UuidType -> anyURI
        self.requesterNSA = requesterNSA  # NsaIdType -> anyURI
        self.providerNSA = providerNSA  # NsaIdType -> anyURI
        self.replyTo = replyTo  # anyURI
        assert sessionSecurityAttr is None or type(sessionSecurityAttr) is AttributeStatementType, "Invalid type: %s" % type(sessionSecurityAttr)
        self.sessionSecurityAttr = sessionSecurityAttr  # AttributeStatementType

    @classmethod
    def build(self, element):
        return CommonHeaderType(
                element.findtext('protocolVersion'),
                element.findtext('correlationId'),
                element.findtext('requesterNSA'),
                element.findtext('providerNSA'),
                element.findtext('replyTo'),
                AttributeStatementType.build(element.find('sessionSecurityAttr')) if element.find('sessionSecurityAttr') is not None else None
               )

    def xml(self, elementName):
        r = ET.Element(elementName)
        ET.SubElement(r, 'protocolVersion').text = self.protocolVersion
        ET.SubElement(r, 'correlationId').text = str(self.correlationId)
        ET.SubElement(r, 'requesterNSA').text = str(self.requesterNSA)
        ET.SubElement(r, 'providerNSA').text = str(self.providerNSA)
        if self.replyTo:
            ET.SubElement(r, 'replyTo').text = str(self.replyTo)
        if self.sessionSecurityAttr:
            r.append(self.sessionSecurityAttr.xml(ET.QName('urn:oasis:names:tc:SAML:2.0:assertion', 'sessionSecurityAttr')))
        return r


# connection types

class ErrorEventType:
    def __init__(self, connectionId, notificationId, timeStamp, event, additionalInfo, serviceException):
        self.connectionId = connectionId  # ConnectionIdType -> string
        self.notificationId = notificationId  # NotificationIdType -> int
        self.timeStamp = timeStamp  # DateTimeType -> dateTime
        self.event = event  # EventEnumType -> string
        self.additionalInfo = additionalInfo  # [ TypeValuePairType ]
        self.serviceException = serviceException  # ServiceExceptionType

    @classmethod
    def build(self, element):
        return ErrorEventType(
                element.findtext('connectionId'),
                int(element.findtext('notificationId')),
                element.findtext('timeStamp'),
                element.findtext('event'),
                [ TypeValuePairType.build(e) for e in element.find('additionalInfo') ] if element.find('additionalInfo') is not None else None,
                ServiceExceptionType.build(element.find('serviceException')) if element.find('serviceException') is not None else None
               )

    def xml(self, elementName):
        r = ET.Element(elementName)
        ET.SubElement(r, 'connectionId').text = self.connectionId
        ET.SubElement(r, 'notificationId').text = str(self.notificationId)
        ET.SubElement(r, 'timeStamp').text = str(self.timeStamp)
        ET.SubElement(r, 'event').text = self.event
        if self.additionalInfo:
            ET.SubElement(r, 'additionalInfo').extend( [ e.xml(ET.QName('http://schemas.ogf.org/nsi/2013/04/framework/types', 'additionalInfo')) for e in self.additionalInfo ] )
        if self.serviceException:
            r.append(self.serviceException.xml(ET.QName('http://schemas.ogf.org/nsi/2013/04/framework/types', 'serviceException')))
        return r


class ConnectionStatesType:
    def __init__(self, reservationState, provisionState, lifecycleState, dataPlaneStatus):
        self.reservationState = reservationState  # ReservationStateEnumType -> string
        self.provisionState = provisionState  # ProvisionStateEnumType -> string
        self.lifecycleState = lifecycleState  # LifecycleStateEnumType -> string
        self.dataPlaneStatus = dataPlaneStatus  # DataPlaneStatusType

    @classmethod
    def build(self, element):
        return ConnectionStatesType(
                element.findtext('reservationState'),
                element.findtext('provisionState'),
                element.findtext('lifecycleState'),
                DataPlaneStatusType.build(element.find('dataPlaneStatus')) if element.find('dataPlaneStatus') is not None else None
               )

    def xml(self, elementName):
        r = ET.Element(elementName)
        ET.SubElement(r, 'reservationState').text = self.reservationState
        if self.provisionState:
            ET.SubElement(r, 'provisionState').text = self.provisionState
        ET.SubElement(r, 'lifecycleState').text = self.lifecycleState
        r.append(self.dataPlaneStatus.xml('dataPlaneStatus'))
        return r


class TypeValuePairType:
    def __init__(self, type_, targetNamespace, value):
        self.type_ = type_  # string
        self.targetNamespace = targetNamespace  # anyURI
        self.value = value  # [ string ]

    @classmethod
    def build(self, element):
        return TypeValuePairType(
                element.get('type'),
                element.get('targetNamespace'),
                element.findtext('value')
               )

    def xml(self, elementName):
        attribs = attrib={'type' : self.type_}
        if self.targetNamespace:
            attribs['targetNamespace'] = self.targetNamespace
        r = ET.Element(elementName, attrib=attribs)
        if self.value:
            for el in self.value:
                ET.SubElement(r, 'value').text = el
        return r


class ReservationRequestCriteriaType:
    def __init__(self, version, schedule, bandwidth, serviceAttributes, path):
        self.version = version  # int
        self.schedule = schedule  # ScheduleType
        self.bandwidth = bandwidth  # int
        self.serviceAttributes = serviceAttributes  # [ TypeValuePairType ]
        self.path = path  # PathType

    @classmethod
    def build(self, element):
        return ReservationRequestCriteriaType(
                element.get('version'),
                ScheduleType.build(element.find('schedule')) if element.find('schedule') is not None else None,
                int(element.findtext('bandwidth')),
                [ TypeValuePairType.build(e) for e in element.find('serviceAttributes') ] if element.find('serviceAttributes') is not None else None,
                PathType.build(element.find('path')) if element.find('path') is not None else None
               )

    def xml(self, elementName):
        attribs = {}
        if self.version:
            attribs['version'] = str(self.version)
        r = ET.Element(elementName, attrib=attribs)
        if self.schedule:
            r.append(self.schedule.xml('schedule'))
        if self.bandwidth:
            ET.SubElement(r, 'bandwidth').text = str(self.bandwidth)
        if self.serviceAttributes:
            ET.SubElement(r, 'serviceAttributes').extend( [ e.xml(ET.QName('http://schemas.ogf.org/nsi/2013/04/framework/types', 'serviceAttributes')) for e in self.serviceAttributes ] )
        if self.path:
            r.append(self.path.xml('path'))
        return r


class GenericAcknowledgmentType:
    def __init__(self):
        pass

    @classmethod
    def build(self, element):
        return GenericAcknowledgmentType( )

    def xml(self, elementName):
        r = ET.Element(elementName)
        return r


class GenericFailedType:
    def __init__(self, connectionId, connectionStates, serviceException):
        self.connectionId = connectionId  # ConnectionIdType -> string
        self.connectionStates = connectionStates  # ConnectionStatesType
        self.serviceException = serviceException  # ServiceExceptionType

    @classmethod
    def build(self, element):
        return GenericFailedType(
                element.findtext('connectionId'),
                ConnectionStatesType.build(element.find('connectionStates')) if element.find('connectionStates') is not None else None,
                ServiceExceptionType.build(element.find('serviceException')) if element.find('serviceException') is not None else None
               )

    def xml(self, elementName):
        r = ET.Element(elementName)
        ET.SubElement(r, 'connectionId').text = self.connectionId
        r.append(self.connectionStates.xml('connectionStates'))
        r.append(self.serviceException.xml(ET.QName('http://schemas.ogf.org/nsi/2013/04/framework/types', 'serviceException')))
        return r


class PathType:
    def __init__(self, directionality, symmetricPath, sourceSTP, destSTP, ero):
        self.directionality = directionality  # DirectionalityType -> string
        self.symmetricPath = symmetricPath  # boolean
        self.sourceSTP = sourceSTP  # StpType
        self.destSTP = destSTP  # StpType
        self.ero = ero  # [ OrderedStpType ]

    @classmethod
    def build(self, element):
        return PathType(
                element.findtext('directionality'),
                None if not element.find('symmetricPath') else (True if element.findtext('symmetricPath') == 'true' else False),
                StpType.build(element.find('sourceSTP')) if element.find('sourceSTP') is not None else None,
                StpType.build(element.find('destSTP')) if element.find('destSTP') is not None else None,
                [ OrderedStpType.build(e) for e in element.find('ero') ] if element.find('ero') is not None else None
               )

    def xml(self, elementName):
        r = ET.Element(elementName)
        ET.SubElement(r, 'directionality').text = self.directionality
        if self.symmetricPath:
            ET.SubElement(r, 'symmetricPath').text = 'true' if self.symmetricPath else 'false'
        r.append(self.sourceSTP.xml('sourceSTP'))
        r.append(self.destSTP.xml('destSTP'))
        if self.ero:
            ET.SubElement(r, 'ero').extend( [ e.xml('ero') for e in self.ero ] )
        return r


class GenericConfirmedType:
    def __init__(self, connectionId):
        self.connectionId = connectionId  # ConnectionIdType -> string

    @classmethod
    def build(self, element):
        return GenericConfirmedType(
                element.findtext('connectionId')
               )

    def xml(self, elementName):
        r = ET.Element(elementName)
        ET.SubElement(r, 'connectionId').text = self.connectionId
        return r


class QuerySummaryConfirmedType:
    def __init__(self, reservations):
        self.reservations = reservations  # [ QuerySummaryResultType ]

    @classmethod
    def build(self, element):
        return QuerySummaryConfirmedType(
                element.findall('reservation')
               )

    def xml(self, elementName):
        r = ET.Element(elementName)
        if self.reservations:
            for el in self.reservations:
                r.append( el.xml('reservation') )
        return r


class OrderedStpType:
    def __init__(self, order, stp):
        self.order = order  # int
        self.stp = stp  # StpType

    @classmethod
    def build(self, element):
        return OrderedStpType(
                element.get('order'),
                StpType.build(element.find('stp')) if element.find('stp') is not None else None
               )

    def xml(self, elementName):
        r = ET.Element(elementName, attrib={'order' : str(self.order)})
        r.append(self.stp.xml('stp'))
        return r


class QueryNotificationConfirmedType:
    def __init__(self, errorEvent, reserveTimeout, messageDeliveryTimeout):
        self.errorEvent = errorEvent  # ErrorEventType
        self.reserveTimeout = reserveTimeout  # ReserveTimeoutRequestType
        self.messageDeliveryTimeout = messageDeliveryTimeout  # MessageDeliveryTimeoutRequestType

    @classmethod
    def build(self, element):
        return QueryNotificationConfirmedType(
                ErrorEventType.build(element.find('errorEvent')) if element.find('errorEvent') is not None else None,
                ReserveTimeoutRequestType.build(element.find('reserveTimeout')) if element.find('reserveTimeout') is not None else None,
                MessageDeliveryTimeoutRequestType.build(element.find('messageDeliveryTimeout')) if element.find('messageDeliveryTimeout') is not None else None
               )

    def xml(self, elementName):
        r = ET.Element(elementName)
        r.append(self.errorEvent.xml('errorEvent'))
        r.append(self.reserveTimeout.xml('reserveTimeout'))
        r.append(self.messageDeliveryTimeout.xml('messageDeliveryTimeout'))
        return r


class QueryType:
    def __init__(self, connectionId, globalReservationId):
        self.connectionId = connectionId  # [ ConnectionIdType -> string ]
        self.globalReservationId = globalReservationId  # [ GlobalReservationIdType -> anyURI ]

    @classmethod
    def build(self, element):
        return QueryType(
                [ e.text for e in element.findall('connectionId') ] ,
                [ e.text for e in element.findall('globalReservationId') ]
               )

    def xml(self, elementName):
        r = ET.Element(elementName)
        if self.connectionId:
            for el in self.connectionId:
                ET.SubElement(r, 'connectionId').text = el
        if self.globalReservationId:
            for el in self.globalReservationId:
                ET.SubElement(r, 'globalReservationId').text = str(el)
        return r


class DataPlaneStateChangeRequestType:
    def __init__(self, connectionId, notificationId, timeStamp, dataPlaneStatus):
        self.connectionId = connectionId  # ConnectionIdType -> string
        self.notificationId = notificationId  # NotificationIdType -> int
        self.timeStamp = timeStamp  # DateTimeType -> dateTime
        self.dataPlaneStatus = dataPlaneStatus  # DataPlaneStatusType

    @classmethod
    def build(self, element):
        return DataPlaneStateChangeRequestType(
                element.findtext('connectionId'),
                int(element.findtext('notificationId')),
                element.findtext('timeStamp'),
                DataPlaneStatusType.build(element.find('dataPlaneStatus')) if element.find('dataPlaneStatus') is not None else None
               )

    def xml(self, elementName):
        r = ET.Element(elementName)
        ET.SubElement(r, 'connectionId').text = self.connectionId
        ET.SubElement(r, 'notificationId').text = str(self.notificationId)
        ET.SubElement(r, 'timeStamp').text = str(self.timeStamp)
        r.append(self.dataPlaneStatus.xml('dataPlaneStatus'))
        return r


class GenericRequestType:
    def __init__(self, connectionId):
        self.connectionId = connectionId  # ConnectionIdType -> string

    @classmethod
    def build(self, element):
        return GenericRequestType(
                element.findtext('connectionId')
               )

    def xml(self, elementName):
        r = ET.Element(elementName)
        ET.SubElement(r, 'connectionId').text = self.connectionId
        return r


class ServiceExceptionType:
    def __init__(self, nsaId, connectionId, errorId, text, variables, childException):
        self.nsaId = nsaId  # NsaIdType -> anyURI
        self.connectionId = connectionId  # ConnectionIdType -> string
        self.errorId = errorId  # string
        self.text = text  # string
        self.variables = variables  # [ TypeValuePairType ]
        self.childException = childException  # [ ServiceExceptionType ]

    @classmethod
    def build(self, element):
        return ServiceExceptionType(
                element.findtext('nsaId'),
                element.findtext('connectionId'),
                element.findtext('errorId'),
                element.findtext('text'),
                [ TypeValuePairType.build(e) for e in element.find('variables') ] if element.find('variables') is not None else None,
                [ ServiceExceptionType.build(e) for e in element.findall('nsaId') ] if element.find('nsaId') is not None else None
               )

    def xml(self, elementName):
        r = ET.Element(elementName)
        ET.SubElement(r, 'nsaId').text = str(self.nsaId)
        if self.connectionId:
            ET.SubElement(r, 'connectionId').text = self.connectionId
        ET.SubElement(r, 'errorId').text = self.errorId
        ET.SubElement(r, 'text').text = self.text
        if self.variables:
            ET.SubElement(r, 'variables').extend( [ e.xml('variables') for e in self.variables ] )
        if self.childException:
            for el in self.childException:
                ET.SubElement(r, 'childException').extend( [ e.xml('nsaId') for e in el ] )
        return r


class QuerySummaryResultCriteriaType:
    def __init__(self, version, schedule, bandwidth, serviceAttributes, path, children):
        self.version = version  # int
        self.schedule = schedule  # ScheduleType
        self.bandwidth = bandwidth  # int
        self.serviceAttributes = serviceAttributes  # [ TypeValuePairType ]
        self.path = path  # PathType
        self.children = children  # [ SummaryPathType ]

    @classmethod
    def build(self, element):
        return QuerySummaryResultCriteriaType(
                element.get('version'),
                ScheduleType.build(element.find('schedule')) if element.find('schedule') is not None else None,
                int(element.findtext('bandwidth')),
                [ TypeValuePairType.build(e) for e in element.find('serviceAttributes') ] if element.find('serviceAttributes') is not None else None,
                PathType.build(element.find('path')) if element.find('path') is not None else None,
                [ SummaryPathType.build(e) for e in element.find('children') ] if element.find('children') is not None else None
               )

    def xml(self, elementName):
        r = ET.Element(elementName, attrib={'version' : str(self.version)})
        r.append(self.schedule.xml('schedule'))
        ET.SubElement(r, 'bandwidth').text = str(self.bandwidth)
        if self.serviceAttributes:
            ET.SubElement(r, 'serviceAttributes').extend( [ e.xml(ET.QName('http://schemas.ogf.org/nsi/2013/04/framework/types', 'serviceAttributes')) for e in self.serviceAttributes ] )
        r.append(self.path.xml('path'))
        if self.children:
            ET.SubElement(r, 'children').extend( [ e.xml('children') for e in self.children ] )
        return r


class QueryRecursiveResultCriteriaType:
    def __init__(self, version, schedule, bandwidth, serviceAttributes, path, children):
        self.version = version  # int
        self.schedule = schedule  # ScheduleType
        self.bandwidth = bandwidth  # int
        self.serviceAttributes = serviceAttributes  # [ TypeValuePairType ]
        self.path = path  # PathType
        self.children = children  # [ RecursivePathType ]

    @classmethod
    def build(self, element):
        return QueryRecursiveResultCriteriaType(
                element.get('version'),
                ScheduleType.build(element.find('schedule')) if element.find('schedule') is not None else None,
                int(element.findtext('bandwidth')),
                [ TypeValuePairType.build(e) for e in element.find('serviceAttributes') ] if element.find('serviceAttributes') is not None else None,
                PathType.build(element.find('path')) if element.find('path') is not None else None,
                [ RecursivePathType.build(e) for e in element.find('children') ] if element.find('children') is not None else None
               )

    def xml(self, elementName):
        r = ET.Element(elementName, attrib={'version' : str(self.version)})
        r.append(self.schedule.xml('schedule'))
        ET.SubElement(r, 'bandwidth').text = str(self.bandwidth)
        if self.serviceAttributes:
            ET.SubElement(r, 'serviceAttributes').extend( [ e.xml(ET.QName('http://schemas.ogf.org/nsi/2013/04/framework/types', 'serviceAttributes')) for e in self.serviceAttributes ] )
        r.append(self.path.xml('path'))
        if self.children:
            ET.SubElement(r, 'children').extend( [ e.xml('children') for e in self.children ] )
        return r


class NotificationBaseType:
    def __init__(self, connectionId, notificationId, timeStamp):
        self.connectionId = connectionId  # ConnectionIdType -> string
        self.notificationId = notificationId  # NotificationIdType -> int
        self.timeStamp = timeStamp  # DateTimeType -> dateTime

    @classmethod
    def build(self, element):
        return NotificationBaseType(
                element.findtext('connectionId'),
                int(element.findtext('notificationId')),
                element.findtext('timeStamp')
               )

    def xml(self, elementName):
        r = ET.Element(elementName)
        ET.SubElement(r, 'connectionId').text = self.connectionId
        ET.SubElement(r, 'notificationId').text = str(self.notificationId)
        ET.SubElement(r, 'timeStamp').text = str(self.timeStamp)
        return r


class ReserveType:
    def __init__(self, connectionId, globalReservationId, description, criteria):
        self.connectionId = connectionId  # ConnectionIdType -> string
        self.globalReservationId = globalReservationId  # GlobalReservationIdType -> anyURI
        self.description = description  # string
        self.criteria = criteria  # ReservationRequestCriteriaType

    @classmethod
    def build(self, element):
        return ReserveType(
                element.findtext('connectionId'),
                element.findtext('globalReservationId'),
                element.findtext('description'),
                ReservationRequestCriteriaType.build(element.find('criteria')) if element.find('criteria') is not None else None
               )

    def xml(self, elementName):
        r = ET.Element(elementName)
        if self.connectionId:
            ET.SubElement(r, 'connectionId').text = self.connectionId
        if self.globalReservationId:
            ET.SubElement(r, 'globalReservationId').text = str(self.globalReservationId)
        if self.description:
            ET.SubElement(r, 'description').text = self.description
        r.append(self.criteria.xml('criteria'))
        return r


class SummaryPathType:
    def __init__(self, order, connectionId, providerNSA, path):
        self.order = order  # int
        self.connectionId = connectionId  # ConnectionIdType -> string
        self.providerNSA = providerNSA  # NsaIdType -> anyURI
        self.path = path  # PathType

    @classmethod
    def build(self, element):
        return SummaryPathType(
                element.get('order'),
                element.findtext('connectionId'),
                element.findtext('providerNSA'),
                PathType.build(element.find('path')) if element.find('path') is not None else None
               )

    def xml(self, elementName):
        r = ET.Element(elementName, attrib={'order' : str(self.order)})
        ET.SubElement(r, 'connectionId').text = self.connectionId
        ET.SubElement(r, 'providerNSA').text = str(self.providerNSA)
        if self.path:
            r.append(self.path.xml('path'))
        return r


class QueryNotificationType:
    def __init__(self, connectionId, startNotificationId, endNotificationId):
        self.connectionId = connectionId  # ConnectionIdType -> string
        self.startNotificationId = startNotificationId  # int
        self.endNotificationId = endNotificationId  # int

    @classmethod
    def build(self, element):
        return QueryNotificationType(
                element.findtext('connectionId'),
                int(element.findtext('startNotificationId')),
                int(element.findtext('endNotificationId'))
               )

    def xml(self, elementName):
        r = ET.Element(elementName)
        ET.SubElement(r, 'connectionId').text = self.connectionId
        if self.startNotificationId:
            ET.SubElement(r, 'startNotificationId').text = str(self.startNotificationId)
        if self.endNotificationId:
            ET.SubElement(r, 'endNotificationId').text = str(self.endNotificationId)
        return r


class RecursivePathType:
    def __init__(self, order, connectionId, providerNSA, connectionStates, criteria):
        self.order = order  # int
        self.connectionId = connectionId  # ConnectionIdType -> string
        self.providerNSA = providerNSA  # NsaIdType -> anyURI
        self.connectionStates = connectionStates  # ConnectionStatesType
        self.criteria = criteria  # [ QueryRecursiveResultCriteriaType ]

    @classmethod
    def build(self, element):
        return RecursivePathType(
                element.get('order'),
                element.findtext('connectionId'),
                element.findtext('providerNSA'),
                ConnectionStatesType.build(element.find('connectionStates')) if element.find('connectionStates') is not None else None,
                [ QueryRecursiveResultCriteriaType.build(e) for e in element.findall('schedule') ] if element.find('schedule') is not None else None
               )

    def xml(self, elementName):
        r = ET.Element(elementName, attrib={'order' : str(self.order)})
        ET.SubElement(r, 'connectionId').text = self.connectionId
        ET.SubElement(r, 'providerNSA').text = str(self.providerNSA)
        r.append(self.connectionStates.xml('connectionStates'))
        if self.criteria:
            for el in self.criteria:
                ET.SubElement(r, 'criteria').extend( [ e.xml('schedule') for e in el ] )
        return r


class ReservationConfirmCriteriaType:
    def __init__(self, version, schedule, bandwidth, serviceAttributes, path):
        self.version = version  # int
        self.schedule = schedule  # ScheduleType
        self.bandwidth = bandwidth  # int
        self.serviceAttributes = serviceAttributes  # [ TypeValuePairType ]
        self.path = path  # PathType

    @classmethod
    def build(self, element):
        return ReservationConfirmCriteriaType(
                element.get('version'),
                ScheduleType.build(element.find('schedule')) if element.find('schedule') is not None else None,
                int(element.findtext('bandwidth')),
                [ TypeValuePairType.build(e) for e in element.find('serviceAttributes') ] if element.find('serviceAttributes') is not None else None,
                PathType.build(element.find('path')) if element.find('path') is not None else None
               )

    def xml(self, elementName):
        r = ET.Element(elementName, attrib={'version' : str(self.version)})
        r.append(self.schedule.xml('schedule'))
        ET.SubElement(r, 'bandwidth').text = str(self.bandwidth)
        if self.serviceAttributes:
            ET.SubElement(r, 'serviceAttributes').extend( [ e.xml(ET.QName('http://schemas.ogf.org/nsi/2013/04/framework/types', 'serviceAttributes')) for e in self.serviceAttributes ] )
        r.append(self.path.xml('path'))
        return r


class ReserveTimeoutRequestType:
    def __init__(self, connectionId, notificationId, timeStamp, timeoutValue, originatingConnectionId, originatingNSA):
        self.connectionId = connectionId  # ConnectionIdType -> string
        self.notificationId = notificationId  # NotificationIdType -> int
        self.timeStamp = timeStamp  # DateTimeType -> dateTime
        self.timeoutValue = timeoutValue  # int
        self.originatingConnectionId = originatingConnectionId  # ConnectionIdType -> string
        self.originatingNSA = originatingNSA  # NsaIdType -> anyURI

    @classmethod
    def build(self, element):
        return ReserveTimeoutRequestType(
                element.findtext('connectionId'),
                int(element.findtext('notificationId')),
                element.findtext('timeStamp'),
                int(element.findtext('timeoutValue')),
                element.findtext('originatingConnectionId'),
                element.findtext('originatingNSA')
               )

    def xml(self, elementName):
        r = ET.Element(elementName)
        ET.SubElement(r, 'connectionId').text = self.connectionId
        ET.SubElement(r, 'notificationId').text = str(self.notificationId)
        ET.SubElement(r, 'timeStamp').text = str(self.timeStamp)
        ET.SubElement(r, 'timeoutValue').text = str(self.timeoutValue)
        ET.SubElement(r, 'originatingConnectionId').text = self.originatingConnectionId
        ET.SubElement(r, 'originatingNSA').text = str(self.originatingNSA)
        return r


class MessageDeliveryTimeoutRequestType:
    def __init__(self, connectionId, notificationId, timeStamp, correlationId):
        self.connectionId = connectionId  # ConnectionIdType -> string
        self.notificationId = notificationId  # NotificationIdType -> int
        self.timeStamp = timeStamp  # DateTimeType -> dateTime
        self.correlationId = correlationId  # UuidType -> anyURI

    @classmethod
    def build(self, element):
        return MessageDeliveryTimeoutRequestType(
                element.findtext('connectionId'),
                int(element.findtext('notificationId')),
                element.findtext('timeStamp'),
                element.findtext('correlationId')
               )

    def xml(self, elementName):
        r = ET.Element(elementName)
        ET.SubElement(r, 'connectionId').text = self.connectionId
        ET.SubElement(r, 'notificationId').text = str(self.notificationId)
        ET.SubElement(r, 'timeStamp').text = str(self.timeStamp)
        ET.SubElement(r, 'correlationId').text = str(self.correlationId)
        return r


class QuerySummaryResultType:
    def __init__(self, connectionId, globalReservationId, description, criteria, requesterNSA, connectionStates, notificationId):
        self.connectionId = connectionId  # ConnectionIdType -> string
        self.globalReservationId = globalReservationId  # GlobalReservationIdType -> anyURI
        self.description = description  # string
        self.criteria = criteria  # [ QuerySummaryResultCriteriaType ]
        self.requesterNSA = requesterNSA  # NsaIdType -> anyURI
        self.connectionStates = connectionStates  # ConnectionStatesType
        self.notificationId = notificationId  # NotificationIdType -> int

    @classmethod
    def build(self, element):
        return QuerySummaryResultType(
                element.findtext('connectionId'),
                element.findtext('globalReservationId'),
                element.findtext('description'),
                [ QuerySummaryResultCriteriaType.build(e) for e in element.findall('schedule') ] if element.find('schedule') is not None else None,
                element.findtext('requesterNSA'),
                ConnectionStatesType.build(element.find('connectionStates')) if element.find('connectionStates') is not None else None,
                int(element.findtext('notificationId'))
               )

    def xml(self, elementName):
        r = ET.Element(elementName)
        ET.SubElement(r, 'connectionId').text = self.connectionId
        if self.globalReservationId:
            ET.SubElement(r, 'globalReservationId').text = str(self.globalReservationId)
        if self.description:
            ET.SubElement(r, 'description').text = self.description
        if self.criteria:
            for el in self.criteria:
                r.append( el.xml('criteria') )
        ET.SubElement(r, 'requesterNSA').text = str(self.requesterNSA)
        r.append(self.connectionStates.xml('connectionStates'))
        if self.notificationId:
            ET.SubElement(r, 'notificationId').text = str(self.notificationId)
        return r


class QueryRecursiveResultType:
    def __init__(self, connectionId, globalReservationId, description, criteria, requesterNSA, connectionStates, notificationId):
        self.connectionId = connectionId  # ConnectionIdType -> string
        self.globalReservationId = globalReservationId  # GlobalReservationIdType -> anyURI
        self.description = description  # string
        self.criteria = criteria  # [ QueryRecursiveResultCriteriaType ]
        self.requesterNSA = requesterNSA  # NsaIdType -> anyURI
        self.connectionStates = connectionStates  # ConnectionStatesType
        self.notificationId = notificationId  # NotificationIdType -> int

    @classmethod
    def build(self, element):
        return QueryRecursiveResultType(
                element.findtext('connectionId'),
                element.findtext('globalReservationId'),
                element.findtext('description'),
                [ QueryRecursiveResultCriteriaType.build(e) for e in element.findall('schedule') ] if element.find('schedule') is not None else None,
                element.findtext('requesterNSA'),
                ConnectionStatesType.build(element.find('connectionStates')) if element.find('connectionStates') is not None else None,
                int(element.findtext('notificationId'))
               )

    def xml(self, elementName):
        r = ET.Element(elementName)
        ET.SubElement(r, 'connectionId').text = self.connectionId
        if self.globalReservationId:
            ET.SubElement(r, 'globalReservationId').text = str(self.globalReservationId)
        if self.description:
            ET.SubElement(r, 'description').text = self.description
        if self.criteria:
            for el in self.criteria:
                ET.SubElement(r, 'criteria').extend( [ e.xml('schedule') for e in el ] )
        ET.SubElement(r, 'requesterNSA').text = str(self.requesterNSA)
        r.append(self.connectionStates.xml('connectionStates'))
        if self.notificationId:
            ET.SubElement(r, 'notificationId').text = str(self.notificationId)
        return r


class ScheduleType:
    def __init__(self, startTime, endTime):
        self.startTime = startTime  # DateTimeType -> dateTime
        self.endTime = endTime  # DateTimeType -> dateTime

    @classmethod
    def build(self, element):
        return ScheduleType(
                element.findtext('startTime'),
                element.findtext('endTime')
               )

    def xml(self, elementName):
        r = ET.Element(elementName)
        if self.startTime:
            ET.SubElement(r, 'startTime').text = str(self.startTime)
        if self.endTime:
            ET.SubElement(r, 'endTime').text = str(self.endTime)
        return r


class ReserveResponseType:
    def __init__(self, connectionId):
        self.connectionId = connectionId  # ConnectionIdType -> string

    @classmethod
    def build(self, element):
        return ReserveResponseType(
                element.findtext('connectionId')
               )

    def xml(self, elementName):
        r = ET.Element(elementName)
        ET.SubElement(r, 'connectionId').text = self.connectionId
        return r


class ReserveConfirmedType:
    def __init__(self, connectionId, globalReservationId, description, criteria):
        self.connectionId = connectionId  # ConnectionIdType -> string
        self.globalReservationId = globalReservationId  # GlobalReservationIdType -> anyURI
        self.description = description  # string
        self.criteria = criteria  # [ ReservationConfirmCriteriaType ]

    @classmethod
    def build(self, element):
        return ReserveConfirmedType(
                element.findtext('connectionId'),
                element.findtext('globalReservationId'),
                element.findtext('description'),
                [ ReservationConfirmCriteriaType.build(e) for e in element.findall('criteria') ] if element.find('criteria') is not None else None
               )

    def xml(self, elementName):
        r = ET.Element(elementName)
        ET.SubElement(r, 'connectionId').text = self.connectionId
        if self.globalReservationId:
            ET.SubElement(r, 'globalReservationId').text = str(self.globalReservationId)
        if self.description:
            ET.SubElement(r, 'description').text = self.description
        if self.criteria:
            for el in self.criteria:
                #ET.SubElement(r, 'criteria').extend( [ e.xml('schedule') for e in el ] )
                r.append( el.xml('criteria') )
        return r


class StpType:
    def __init__(self, networkId, localId, labels):
        self.networkId = networkId  # string
        self.localId = localId  # string
        self.labels = labels  # [ TypeValuePairType ]

    @classmethod
    def build(self, element):
        return StpType(
                element.findtext('networkId'),
                element.findtext('localId'),
                [ TypeValuePairType.build(e) for e in element.find('labels') ] if element.find('labels') is not None else None
               )

    def xml(self, elementName):
        r = ET.Element(elementName)
        ET.SubElement(r, 'networkId').text = self.networkId
        ET.SubElement(r, 'localId').text = self.localId
        if self.labels:
            ET.SubElement(r, 'labels').extend( [ e.xml(ET.QName('http://schemas.ogf.org/nsi/2013/04/framework/types', 'attribute')) for e in self.labels ] )
        return r


class DataPlaneStatusType:
    def __init__(self, active, version, versionConsistent):
        self.active = active  # boolean
        self.version = version  # int
        self.versionConsistent = versionConsistent  # boolean

    @classmethod
    def build(self, element):
        return DataPlaneStatusType(
                True if element.findtext('active') == 'true' else False,
                int(element.findtext('version')),
                True if element.findtext('versionConsistent') == 'true' else False
               )

    def xml(self, elementName):
        r = ET.Element(elementName)
        ET.SubElement(r, 'active').text = 'true' if self.active else 'false'
        ET.SubElement(r, 'version').text = str(self.version)
        ET.SubElement(r, 'versionConsistent').text = 'true' if self.versionConsistent else 'false'
        return r


class QueryFailedType:
    def __init__(self, serviceException):
        self.serviceException = serviceException  # ServiceExceptionType

    @classmethod
    def build(self, element):
        return QueryFailedType(
                ServiceExceptionType.build(element.find('serviceException')) if element.find('serviceException') is not None else None
               )

    def xml(self, elementName):
        r = ET.Element(elementName)
        r.append(self.serviceException.xml(ET.QName('http://schemas.ogf.org/nsi/2013/04/framework/types', 'serviceException')))
        return r



Attribute = ET.QName('urn:oasis:names:tc:SAML:2.0:assertion', 'Attribute')
AttributeStatement = ET.QName('urn:oasis:names:tc:SAML:2.0:assertion', 'AttributeStatement')
nsiHeader = ET.QName('http://schemas.ogf.org/nsi/2013/04/framework/headers', 'nsiHeader')

release = ET.QName('http://schemas.ogf.org/nsi/2013/04/connection/types', 'release')
reserve = ET.QName('http://schemas.ogf.org/nsi/2013/04/connection/types', 'reserve')
queryRecursiveConfirmed = ET.QName('http://schemas.ogf.org/nsi/2013/04/connection/types', 'queryRecursiveConfirmed')
reserveCommitConfirmed = ET.QName('http://schemas.ogf.org/nsi/2013/04/connection/types', 'reserveCommitConfirmed')
querySummarySyncConfirmed = ET.QName('http://schemas.ogf.org/nsi/2013/04/connection/types', 'querySummarySyncConfirmed')
releaseConfirmed = ET.QName('http://schemas.ogf.org/nsi/2013/04/connection/types', 'releaseConfirmed')
reserveCommitFailed = ET.QName('http://schemas.ogf.org/nsi/2013/04/connection/types', 'reserveCommitFailed')
reserveAbort = ET.QName('http://schemas.ogf.org/nsi/2013/04/connection/types', 'reserveAbort')
queryNotificationSyncFailed = ET.QName('http://schemas.ogf.org/nsi/2013/04/connection/types', 'queryNotificationSyncFailed')
messageDeliveryTimeout = ET.QName('http://schemas.ogf.org/nsi/2013/04/connection/types', 'messageDeliveryTimeout')
acknowledgment = ET.QName('http://schemas.ogf.org/nsi/2013/04/connection/types', 'acknowledgment')
reserveAbortConfirmed = ET.QName('http://schemas.ogf.org/nsi/2013/04/connection/types', 'reserveAbortConfirmed')
querySummaryFailed = ET.QName('http://schemas.ogf.org/nsi/2013/04/connection/types', 'querySummaryFailed')
queryRecursiveFailed = ET.QName('http://schemas.ogf.org/nsi/2013/04/connection/types', 'queryRecursiveFailed')
queryNotification = ET.QName('http://schemas.ogf.org/nsi/2013/04/connection/types', 'queryNotification')
querySummarySync = ET.QName('http://schemas.ogf.org/nsi/2013/04/connection/types', 'querySummarySync')
queryNotificationConfirmed = ET.QName('http://schemas.ogf.org/nsi/2013/04/connection/types', 'queryNotificationConfirmed')
queryNotificationSyncConfirmed = ET.QName('http://schemas.ogf.org/nsi/2013/04/connection/types', 'queryNotificationSyncConfirmed')
reserveConfirmed = ET.QName('http://schemas.ogf.org/nsi/2013/04/connection/types', 'reserveConfirmed')
terminateConfirmed = ET.QName('http://schemas.ogf.org/nsi/2013/04/connection/types', 'terminateConfirmed')
provisionConfirmed = ET.QName('http://schemas.ogf.org/nsi/2013/04/connection/types', 'provisionConfirmed')
reserveResponse = ET.QName('http://schemas.ogf.org/nsi/2013/04/connection/types', 'reserveResponse')
queryNotificationFailed = ET.QName('http://schemas.ogf.org/nsi/2013/04/connection/types', 'queryNotificationFailed')
queryRecursive = ET.QName('http://schemas.ogf.org/nsi/2013/04/connection/types', 'queryRecursive')
reserveCommit = ET.QName('http://schemas.ogf.org/nsi/2013/04/connection/types', 'reserveCommit')
querySummaryConfirmed = ET.QName('http://schemas.ogf.org/nsi/2013/04/connection/types', 'querySummaryConfirmed')
serviceException = ET.QName('http://schemas.ogf.org/nsi/2013/04/connection/types', 'serviceException')
errorEvent = ET.QName('http://schemas.ogf.org/nsi/2013/04/connection/types', 'errorEvent')
reserveTimeout = ET.QName('http://schemas.ogf.org/nsi/2013/04/connection/types', 'reserveTimeout')
reserveFailed = ET.QName('http://schemas.ogf.org/nsi/2013/04/connection/types', 'reserveFailed')
queryNotificationSync = ET.QName('http://schemas.ogf.org/nsi/2013/04/connection/types', 'queryNotificationSync')
dataPlaneStateChange = ET.QName('http://schemas.ogf.org/nsi/2013/04/connection/types', 'dataPlaneStateChange')
querySummarySyncFailed = ET.QName('http://schemas.ogf.org/nsi/2013/04/connection/types', 'querySummarySyncFailed')
provision = ET.QName('http://schemas.ogf.org/nsi/2013/04/connection/types', 'provision')
terminate = ET.QName('http://schemas.ogf.org/nsi/2013/04/connection/types', 'terminate')
querySummary = ET.QName('http://schemas.ogf.org/nsi/2013/04/connection/types', 'querySummary')



def parse(input_):

    root = ET.fromstring(input_)

    return parseElement(root)


def parseElement(element):

    type_map = {
        '{urn:oasis:names:tc:SAML:2.0:assertion}Attribute' : AttributeType,
        '{urn:oasis:names:tc:SAML:2.0:assertion}AttributeStatement' : AttributeStatementType,
        '{http://schemas.ogf.org/nsi/2013/04/framework/headers}nsiHeader' : CommonHeaderType,

        '{http://schemas.ogf.org/nsi/2013/04/connection/types}release' : GenericRequestType,
        '{http://schemas.ogf.org/nsi/2013/04/connection/types}reserve' : ReserveType,
        '{http://schemas.ogf.org/nsi/2013/04/connection/types}reserveCommitConfirmed' : GenericConfirmedType,
        '{http://schemas.ogf.org/nsi/2013/04/connection/types}releaseConfirmed' : GenericConfirmedType,
        '{http://schemas.ogf.org/nsi/2013/04/connection/types}reserveCommitFailed' : GenericFailedType,
        '{http://schemas.ogf.org/nsi/2013/04/connection/types}reserveAbort' : GenericRequestType,
        '{http://schemas.ogf.org/nsi/2013/04/connection/types}queryNotificationSyncFailed' : QueryFailedType,
        '{http://schemas.ogf.org/nsi/2013/04/connection/types}messageDeliveryTimeout' : MessageDeliveryTimeoutRequestType,
        '{http://schemas.ogf.org/nsi/2013/04/connection/types}acknowledgment' : GenericAcknowledgmentType,
        '{http://schemas.ogf.org/nsi/2013/04/connection/types}reserveAbortConfirmed' : GenericConfirmedType,
        '{http://schemas.ogf.org/nsi/2013/04/connection/types}querySummaryFailed' : QueryFailedType,
        '{http://schemas.ogf.org/nsi/2013/04/connection/types}queryRecursiveFailed' : QueryFailedType,
        '{http://schemas.ogf.org/nsi/2013/04/connection/types}queryNotification' : QueryNotificationType,
        '{http://schemas.ogf.org/nsi/2013/04/connection/types}querySummarySync' : QueryType,
        '{http://schemas.ogf.org/nsi/2013/04/connection/types}queryNotificationConfirmed' : QueryNotificationConfirmedType,
        '{http://schemas.ogf.org/nsi/2013/04/connection/types}queryNotificationSyncConfirmed' : QueryNotificationConfirmedType,
        '{http://schemas.ogf.org/nsi/2013/04/connection/types}reserveConfirmed' : ReserveConfirmedType,
        '{http://schemas.ogf.org/nsi/2013/04/connection/types}terminateConfirmed' : GenericConfirmedType,
        '{http://schemas.ogf.org/nsi/2013/04/connection/types}provisionConfirmed' : GenericConfirmedType,
        '{http://schemas.ogf.org/nsi/2013/04/connection/types}reserveResponse' : ReserveResponseType,
        '{http://schemas.ogf.org/nsi/2013/04/connection/types}queryNotificationFailed' : QueryFailedType,
        '{http://schemas.ogf.org/nsi/2013/04/connection/types}queryRecursive' : QueryType,
        '{http://schemas.ogf.org/nsi/2013/04/connection/types}reserveCommit' : GenericRequestType,
        '{http://schemas.ogf.org/nsi/2013/04/connection/types}serviceException' : ServiceExceptionType,
        '{http://schemas.ogf.org/nsi/2013/04/connection/types}errorEvent' : ErrorEventType,
        '{http://schemas.ogf.org/nsi/2013/04/connection/types}reserveTimeout' : ReserveTimeoutRequestType,
        '{http://schemas.ogf.org/nsi/2013/04/connection/types}reserveFailed' : GenericFailedType,
        '{http://schemas.ogf.org/nsi/2013/04/connection/types}queryNotificationSync' : QueryNotificationType,
        '{http://schemas.ogf.org/nsi/2013/04/connection/types}dataPlaneStateChange' : DataPlaneStateChangeRequestType,
        '{http://schemas.ogf.org/nsi/2013/04/connection/types}querySummarySyncFailed' : QueryFailedType,
        '{http://schemas.ogf.org/nsi/2013/04/connection/types}provision' : GenericRequestType,
        '{http://schemas.ogf.org/nsi/2013/04/connection/types}terminate' : GenericRequestType,
        '{http://schemas.ogf.org/nsi/2013/04/connection/types}querySummary' : QueryType
    }

    if not element.tag in type_map:
        raise ValueError('No type mapping for tag %s' % element.tag)

    type_ = type_map[element.tag]
    return type_.build(element)
