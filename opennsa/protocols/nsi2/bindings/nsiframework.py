## Generated by pyxsdgen

from xml.etree import ElementTree as ET

# types


class CommonHeaderType(object):
    def __init__(self, protocolVersion, correlationId, requesterNSA, providerNSA, replyTo, sessionSecurityAttr, connectionTrace=None):
        self.protocolVersion = protocolVersion  # string
        self.correlationId = correlationId  # UuidType -> anyURI
        self.requesterNSA = requesterNSA  # NsaIdType -> anyURI
        self.providerNSA = providerNSA  # NsaIdType -> anyURI
        self.replyTo = replyTo  # anyURI
        self.sessionSecurityAttr = sessionSecurityAttr  # [ SessionSecurityAttrType ]
        self.connectionTrace = connectionTrace # [ string ]

    @classmethod
    def build(self, element):
        # build trace first, as it is a bit complicated
        trace = [ ConnectionType.build(e) for e in element.find(str(ConnectionTrace)).findall('Connection') ] if element.find(str(ConnectionTrace)) is not None else None
        if trace:
            trace = [ ct.connectionId for ct in sorted(trace, key=lambda ct : ct.index ) ]
        return CommonHeaderType(
                element.findtext('protocolVersion'),
                element.findtext('correlationId'),
                element.findtext('requesterNSA'),
                element.findtext('providerNSA'),
                element.findtext('replyTo') if element.find('replyTo') is not None else None,
                [ SessionSecurityAttrType.build(e) for e in element.findall('sessionSecurityAttr') ] if element.find('sessionSecurityAttr') is not None else None,
                trace
               )

    def xml(self, elementName):
        r = ET.Element(elementName)
        ET.SubElement(r, 'protocolVersion').text = self.protocolVersion
        ET.SubElement(r, 'correlationId').text = str(self.correlationId)
        ET.SubElement(r, 'requesterNSA').text = str(self.requesterNSA)
        ET.SubElement(r, 'providerNSA').text = str(self.providerNSA)
        if self.replyTo is not None:
            ET.SubElement(r, 'replyTo').text = str(self.replyTo)
        if self.sessionSecurityAttr is not None:
            for el in self.sessionSecurityAttr:
                ET.SubElement(r, 'sessionSecurityAttr').extend( el.xml('sessionSecurityAttr') )
        if self.connectionTrace:
            s = ET.SubElement(r, ConnectionTrace)
            for idx, c in enumerate(self.connectionTrace):
                s.append( ConnectionType(c, idx).xml('Connection') )
        return r


class TypeValuePairType(object):
    def __init__(self, type, namespace, value):
        self.type = type  # string
        self.namespace = namespace  # anyURI
        self.value = value  # [ string ]

    @classmethod
    def build(self, element):
        return TypeValuePairType(
                element.get('type'),
                element.get('namespace'),
                element.findtext('value') if element.find('value') is not None else None
               )

    def xml(self, elementName):
        r = ET.Element(elementName, attrib={'type' : str(self.type), 'namespace' : str(self.namespace)})
        if self.value is not None:
            for el in self.value:
                ET.SubElement(r, 'value').text = el
        return r


class AttributeStatementType(object):
    def __init__(self, Attribute): #, EncryptedAttribute):
        self.Attribute = Attribute  # [ AttributeType ]
        #self.EncryptedAttribute = EncryptedAttribute  # EncryptedElementType

    @classmethod
    def build(self, element):
        return AttributeStatementType(
                AttributeType.build(element.findall('Attribute'))
                #EncryptedElementType.build(element.find('EncryptedAttribute'))
               )

    def xml(self, elementName):
        r = ET.Element(elementName)
        r.append(self.Attribute.xml(Attribute))
        r.append(self.EncryptedAttribute.xml('EncryptedAttribute'))
        return r


class AttributeType(object):
    def __init__(self, Name, NameFormat, FriendlyName, AttributeValue):
        self.Name = Name  # string
        self.NameFormat = NameFormat  # anyURI
        self.FriendlyName = FriendlyName  # string
        self.AttributeValue = AttributeValue  # [ string ] # technically anyType, but we don't use that

    @classmethod
    def build(self, element):
        return AttributeType(
                element.get('Name'),
                element.get('NameFormat'),
                element.get('FriendlyName'),
                [ e.text for e in element ] if len(element) > 0 else None
               )

    def xml(self, elementName):
        attribs = {'Name' : self.Name }
        if self.NameFormat is not None:
            attribs['NameFormat'] = self.NameFormat
        if self.FriendlyName is not None:
            attribs['FriendlyName'] = self.FriendlyName
        r = ET.Element(elementName, attribs)
        if self.AttributeValue:
            for av in self.AttributeValue:
                ET.SubElement(r, str(AttributeValue)).text = av
        return r


class SessionSecurityAttrType(object):
    def __init__(self, Attributes): #, EncryptedAttribute):
        self.Attributes = Attributes  # [ AttributeType ]
        #self.EncryptedAttribute = EncryptedAttribute  # [ EncryptedElementType ]

    @classmethod
    def build(self, element):
        return SessionSecurityAttrType(
                [ AttributeType.build(e) for e in element.findall('{urn:oasis:names:tc:SAML:2.0:assertion}Attribute') ]
                #EncryptedElementType.build(element.find('EncryptedAttribute'))
               )

    def xml(self, elementName):
        r = ET.Element(elementName)
        for e in self.Attributes:
            r.append(e.xml(Attribute))
        #r.append(self.EncryptedAttribute.xml('EncryptedAttribute'))
        return r


class ServiceExceptionType(object):
    def __init__(self, nsaId, connectionId, serviceType, errorId, text, variables, childException):
        self.nsaId = nsaId  # NsaIdType -> anyURI
        self.connectionId = connectionId  # ConnectionIdType -> string
        self.serviceType = serviceType  # string
        self.errorId = errorId  # string
        self.text = text  # string
        self.variables = variables  # [ TypeValuePairType ]
        self.childException = childException  # [ ServiceExceptionType ]

    @classmethod
    def build(self, element):
        return ServiceExceptionType(
                element.findtext('nsaId'),
                element.findtext('connectionId') if element.find('connectionId') is not None else None,
                element.findtext('serviceType') if element.find('serviceType') is not None else None,
                element.findtext('errorId'),
                element.findtext('text'),
                [ TypeValuePairType.build(e) for e in element.find('variables') ] if element.find('variables') is not None else None,
                [ ServiceExceptionType.build(e) for e in element.findall('childException') ] if element.find('childException') is not None else None
               )

    def xml(self, elementName):
        r = ET.Element(elementName)
        ET.SubElement(r, 'nsaId').text = str(self.nsaId)
        if self.connectionId is not None:
            ET.SubElement(r, 'connectionId').text = self.connectionId
        if self.serviceType is not None:
            ET.SubElement(r, 'serviceType').text = self.serviceType
        ET.SubElement(r, 'errorId').text = self.errorId
        ET.SubElement(r, 'text').text = self.text
        if self.variables is not None:
            ET.SubElement(r, 'variables').extend( [ e.xml('variables') for e in self.variables ] )
        if self.childException is not None:
            for el in self.childException:
                ET.SubElement(r, 'childException').extend( el.xml('childException') )
        return r




class ConnectionType(object):
    def __init__(self, connectionId, index):
        self.connectionId = connectionId  # string / anyURI
        self.index = index  # int

    @classmethod
    def build(self, element):
        return ConnectionType(
                element.text,
                int(element.get('index'))
               )

    def xml(self, elementName):
        r = ET.Element(elementName, { 'index' : str(self.index) } )
        r.text = self.connectionId
        return r



SAML_NS                 = 'urn:oasis:names:tc:SAML:2.0:assertion'
NSI_FRAMEWORK_NS        = 'http://schemas.ogf.org/nsi/2013/12/framework/headers'
NSI_FRAMEWORK_TYPES_NS  = 'http://schemas.ogf.org/nsi/2013/12/framework/types'
GNS_NAMESPACE           = "http://nordu.net/namespaces/2013/12/gnsbod"

Attribute           = ET.QName(SAML_NS, 'Attribute')
AttributeValue      = ET.QName(SAML_NS, 'AttributeValue')
AttributeStatement  = ET.QName(SAML_NS, 'AttributeStatement')

nsiHeader           = ET.QName(NSI_FRAMEWORK_NS, 'nsiHeader')
serviceException    = ET.QName(NSI_FRAMEWORK_TYPES_NS, 'serviceException')

ConnectionTrace     = ET.QName(GNS_NAMESPACE, 'ConnectionTrace')



def parse(input_):

    root = ET.fromstring(input_)
    return parseElement(root)


def parseElement(element):

    type_map = {
        '{urn:oasis:names:tc:SAML:2.0:assertion}Attribute' : AttributeType,
        '{urn:oasis:names:tc:SAML:2.0:assertion}AttributeStatement' : AttributeStatementType,
        '{http://schemas.ogf.org/nsi/2013/12/framework/headers}nsiHeader' : CommonHeaderType,
        '{http://schemas.ogf.org/nsi/2013/12/framework/types}serviceException' : ServiceExceptionType,
    }

    if not element.tag in type_map:
        raise ValueError('No type mapping for tag %s' % element.tag)

    type_ = type_map[element.tag]
    return type_.build(element)
