## Generated by pyxsdgen

from xml.etree import ElementTree as ET

# types


class CommonHeaderType:
    def __init__(self, protocolVersion, correlationId, requesterNSA, providerNSA, replyTo, sessionSecurityAttr):
        assert protocolVersion is not None, 'protocolVersion must not be None'
        assert correlationId   is not None, 'correlationId must not be None'
        assert requesterNSA    is not None, 'requesterNSA must not be None'
        assert providerNSA     is not None, 'providerNSA must not be None'
        self.protocolVersion = protocolVersion  # string
        self.correlationId = correlationId  # UuidType -> anyURI
        self.requesterNSA = requesterNSA  # NsaIdType -> anyURI
        self.providerNSA = providerNSA  # NsaIdType -> anyURI
        self.replyTo = replyTo  # anyURI
        self.sessionSecurityAttr = sessionSecurityAttr  # AttributeStatementType

    @classmethod
    def build(self, element):
        return CommonHeaderType(
                element.findtext('protocolVersion'),
                element.findtext('correlationId'),
                element.findtext('requesterNSA'),
                element.findtext('providerNSA'),
                element.findtext('replyTo'),
                AttributeStatementType.build(element.find('sessionSecurityAttr')) if element.find('sessionSecurityAttr') is not None else None
               )

    def xml(self, elementName):
        r = ET.Element(elementName)
        ET.SubElement(r, 'protocolVersion').text = self.protocolVersion
        ET.SubElement(r, 'correlationId').text = str(self.correlationId)
        ET.SubElement(r, 'requesterNSA').text = str(self.requesterNSA)
        ET.SubElement(r, 'providerNSA').text = str(self.providerNSA)
        if self.replyTo:
            ET.SubElement(r, 'replyTo').text = str(self.replyTo)
        if self.sessionSecurityAttr:
            r.append(self.sessionSecurityAttr.xml(ET.QName('urn:oasis:names:tc:SAML:2.0:assertion', 'sessionSecurityAttr')))
        return r


class AttributeStatementType:
    def __init__(self, Attribute, EncryptedAttribute):
        self.Attribute = Attribute  # AttributeType

    @classmethod
    def build(self, element):
        return AttributeStatementType(
                AttributeType.build(element.find('Attribute')) if element.find('Attribute') is not None else None
               )

    def xml(self, elementName):
        r = ET.Element(elementName)
        r.append(self.Attribute.xml('Attribute'))
        r.append(self.EncryptedAttribute.xml('EncryptedAttribute'))
        return r


class AttributeType:
    def __init__(self, Name, NameFormat, FriendlyName, AttributeValue):
        self.Name = Name  # string
        self.NameFormat = NameFormat  # anyURI
        self.FriendlyName = FriendlyName  # string
        self.AttributeValue = AttributeValue  # anyType

    @classmethod
    def build(self, element):
        return AttributeType(
                element.get('Name'),
                element.get('NameFormat'),
                element.get('FriendlyName'),
                None
               )

    def xml(self, elementName):
        r = ET.Element(elementName, attrib={'Name' : str(self.Name), 'NameFormat' : str(self.NameFormat), 'FriendlyName' : str(self.FriendlyName)})
        pass # anyType not handled
        return r


class TypeValuePairType:
    def __init__(self, type, namespace, value):
        self.type = type  # string
        self.namespace = namespace  # anyURI
        self.value = value  # [ string ]

    @classmethod
    def build(self, element):
        return TypeValuePairType(
                element.get('type'),
                element.get('namespace'),
                element.findtext('value')
               )

    def xml(self, elementName):
        r = ET.Element(elementName, attrib={'type' : str(self.type), 'namespace' : str(self.namespace)})
        if self.value:
            for el in self.value:
                ET.SubElement(r, 'value').text = el
        return r


class ServiceExceptionType:
    def __init__(self, nsaId, connectionId, serviceType, errorId, text, variables, childException):
        self.nsaId = nsaId  # NsaIdType -> anyURI
        self.connectionId = connectionId  # ConnectionIdType -> string
        self.serviceType = serviceType  # string
        self.errorId = errorId  # string
        self.text = text  # string
        self.variables = variables  # [ TypeValuePairType ]
        self.childException = childException  # [ ServiceExceptionType ]

    @classmethod
    def build(self, element):
        return ServiceExceptionType(
                element.findtext('nsaId'),
                element.findtext('connectionId'),
                element.findtext('serviceType'),
                element.findtext('errorId'),
                element.findtext('text'),
                [ TypeValuePairType.build(e) for e in element.find('variables') ] if element.find('variables') is not None else None,
                [ ServiceExceptionType.build(e) for e in element.findall('nsaId') ] if element.find('nsaId') is not None else None
               )

    def xml(self, elementName):
        r = ET.Element(elementName)
        ET.SubElement(r, 'nsaId').text = str(self.nsaId)
        if self.connectionId:
            ET.SubElement(r, 'connectionId').text = self.connectionId
        if self.serviceType:
            ET.SubElement(r, 'serviceType').text = self.serviceType
        ET.SubElement(r, 'errorId').text = self.errorId
        ET.SubElement(r, 'text').text = self.text
        if self.variables:
            ET.SubElement(r, 'variables').extend( [ e.xml('variables') for e in self.variables ] )
        if self.childException:
            for el in self.childException:
                ET.SubElement(r, 'childException').extend( [ e.xml('nsaId') for e in el ] )
        return r


AttributeValue = ET.QName('urn:oasis:names:tc:SAML:2.0:assertion', 'AttributeValue')
Attribute = ET.QName('urn:oasis:names:tc:SAML:2.0:assertion', 'Attribute')
serviceException = ET.QName('http://schemas.ogf.org/nsi/2013/07/framework/types', 'serviceException')
nsiHeader = ET.QName('http://schemas.ogf.org/nsi/2013/07/framework/headers', 'nsiHeader')
AttributeStatement = ET.QName('urn:oasis:names:tc:SAML:2.0:assertion', 'AttributeStatement')


def parse(input_):

    root = ET.fromstring(input_)

    return parseElement(root)


def parseElement(element):

    type_map = {
        '{urn:oasis:names:tc:SAML:2.0:assertion}Attribute' : AttributeType,
        '{http://schemas.ogf.org/nsi/2013/07/framework/types}serviceException' : ServiceExceptionType,
        '{http://schemas.ogf.org/nsi/2013/07/framework/headers}nsiHeader' : CommonHeaderType,
        '{urn:oasis:names:tc:SAML:2.0:assertion}AttributeStatement' : AttributeStatementType,
    }

    if not element.tag in type_map:
        raise ValueError('No type mapping for tag %s' % element.tag)

    type_ = type_map[element.tag]
    return type_.build(element)
