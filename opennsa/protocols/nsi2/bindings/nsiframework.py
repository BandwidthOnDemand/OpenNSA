## Generated by pyxsdgen

from xml.etree import ElementTree as ET

# types


class CommonHeaderType(object):
    def __init__(self, protocolVersion, correlationId, requesterNSA, providerNSA, replyTo, sessionSecurityAttr):
        self.protocolVersion = protocolVersion  # string
        self.correlationId = correlationId  # UuidType -> anyURI
        self.requesterNSA = requesterNSA  # NsaIdType -> anyURI
        self.providerNSA = providerNSA  # NsaIdType -> anyURI
        self.replyTo = replyTo  # anyURI
        self.sessionSecurityAttr = sessionSecurityAttr  # [ SessionSecurityAttrType ]

    @classmethod
    def build(self, element):
        return CommonHeaderType(
                element.findtext('protocolVersion'),
                element.findtext('correlationId'),
                element.findtext('requesterNSA'),
                element.findtext('providerNSA'),
                element.findtext('replyTo') if element.find('replyTo') is not None else None,
                [ SessionSecurityAttrType.build(e) for e in element.findall('sessionSecurityAttr') ] if element.find('sessionSecurityAttr') is not None else None
               )

    def xml(self, elementName):
        r = ET.Element(elementName)
        ET.SubElement(r, 'protocolVersion').text = self.protocolVersion
        ET.SubElement(r, 'correlationId').text = str(self.correlationId)
        ET.SubElement(r, 'requesterNSA').text = str(self.requesterNSA)
        ET.SubElement(r, 'providerNSA').text = str(self.providerNSA)
        if self.replyTo is not None:
            ET.SubElement(r, 'replyTo').text = str(self.replyTo)
        if self.sessionSecurityAttr is not None:
            for el in self.sessionSecurityAttr:
                ET.SubElement(r, 'sessionSecurityAttr').extend( el.xml('sessionSecurityAttr') )
        return r


class TypeValuePairType(object):
    def __init__(self, type, namespace, value):
        self.type = type  # string
        self.namespace = namespace  # anyURI
        self.value = value  # [ string ]

    @classmethod
    def build(self, element):
        return TypeValuePairType(
                element.get('type'),
                element.get('namespace'),
                element.findtext('value') if element.find('value') is not None else None
               )

    def xml(self, elementName):
        r = ET.Element(elementName, attrib={'type' : str(self.type), 'namespace' : str(self.namespace)})
        if self.value is not None:
            for el in self.value:
                ET.SubElement(r, 'value').text = el
        return r


class AttributeStatementType(object):
    def __init__(self, Attribute, EncryptedAttribute):
        self.Attribute = Attribute  # AttributeType
        #self.EncryptedAttribute = EncryptedAttribute  # EncryptedElementType

    @classmethod
    def build(self, element):
        return AttributeStatementType(
                AttributeType.build(element.find('Attribute'))
                #EncryptedElementType.build(element.find('EncryptedAttribute'))
               )

    def xml(self, elementName):
        r = ET.Element(elementName)
        r.append(self.Attribute.xml('Attribute'))
        r.append(self.EncryptedAttribute.xml('EncryptedAttribute'))
        return r


class AttributeType(object):
    def __init__(self, Name, NameFormat, FriendlyName, AttributeValue):
        self.Name = Name  # string
        self.NameFormat = NameFormat  # anyURI
        self.FriendlyName = FriendlyName  # string
        self.AttributeValue = AttributeValue  # anyType

    @classmethod
    def build(self, element):
        return AttributeType(
                element.get('Name'),
                element.get('NameFormat'),
                element.get('FriendlyName'),
                None
               )

    def xml(self, elementName):
        r = ET.Element(elementName, attrib={'Name' : str(self.Name), 'NameFormat' : str(self.NameFormat), 'FriendlyName' : str(self.FriendlyName)})
        pass # anyType not handled
        return r


class SessionSecurityAttrType(object):
    def __init__(self, Attribute, EncryptedAttribute):
        self.Attribute = Attribute  # AttributeType
        #self.EncryptedAttribute = EncryptedAttribute  # EncryptedElementType

    @classmethod
    def build(self, element):
        return SessionSecurityAttrType(
                AttributeType.build(element.find('Attribute'))
                #EncryptedElementType.build(element.find('EncryptedAttribute'))
               )

    def xml(self, elementName):
        r = ET.Element(elementName)
        r.append(self.Attribute.xml('Attribute'))
        r.append(self.EncryptedAttribute.xml('EncryptedAttribute'))
        return r


class ServiceExceptionType(object):
    def __init__(self, nsaId, connectionId, serviceType, errorId, text, variables, childException):
        self.nsaId = nsaId  # NsaIdType -> anyURI
        self.connectionId = connectionId  # ConnectionIdType -> string
        self.serviceType = serviceType  # string
        self.errorId = errorId  # string
        self.text = text  # string
        self.variables = variables  # [ TypeValuePairType ]
        self.childException = childException  # [ ServiceExceptionType ]

    @classmethod
    def build(self, element):
        return ServiceExceptionType(
                element.findtext('nsaId'),
                element.findtext('connectionId') if element.find('connectionId') is not None else None,
                element.findtext('serviceType') if element.find('serviceType') is not None else None,
                element.findtext('errorId'),
                element.findtext('text'),
                [ TypeValuePairType.build(e) for e in element.find('variables') ] if element.find('variables') is not None else None,
                [ ServiceExceptionType.build(e) for e in element.findall('childException') ] if element.find('childException') is not None else None
               )

    def xml(self, elementName):
        r = ET.Element(elementName)
        ET.SubElement(r, 'nsaId').text = str(self.nsaId)
        if self.connectionId is not None:
            ET.SubElement(r, 'connectionId').text = self.connectionId
        if self.serviceType is not None:
            ET.SubElement(r, 'serviceType').text = self.serviceType
        ET.SubElement(r, 'errorId').text = self.errorId
        ET.SubElement(r, 'text').text = self.text
        if self.variables is not None:
            ET.SubElement(r, 'variables').extend( [ e.xml('variables') for e in self.variables ] )
        if self.childException is not None:
            for el in self.childException:
                ET.SubElement(r, 'childException').extend( el.xml('childException') )
        return r



Attribute = ET.QName('urn:oasis:names:tc:SAML:2.0:assertion', 'Attribute')
AttributeValue = ET.QName('urn:oasis:names:tc:SAML:2.0:assertion', 'AttributeValue')
AttributeStatement = ET.QName('urn:oasis:names:tc:SAML:2.0:assertion', 'AttributeStatement')
nsiHeader = ET.QName('http://schemas.ogf.org/nsi/2013/12/framework/headers', 'nsiHeader')
serviceException = ET.QName('http://schemas.ogf.org/nsi/2013/12/framework/types', 'serviceException')



def parse(input_):

    root = ET.fromstring(input_)
    return parseElement(root)


def parseElement(element):

    type_map = {
        '{urn:oasis:names:tc:SAML:2.0:assertion}Attribute' : AttributeType,
        '{urn:oasis:names:tc:SAML:2.0:assertion}AttributeStatement' : AttributeStatementType,
        '{http://schemas.ogf.org/nsi/2013/12/framework/headers}nsiHeader' : CommonHeaderType,
        '{http://schemas.ogf.org/nsi/2013/12/framework/types}serviceException' : ServiceExceptionType,
    }

    if not element.tag in type_map:
        raise ValueError('No type mapping for tag %s' % element.tag)

    type_ = type_map[element.tag]
    return type_.build(element)
