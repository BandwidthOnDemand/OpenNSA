## Generated by pyxsdgen

from xml.etree import ElementTree as ET

# types

class DigestMethodType:
    def __init__(self, Algorithm):
        self.Algorithm = Algorithm  # anyURI

    @classmethod
    def build(self, element):
        return DigestMethodType(
                element.get('Algorithm')
               )

    def xml(self, elementName):
        r = ET.Element(elementName, attrib={'Algorithm' : str(self.Algorithm)})
        return r


class ProxyRestrictionType:
    def __init__(self, Audience):
        self.Audience = Audience  # anyURI

    @classmethod
    def build(self, element):
        return ProxyRestrictionType(
                element.findtext('Audience')
               )

    def xml(self, elementName):
        r = ET.Element(elementName)
        ET.SubElement(r, 'Audience').text = str(self.Audience)
        return r


class SignatureMethodType:
    def __init__(self, Algorithm, HMACOutputLength):
        self.Algorithm = Algorithm  # anyURI
        self.HMACOutputLength = HMACOutputLength  # HMACOutputLengthType -> integer

    @classmethod
    def build(self, element):
        return SignatureMethodType(
                element.get('Algorithm'),
                int(element.findtext('HMACOutputLength'))
               )

    def xml(self, elementName):
        r = ET.Element(elementName, attrib={'Algorithm' : str(self.Algorithm)})
        if self.HMACOutputLength:
            ET.SubElement(r, 'HMACOutputLength').text = str(self.HMACOutputLength)
        return r


class ActionType:
    def __init__(self):
        pass

    @classmethod
    def build(self, element):
        return ActionType( )

    def xml(self, elementName):
        r = ET.Element(elementName)
        return r


class KeyValueType:
    def __init__(self):
        pass

    @classmethod
    def build(self, element):
        return KeyValueType( )

    def xml(self, elementName):
        r = ET.Element(elementName)
        return r


class SubjectLocalityType:
    def __init__(self, Address, DNSName):
        self.Address = Address  # string
        self.DNSName = DNSName  # string

    @classmethod
    def build(self, element):
        return SubjectLocalityType(
                element.get('Address'),
                element.get('DNSName')
               )

    def xml(self, elementName):
        r = ET.Element(elementName, attrib={'Address' : str(self.Address), 'DNSName' : str(self.DNSName)})
        return r


class AuthnStatementType:
    def __init__(self, SubjectLocality, AuthnContext):
        self.SubjectLocality = SubjectLocality  # SubjectLocalityType
        self.AuthnContext = AuthnContext  # AuthnContextType

    @classmethod
    def build(self, element):
        return AuthnStatementType(
                SubjectLocalityType.build(element.find('SubjectLocality')) if element.find('SubjectLocality') is not None else None,
                AuthnContextType.build(element.find('AuthnContext')) if element.find('AuthnContext') is not None else None
               )

    def xml(self, elementName):
        r = ET.Element(elementName)
        r.append(self.SubjectLocality.xml('SubjectLocality'))
        r.append(self.AuthnContext.xml('AuthnContext'))
        return r


class X509DataType:
    def __init__(self, X509IssuerSerial, X509SKI, X509SubjectName, X509Certificate, X509CRL):
        self.X509IssuerSerial = X509IssuerSerial  # X509IssuerSerialType
        self.X509SKI = X509SKI  # base64Binary
        self.X509SubjectName = X509SubjectName  # string
        self.X509Certificate = X509Certificate  # base64Binary
        self.X509CRL = X509CRL  # base64Binary

    @classmethod
    def build(self, element):
        return X509DataType(
                X509IssuerSerialType.build(element.find('X509IssuerSerial')) if element.find('X509IssuerSerial') is not None else None,
                None,
                element.findtext('X509SubjectName'),
                None,
                None
               )

    def xml(self, elementName):
        r = ET.Element(elementName)
        r.append(self.X509IssuerSerial.xml('X509IssuerSerial'))
        pass # base64Binary not handled
        ET.SubElement(r, 'X509SubjectName').text = self.X509SubjectName
        pass # base64Binary not handled
        pass # base64Binary not handled
        return r


class SignaturePropertiesType:
    def __init__(self, Id, SignatureProperty):
        self.Id = Id  # ID
        self.SignatureProperty = SignatureProperty  # SignaturePropertyType

    @classmethod
    def build(self, element):
        return SignaturePropertiesType(
                element.get('Id'),
                SignaturePropertyType.build(element.find('SignatureProperty')) if element.find('SignatureProperty') is not None else None
               )

    def xml(self, elementName):
        r = ET.Element(elementName, attrib={'Id' : str(self.Id)})
        r.append(self.SignatureProperty.xml('SignatureProperty'))
        return r


class SPKIDataType:
    def __init__(self, SPKISexp):
        self.SPKISexp = SPKISexp  # base64Binary

    @classmethod
    def build(self, element):
        return SPKIDataType(
                None
               )

    def xml(self, elementName):
        r = ET.Element(elementName)
        pass # base64Binary not handled
        return r


class CanonicalizationMethodType:
    def __init__(self, Algorithm):
        self.Algorithm = Algorithm  # anyURI

    @classmethod
    def build(self, element):
        return CanonicalizationMethodType(
                element.get('Algorithm')
               )

    def xml(self, elementName):
        r = ET.Element(elementName, attrib={'Algorithm' : str(self.Algorithm)})
        return r


class EncryptedType:
    def __init__(self, Id, Type, MimeType, Encoding, EncryptionMethod, KeyInfo, CipherData, EncryptionProperties):
        self.Id = Id  # ID
        self.Type = Type  # anyURI
        self.MimeType = MimeType  # string
        self.Encoding = Encoding  # anyURI
        self.EncryptionMethod = EncryptionMethod  # EncryptionMethodType
        self.KeyInfo = KeyInfo  # KeyInfoType
        self.CipherData = CipherData  # CipherDataType
        self.EncryptionProperties = EncryptionProperties  # EncryptionPropertiesType

    @classmethod
    def build(self, element):
        return EncryptedType(
                element.get('Id'),
                element.get('Type'),
                element.get('MimeType'),
                element.get('Encoding'),
                EncryptionMethodType.build(element.find('EncryptionMethod')) if element.find('EncryptionMethod') is not None else None,
                KeyInfoType.build(element.find('KeyInfo')) if element.find('KeyInfo') is not None else None,
                CipherDataType.build(element.find('CipherData')) if element.find('CipherData') is not None else None,
                EncryptionPropertiesType.build(element.find('EncryptionProperties')) if element.find('EncryptionProperties') is not None else None
               )

    def xml(self, elementName):
        r = ET.Element(elementName, attrib={'Id' : str(self.Id), 'Type' : str(self.Type), 'MimeType' : str(self.MimeType), 'Encoding' : str(self.Encoding)})
        if self.EncryptionMethod:
            r.append(self.EncryptionMethod.xml('EncryptionMethod'))
        r.append(self.KeyInfo.xml(ET.QName('http://www.w3.org/2000/09/xmldsig#', 'KeyInfo')))
        r.append(self.CipherData.xml('CipherData'))
        r.append(self.EncryptionProperties.xml('EncryptionProperties'))
        return r


class CipherReferenceType:
    def __init__(self, URI):
        self.URI = URI  # anyURI

    @classmethod
    def build(self, element):
        return CipherReferenceType(
                element.get('URI')
               )

    def xml(self, elementName):
        r = ET.Element(elementName, attrib={'URI' : str(self.URI)})
        return r


class AudienceRestrictionType:
    def __init__(self, Audience):
        self.Audience = Audience  # anyURI

    @classmethod
    def build(self, element):
        return AudienceRestrictionType(
                element.findtext('Audience')
               )

    def xml(self, elementName):
        r = ET.Element(elementName)
        ET.SubElement(r, 'Audience').text = str(self.Audience)
        return r


class EncryptionMethodType:
    def __init__(self, Algorithm, KeySize, OAEPparams):
        self.Algorithm = Algorithm  # anyURI
        self.KeySize = KeySize  # KeySizeType -> integer
        self.OAEPparams = OAEPparams  # base64Binary

    @classmethod
    def build(self, element):
        return EncryptionMethodType(
                element.get('Algorithm'),
                int(element.findtext('KeySize')),
                None
               )

    def xml(self, elementName):
        r = ET.Element(elementName, attrib={'Algorithm' : str(self.Algorithm)})
        if self.KeySize:
            ET.SubElement(r, 'KeySize').text = str(self.KeySize)
        if self.OAEPparams:
            pass # base64Binary not handled
        return r


class TransformsType:
    def __init__(self, Transform):
        self.Transform = Transform  # TransformType

    @classmethod
    def build(self, element):
        return TransformsType(
                TransformType.build(element.find('Transform')) if element.find('Transform') is not None else None
               )

    def xml(self, elementName):
        r = ET.Element(elementName)
        r.append(self.Transform.xml(ET.QName('http://www.w3.org/2000/09/xmldsig#', 'Transform')))
        return r


class SignatureType:
    def __init__(self, Id, SignedInfo, SignatureValue, KeyInfo, Object):
        self.Id = Id  # ID
        self.SignedInfo = SignedInfo  # SignedInfoType
        self.SignatureValue = SignatureValue  # SignatureValueType
        self.KeyInfo = KeyInfo  # KeyInfoType
        self.Object = Object  # ObjectType

    @classmethod
    def build(self, element):
        return SignatureType(
                element.get('Id'),
                SignedInfoType.build(element.find('SignedInfo')) if element.find('SignedInfo') is not None else None,
                SignatureValueType.build(element.find('SignatureValue')) if element.find('SignatureValue') is not None else None,
                KeyInfoType.build(element.find('KeyInfo')) if element.find('KeyInfo') is not None else None,
                ObjectType.build(element.find('Object')) if element.find('Object') is not None else None
               )

    def xml(self, elementName):
        r = ET.Element(elementName, attrib={'Id' : str(self.Id)})
        r.append(self.SignedInfo.xml('SignedInfo'))
        r.append(self.SignatureValue.xml('SignatureValue'))
        r.append(self.KeyInfo.xml('KeyInfo'))
        r.append(self.Object.xml('Object'))
        return r


class EvidenceType:
    def __init__(self):
        pass

    @classmethod
    def build(self, element):
        return EvidenceType( )

    def xml(self, elementName):
        r = ET.Element(elementName)
        return r


class ObjectType:
    def __init__(self, Id, MimeType, Encoding):
        self.Id = Id  # ID
        self.MimeType = MimeType  # string
        self.Encoding = Encoding  # anyURI

    @classmethod
    def build(self, element):
        return ObjectType(
                element.get('Id'),
                element.get('MimeType'),
                element.get('Encoding')
               )

    def xml(self, elementName):
        r = ET.Element(elementName, attrib={'Id' : str(self.Id), 'MimeType' : str(self.MimeType), 'Encoding' : str(self.Encoding)})
        return r


class CommonHeaderType:
    def __init__(self, protocolVersion, correlationId, requesterNSA, providerNSA, replyTo, sessionSecurityAttr):
        self.protocolVersion = protocolVersion  # string
        self.correlationId = correlationId  # UuidType -> anyURI
        self.requesterNSA = requesterNSA  # NsaIdType -> anyURI
        self.providerNSA = providerNSA  # NsaIdType -> anyURI
        self.replyTo = replyTo  # anyURI
        self.sessionSecurityAttr = sessionSecurityAttr  # AttributeStatementType

    @classmethod
    def build(self, element):
        return CommonHeaderType(
                element.findtext('protocolVersion'),
                element.findtext('correlationId'),
                element.findtext('requesterNSA'),
                element.findtext('providerNSA'),
                element.findtext('replyTo'),
                AttributeStatementType.build(element.find('sessionSecurityAttr')) if element.find('sessionSecurityAttr') is not None else None
               )

    def xml(self, elementName):
        r = ET.Element(elementName)
        ET.SubElement(r, 'protocolVersion').text = self.protocolVersion
        ET.SubElement(r, 'correlationId').text = str(self.correlationId)
        ET.SubElement(r, 'requesterNSA').text = str(self.requesterNSA)
        ET.SubElement(r, 'providerNSA').text = str(self.providerNSA)
        if self.replyTo:
            ET.SubElement(r, 'replyTo').text = str(self.replyTo)
        if self.sessionSecurityAttr:
            r.append(self.sessionSecurityAttr.xml(ET.QName('urn:oasis:names:tc:SAML:2.0:assertion', 'sessionSecurityAttr')))
        return r


class EncryptedDataType:
    def __init__(self, Id, Type, MimeType, Encoding, EncryptionMethod, KeyInfo, CipherData, EncryptionProperties):
        self.Id = Id  # ID
        self.Type = Type  # anyURI
        self.MimeType = MimeType  # string
        self.Encoding = Encoding  # anyURI
        self.EncryptionMethod = EncryptionMethod  # EncryptionMethodType
        self.KeyInfo = KeyInfo  # KeyInfoType
        self.CipherData = CipherData  # CipherDataType
        self.EncryptionProperties = EncryptionProperties  # EncryptionPropertiesType

    @classmethod
    def build(self, element):
        return EncryptedDataType(
                element.get('Id'),
                element.get('Type'),
                element.get('MimeType'),
                element.get('Encoding'),
                EncryptionMethodType.build(element.find('EncryptionMethod')) if element.find('EncryptionMethod') is not None else None,
                KeyInfoType.build(element.find('KeyInfo')) if element.find('KeyInfo') is not None else None,
                CipherDataType.build(element.find('CipherData')) if element.find('CipherData') is not None else None,
                EncryptionPropertiesType.build(element.find('EncryptionProperties')) if element.find('EncryptionProperties') is not None else None
               )

    def xml(self, elementName):
        r = ET.Element(elementName, attrib={'Id' : str(self.Id), 'Type' : str(self.Type), 'MimeType' : str(self.MimeType), 'Encoding' : str(self.Encoding)})
        if self.EncryptionMethod:
            r.append(self.EncryptionMethod.xml('EncryptionMethod'))
        r.append(self.KeyInfo.xml(ET.QName('http://www.w3.org/2000/09/xmldsig#', 'KeyInfo')))
        r.append(self.CipherData.xml('CipherData'))
        r.append(self.EncryptionProperties.xml('EncryptionProperties'))
        return r


class ReferenceType:
    def __init__(self, Id, URI, Type, Transforms, DigestMethod, DigestValue):
        self.Id = Id  # ID
        self.URI = URI  # anyURI
        self.Type = Type  # anyURI
        self.Transforms = Transforms  # TransformsType
        self.DigestMethod = DigestMethod  # DigestMethodType
        self.DigestValue = DigestValue  # DigestValueType -> base64Binary

    @classmethod
    def build(self, element):
        return ReferenceType(
                element.get('Id'),
                element.get('URI'),
                element.get('Type'),
                TransformsType.build(element.find('Transforms')) if element.find('Transforms') is not None else None,
                DigestMethodType.build(element.find('DigestMethod')) if element.find('DigestMethod') is not None else None,
                None
               )

    def xml(self, elementName):
        r = ET.Element(elementName, attrib={'Id' : str(self.Id), 'URI' : str(self.URI), 'Type' : str(self.Type)})
        r.append(self.Transforms.xml('Transforms'))
        r.append(self.DigestMethod.xml('DigestMethod'))
        pass # DigestValueType -> base64Binary not handled
        return r


class SignatureValueType:
    def __init__(self):
        pass

    @classmethod
    def build(self, element):
        return SignatureValueType( )

    def xml(self, elementName):
        r = ET.Element(elementName)
        return r


class StatementAbstractType:
    def __init__(self):
        pass

    @classmethod
    def build(self, element):
        return StatementAbstractType( )

    def xml(self, elementName):
        r = ET.Element(elementName)
        return r


class CipherDataType:
    def __init__(self):
        pass

    @classmethod
    def build(self, element):
        return CipherDataType( )

    def xml(self, elementName):
        r = ET.Element(elementName)
        return r


class EncryptionPropertyType:
    def __init__(self, Target, Id):
        self.Target = Target  # anyURI
        self.Id = Id  # ID

    @classmethod
    def build(self, element):
        return EncryptionPropertyType(
                element.get('Target'),
                element.get('Id')
               )

    def xml(self, elementName):
        r = ET.Element(elementName, attrib={'Target' : str(self.Target), 'Id' : str(self.Id)})
        return r


class KeyInfoType:
    def __init__(self, Id):
        self.Id = Id  # ID

    @classmethod
    def build(self, element):
        return KeyInfoType(
                element.get('Id')
               )

    def xml(self, elementName):
        r = ET.Element(elementName, attrib={'Id' : str(self.Id)})
        return r


class OneTimeUseType:
    def __init__(self):
        pass

    @classmethod
    def build(self, element):
        return OneTimeUseType( )

    def xml(self, elementName):
        r = ET.Element(elementName)
        return r


class AssertionType:
    def __init__(self, Version, ID, IssueInstant, Issuer, Signature, Subject, Conditions, Advice, Statement, AuthnStatement, AuthzDecisionStatement, AttributeStatement):
        self.Version = Version  # string
        self.ID = ID  # ID
        self.IssueInstant = IssueInstant  # dateTime
        self.Issuer = Issuer  # NameIDType
        self.Signature = Signature  # SignatureType
        self.Subject = Subject  # SubjectType
        self.Conditions = Conditions  # ConditionsType
        self.Advice = Advice  # AdviceType
        self.Statement = Statement  # StatementAbstractType
        self.AuthnStatement = AuthnStatement  # AuthnStatementType
        self.AuthzDecisionStatement = AuthzDecisionStatement  # AuthzDecisionStatementType
        self.AttributeStatement = AttributeStatement  # AttributeStatementType

    @classmethod
    def build(self, element):
        return AssertionType(
                element.get('Version'),
                element.get('ID'),
                element.get('IssueInstant'),
                NameIDType.build(element.find('Issuer')) if element.find('Issuer') is not None else None,
                SignatureType.build(element.find('Signature')) if element.find('Signature') is not None else None,
                SubjectType.build(element.find('Subject')) if element.find('Subject') is not None else None,
                ConditionsType.build(element.find('Conditions')) if element.find('Conditions') is not None else None,
                AdviceType.build(element.find('Advice')) if element.find('Advice') is not None else None,
                StatementAbstractType.build(element.find('Statement')) if element.find('Statement') is not None else None,
                AuthnStatementType.build(element.find('AuthnStatement')) if element.find('AuthnStatement') is not None else None,
                AuthzDecisionStatementType.build(element.find('AuthzDecisionStatement')) if element.find('AuthzDecisionStatement') is not None else None,
                AttributeStatementType.build(element.find('AttributeStatement')) if element.find('AttributeStatement') is not None else None
               )

    def xml(self, elementName):
        r = ET.Element(elementName, attrib={'Version' : str(self.Version), 'ID' : str(self.ID), 'IssueInstant' : str(self.IssueInstant)})
        r.append(self.Issuer.xml('Issuer'))
        r.append(self.Signature.xml(ET.QName('http://www.w3.org/2000/09/xmldsig#', 'Signature')))
        r.append(self.Subject.xml('Subject'))
        r.append(self.Conditions.xml('Conditions'))
        r.append(self.Advice.xml('Advice'))
        r.append(self.Statement.xml('Statement'))
        r.append(self.AuthnStatement.xml('AuthnStatement'))
        r.append(self.AuthzDecisionStatement.xml('AuthzDecisionStatement'))
        r.append(self.AttributeStatement.xml('AttributeStatement'))
        return r


class KeyInfoConfirmationDataType:
    def __init__(self, KeyInfo):
        self.KeyInfo = KeyInfo  # KeyInfoType

    @classmethod
    def build(self, element):
        return KeyInfoConfirmationDataType(
                KeyInfoType.build(element.find('KeyInfo')) if element.find('KeyInfo') is not None else None
               )

    def xml(self, elementName):
        r = ET.Element(elementName)
        r.append(self.KeyInfo.xml(ET.QName('http://www.w3.org/2000/09/xmldsig#', 'KeyInfo')))
        return r


class AdviceType:
    def __init__(self):
        pass

    @classmethod
    def build(self, element):
        return AdviceType( )

    def xml(self, elementName):
        r = ET.Element(elementName)
        return r


class X509IssuerSerialType:
    def __init__(self, X509IssuerName, X509SerialNumber):
        self.X509IssuerName = X509IssuerName  # string
        self.X509SerialNumber = X509SerialNumber  # integer

    @classmethod
    def build(self, element):
        return X509IssuerSerialType(
                element.findtext('X509IssuerName'),
                int(element.findtext('X509SerialNumber'))
               )

    def xml(self, elementName):
        r = ET.Element(elementName)
        ET.SubElement(r, 'X509IssuerName').text = self.X509IssuerName
        ET.SubElement(r, 'X509SerialNumber').text = str(self.X509SerialNumber)
        return r


class BaseIDAbstractType:
    def __init__(self):
        pass

    @classmethod
    def build(self, element):
        return BaseIDAbstractType( )

    def xml(self, elementName):
        r = ET.Element(elementName)
        return r


class AuthzDecisionStatementType:
    def __init__(self, Action, Evidence):
        self.Action = Action  # ActionType
        self.Evidence = Evidence  # EvidenceType

    @classmethod
    def build(self, element):
        return AuthzDecisionStatementType(
                ActionType.build(element.find('Action')) if element.find('Action') is not None else None,
                EvidenceType.build(element.find('Evidence')) if element.find('Evidence') is not None else None
               )

    def xml(self, elementName):
        r = ET.Element(elementName)
        r.append(self.Action.xml('Action'))
        r.append(self.Evidence.xml('Evidence'))
        return r


class TransformsType:
    def __init__(self, Transform):
        self.Transform = Transform  # TransformType

    @classmethod
    def build(self, element):
        return TransformsType(
                TransformType.build(element.find('Transform')) if element.find('Transform') is not None else None
               )

    def xml(self, elementName):
        r = ET.Element(elementName)
        r.append(self.Transform.xml('Transform'))
        return r


        pass ## Couldn not dereference element type properly<ElementReference {http://www.w3.org/2001/04/xmlenc#}ReferenceList> <Element {http://www.w3.org/2001/04/xmlenc#}ReferenceList : <ComplexType None> | 1-1> <ComplexType None>
class EncryptedKeyType:
    def __init__(self, Id, Type, MimeType, Encoding, ReferenceList, CarriedKeyName, EncryptionMethod, KeyInfo, CipherData, EncryptionProperties):
        self.Id = Id  # ID
        self.Type = Type  # anyURI
        self.MimeType = MimeType  # string
        self.Encoding = Encoding  # anyURI
        self.CarriedKeyName = CarriedKeyName  # string
        self.EncryptionMethod = EncryptionMethod  # EncryptionMethodType
        self.KeyInfo = KeyInfo  # KeyInfoType
        self.CipherData = CipherData  # CipherDataType
        self.EncryptionProperties = EncryptionProperties  # EncryptionPropertiesType

    @classmethod
    def build(self, element):
        return EncryptedKeyType(
                element.get('Id'),
                element.get('Type'),
                element.get('MimeType'),
                element.get('Encoding'),
                element.findtext('CarriedKeyName'),
                EncryptionMethodType.build(element.find('EncryptionMethod')) if element.find('EncryptionMethod') is not None else None,
                KeyInfoType.build(element.find('KeyInfo')) if element.find('KeyInfo') is not None else None,
                CipherDataType.build(element.find('CipherData')) if element.find('CipherData') is not None else None,
                EncryptionPropertiesType.build(element.find('EncryptionProperties')) if element.find('EncryptionProperties') is not None else None
               )

    def xml(self, elementName):
        r = ET.Element(elementName, attrib={'Id' : str(self.Id), 'Type' : str(self.Type), 'MimeType' : str(self.MimeType), 'Encoding' : str(self.Encoding)})
        if self.CarriedKeyName:
            ET.SubElement(r, 'CarriedKeyName').text = self.CarriedKeyName
        if self.EncryptionMethod:
            r.append(self.EncryptionMethod.xml('EncryptionMethod'))
        r.append(self.KeyInfo.xml(ET.QName('http://www.w3.org/2000/09/xmldsig#', 'KeyInfo')))
        r.append(self.CipherData.xml('CipherData'))
        r.append(self.EncryptionProperties.xml('EncryptionProperties'))
        return r


class RetrievalMethodType:
    def __init__(self, URI, Type, Transforms):
        self.URI = URI  # anyURI
        self.Type = Type  # anyURI
        self.Transforms = Transforms  # TransformsType

    @classmethod
    def build(self, element):
        return RetrievalMethodType(
                element.get('URI'),
                element.get('Type'),
                TransformsType.build(element.find('Transforms')) if element.find('Transforms') is not None else None
               )

    def xml(self, elementName):
        r = ET.Element(elementName, attrib={'URI' : str(self.URI), 'Type' : str(self.Type)})
        r.append(self.Transforms.xml('Transforms'))
        return r


class ReferenceType:
    def __init__(self, URI):
        self.URI = URI  # anyURI

    @classmethod
    def build(self, element):
        return ReferenceType(
                element.get('URI')
               )

    def xml(self, elementName):
        r = ET.Element(elementName, attrib={'URI' : str(self.URI)})
        return r


class DSAKeyValueType:
    def __init__(self, G, Y, J):
        self.G = G  # CryptoBinary -> base64Binary
        self.Y = Y  # CryptoBinary -> base64Binary
        self.J = J  # CryptoBinary -> base64Binary

    @classmethod
    def build(self, element):
        return DSAKeyValueType(
                None,
                None,
                None
               )

    def xml(self, elementName):
        r = ET.Element(elementName)
        if self.G:
            pass # CryptoBinary -> base64Binary not handled
        pass # CryptoBinary -> base64Binary not handled
        if self.J:
            pass # CryptoBinary -> base64Binary not handled
        return r


class TransformType:
    def __init__(self, Algorithm):
        self.Algorithm = Algorithm  # anyURI

    @classmethod
    def build(self, element):
        return TransformType(
                element.get('Algorithm')
               )

    def xml(self, elementName):
        r = ET.Element(elementName, attrib={'Algorithm' : str(self.Algorithm)})
        return r


class NameIDType:
    def __init__(self):
        pass

    @classmethod
    def build(self, element):
        return NameIDType( )

    def xml(self, elementName):
        r = ET.Element(elementName)
        return r


class AttributeStatementType:
    def __init__(self, Attribute, EncryptedAttribute):
        self.Attribute = Attribute  # AttributeType
        self.EncryptedAttribute = EncryptedAttribute  # EncryptedElementType

    @classmethod
    def build(self, element):
        return AttributeStatementType(
                AttributeType.build(element.find('Attribute')) if element.find('Attribute') is not None else None,
                EncryptedElementType.build(element.find('EncryptedAttribute')) if element.find('EncryptedAttribute') is not None else None
               )

    def xml(self, elementName):
        r = ET.Element(elementName)
        r.append(self.Attribute.xml('Attribute'))
        r.append(self.EncryptedAttribute.xml('EncryptedAttribute'))
        return r


class PGPDataType:
    def __init__(self):
        pass

    @classmethod
    def build(self, element):
        return PGPDataType( )

    def xml(self, elementName):
        r = ET.Element(elementName)
        return r


class EncryptionPropertiesType:
    def __init__(self, Id, EncryptionProperty):
        self.Id = Id  # ID
        self.EncryptionProperty = EncryptionProperty  # EncryptionPropertyType

    @classmethod
    def build(self, element):
        return EncryptionPropertiesType(
                element.get('Id'),
                EncryptionPropertyType.build(element.find('EncryptionProperty')) if element.find('EncryptionProperty') is not None else None
               )

    def xml(self, elementName):
        r = ET.Element(elementName, attrib={'Id' : str(self.Id)})
        r.append(self.EncryptionProperty.xml('EncryptionProperty'))
        return r


class SubjectConfirmationType:
    def __init__(self, Method, SubjectConfirmationData, BaseID, NameID, EncryptedID):
        self.Method = Method  # anyURI
        self.SubjectConfirmationData = SubjectConfirmationData  # SubjectConfirmationDataType
        self.BaseID = BaseID  # BaseIDAbstractType
        self.NameID = NameID  # NameIDType
        self.EncryptedID = EncryptedID  # EncryptedElementType

    @classmethod
    def build(self, element):
        return SubjectConfirmationType(
                element.get('Method'),
                SubjectConfirmationDataType.build(element.find('SubjectConfirmationData')) if element.find('SubjectConfirmationData') is not None else None,
                BaseIDAbstractType.build(element.find('BaseID')) if element.find('BaseID') is not None else None,
                NameIDType.build(element.find('NameID')) if element.find('NameID') is not None else None,
                EncryptedElementType.build(element.find('EncryptedID')) if element.find('EncryptedID') is not None else None
               )

    def xml(self, elementName):
        r = ET.Element(elementName, attrib={'Method' : str(self.Method)})
        r.append(self.SubjectConfirmationData.xml('SubjectConfirmationData'))
        r.append(self.BaseID.xml('BaseID'))
        r.append(self.NameID.xml('NameID'))
        r.append(self.EncryptedID.xml('EncryptedID'))
        return r


class RSAKeyValueType:
    def __init__(self, Modulus, Exponent):
        self.Modulus = Modulus  # CryptoBinary -> base64Binary
        self.Exponent = Exponent  # CryptoBinary -> base64Binary

    @classmethod
    def build(self, element):
        return RSAKeyValueType(
                None,
                None
               )

    def xml(self, elementName):
        r = ET.Element(elementName)
        pass # CryptoBinary -> base64Binary not handled
        pass # CryptoBinary -> base64Binary not handled
        return r


class AttributeType:
    def __init__(self, Name, NameFormat, FriendlyName, AttributeValue):
        self.Name = Name  # string
        self.NameFormat = NameFormat  # anyURI
        self.FriendlyName = FriendlyName  # string
        self.AttributeValue = AttributeValue  # anyType

    @classmethod
    def build(self, element):
        return AttributeType(
                element.get('Name'),
                element.get('NameFormat'),
                element.get('FriendlyName'),
                None
               )

    def xml(self, elementName):
        r = ET.Element(elementName, attrib={'Name' : str(self.Name), 'NameFormat' : str(self.NameFormat), 'FriendlyName' : str(self.FriendlyName)})
        pass # anyType not handled
        return r


class SubjectConfirmationDataType:
    def __init__(self):
        pass

    @classmethod
    def build(self, element):
        return SubjectConfirmationDataType( )

    def xml(self, elementName):
        r = ET.Element(elementName)
        return r


class AuthnContextType:
    def __init__(self, AuthenticatingAuthority):
        self.AuthenticatingAuthority = AuthenticatingAuthority  # anyURI

    @classmethod
    def build(self, element):
        return AuthnContextType(
                element.findtext('AuthenticatingAuthority')
               )

    def xml(self, elementName):
        r = ET.Element(elementName)
        ET.SubElement(r, 'AuthenticatingAuthority').text = str(self.AuthenticatingAuthority)
        return r


class TypeValuePairType:
    def __init__(self, type, namespace, value):
        self.type = type  # string
        self.namespace = namespace  # anyURI
        self.value = value  # [ string ]

    @classmethod
    def build(self, element):
        return TypeValuePairType(
                element.get('type'),
                element.get('namespace'),
                element.findtext('value')
               )

    def xml(self, elementName):
        r = ET.Element(elementName, attrib={'type' : str(self.type), 'namespace' : str(self.namespace)})
        if self.value:
            for el in self.value:
                ET.SubElement(r, 'value').text = el
        return r


class ServiceExceptionType:
    def __init__(self, nsaId, connectionId, serviceType, errorId, text, variables, childException):
        self.nsaId = nsaId  # NsaIdType -> anyURI
        self.connectionId = connectionId  # ConnectionIdType -> string
        self.serviceType = serviceType  # string
        self.errorId = errorId  # string
        self.text = text  # string
        self.variables = variables  # [ TypeValuePairType ]
        self.childException = childException  # [ ServiceExceptionType ]

    @classmethod
    def build(self, element):
        return ServiceExceptionType(
                element.findtext('nsaId'),
                element.findtext('connectionId'),
                element.findtext('serviceType'),
                element.findtext('errorId'),
                element.findtext('text'),
                [ TypeValuePairType.build(e) for e in element.find('variables') ] if element.find('variables') is not None else None,
                [ ServiceExceptionType.build(e) for e in element.findall('nsaId') ] if element.find('nsaId') is not None else None
               )

    def xml(self, elementName):
        r = ET.Element(elementName)
        ET.SubElement(r, 'nsaId').text = str(self.nsaId)
        if self.connectionId:
            ET.SubElement(r, 'connectionId').text = self.connectionId
        if self.serviceType:
            ET.SubElement(r, 'serviceType').text = self.serviceType
        ET.SubElement(r, 'errorId').text = self.errorId
        ET.SubElement(r, 'text').text = self.text
        if self.variables:
            ET.SubElement(r, 'variables').extend( [ e.xml('variables') for e in self.variables ] )
        if self.childException:
            for el in self.childException:
                ET.SubElement(r, 'childException').extend( [ e.xml('nsaId') for e in el ] )
        return r


class ConditionsType:
    def __init__(self, NotBefore, NotOnOrAfter):
        self.NotBefore = NotBefore  # dateTime
        self.NotOnOrAfter = NotOnOrAfter  # dateTime

    @classmethod
    def build(self, element):
        return ConditionsType(
                element.get('NotBefore'),
                element.get('NotOnOrAfter')
               )

    def xml(self, elementName):
        r = ET.Element(elementName, attrib={'NotBefore' : str(self.NotBefore), 'NotOnOrAfter' : str(self.NotOnOrAfter)})
        return r


class ConditionAbstractType:
    def __init__(self):
        pass

    @classmethod
    def build(self, element):
        return ConditionAbstractType( )

    def xml(self, elementName):
        r = ET.Element(elementName)
        return r


class SubjectType:
    def __init__(self):
        pass

    @classmethod
    def build(self, element):
        return SubjectType( )

    def xml(self, elementName):
        r = ET.Element(elementName)
        return r


class EncryptedElementType:
    def __init__(self, EncryptedData, EncryptedKey):
        self.EncryptedData = EncryptedData  # EncryptedDataType
        self.EncryptedKey = EncryptedKey  # EncryptedKeyType

    @classmethod
    def build(self, element):
        return EncryptedElementType(
                EncryptedDataType.build(element.find('EncryptedData')) if element.find('EncryptedData') is not None else None,
                EncryptedKeyType.build(element.find('EncryptedKey')) if element.find('EncryptedKey') is not None else None
               )

    def xml(self, elementName):
        r = ET.Element(elementName)
        r.append(self.EncryptedData.xml(ET.QName('http://www.w3.org/2001/04/xmlenc#', 'EncryptedData')))
        r.append(self.EncryptedKey.xml(ET.QName('http://www.w3.org/2001/04/xmlenc#', 'EncryptedKey')))
        return r


class AgreementMethodType:
    def __init__(self, Algorithm, KANonce, OriginatorKeyInfo, RecipientKeyInfo):
        self.Algorithm = Algorithm  # anyURI
        self.KANonce = KANonce  # base64Binary
        self.OriginatorKeyInfo = OriginatorKeyInfo  # KeyInfoType
        self.RecipientKeyInfo = RecipientKeyInfo  # KeyInfoType

    @classmethod
    def build(self, element):
        return AgreementMethodType(
                element.get('Algorithm'),
                None,
                KeyInfoType.build(element.find('OriginatorKeyInfo')) if element.find('OriginatorKeyInfo') is not None else None,
                KeyInfoType.build(element.find('RecipientKeyInfo')) if element.find('RecipientKeyInfo') is not None else None
               )

    def xml(self, elementName):
        r = ET.Element(elementName, attrib={'Algorithm' : str(self.Algorithm)})
        if self.KANonce:
            pass # base64Binary not handled
        if self.OriginatorKeyInfo:
            r.append(self.OriginatorKeyInfo.xml(ET.QName('http://www.w3.org/2000/09/xmldsig#', 'OriginatorKeyInfo')))
        if self.RecipientKeyInfo:
            r.append(self.RecipientKeyInfo.xml(ET.QName('http://www.w3.org/2000/09/xmldsig#', 'RecipientKeyInfo')))
        return r


class SignedInfoType:
    def __init__(self, Id, CanonicalizationMethod, SignatureMethod, Reference):
        self.Id = Id  # ID
        self.CanonicalizationMethod = CanonicalizationMethod  # CanonicalizationMethodType
        self.SignatureMethod = SignatureMethod  # SignatureMethodType
        self.Reference = Reference  # ReferenceType

    @classmethod
    def build(self, element):
        return SignedInfoType(
                element.get('Id'),
                CanonicalizationMethodType.build(element.find('CanonicalizationMethod')) if element.find('CanonicalizationMethod') is not None else None,
                SignatureMethodType.build(element.find('SignatureMethod')) if element.find('SignatureMethod') is not None else None,
                ReferenceType.build(element.find('Reference')) if element.find('Reference') is not None else None
               )

    def xml(self, elementName):
        r = ET.Element(elementName, attrib={'Id' : str(self.Id)})
        r.append(self.CanonicalizationMethod.xml('CanonicalizationMethod'))
        r.append(self.SignatureMethod.xml('SignatureMethod'))
        r.append(self.Reference.xml('Reference'))
        return r


class ManifestType:
    def __init__(self, Id, Reference):
        self.Id = Id  # ID
        self.Reference = Reference  # ReferenceType

    @classmethod
    def build(self, element):
        return ManifestType(
                element.get('Id'),
                ReferenceType.build(element.find('Reference')) if element.find('Reference') is not None else None
               )

    def xml(self, elementName):
        r = ET.Element(elementName, attrib={'Id' : str(self.Id)})
        r.append(self.Reference.xml('Reference'))
        return r


class SignaturePropertyType:
    def __init__(self, Target, Id):
        self.Target = Target  # anyURI
        self.Id = Id  # ID

    @classmethod
    def build(self, element):
        return SignaturePropertyType(
                element.get('Target'),
                element.get('Id')
               )

    def xml(self, elementName):
        r = ET.Element(elementName, attrib={'Target' : str(self.Target), 'Id' : str(self.Id)})
        return r


Action = ET.QName('urn:oasis:names:tc:SAML:2.0:assertion', 'Action')
AuthzDecisionStatement = ET.QName('urn:oasis:names:tc:SAML:2.0:assertion', 'AuthzDecisionStatement')
EncryptedKey = ET.QName('http://www.w3.org/2001/04/xmlenc#', 'EncryptedKey')
AttributeValue = ET.QName('urn:oasis:names:tc:SAML:2.0:assertion', 'AttributeValue')
AuthnStatement = ET.QName('urn:oasis:names:tc:SAML:2.0:assertion', 'AuthnStatement')
CipherData = ET.QName('http://www.w3.org/2001/04/xmlenc#', 'CipherData')
SignatureProperty = ET.QName('http://www.w3.org/2000/09/xmldsig#', 'SignatureProperty')
EncryptedID = ET.QName('urn:oasis:names:tc:SAML:2.0:assertion', 'EncryptedID')
ReferenceList = ET.QName('http://www.w3.org/2001/04/xmlenc#', 'ReferenceList')
Advice = ET.QName('urn:oasis:names:tc:SAML:2.0:assertion', 'Advice')
Manifest = ET.QName('http://www.w3.org/2000/09/xmldsig#', 'Manifest')
SignatureMethod = ET.QName('http://www.w3.org/2000/09/xmldsig#', 'SignatureMethod')
SignatureValue = ET.QName('http://www.w3.org/2000/09/xmldsig#', 'SignatureValue')
BaseID = ET.QName('urn:oasis:names:tc:SAML:2.0:assertion', 'BaseID')
DigestMethod = ET.QName('http://www.w3.org/2000/09/xmldsig#', 'DigestMethod')
Issuer = ET.QName('urn:oasis:names:tc:SAML:2.0:assertion', 'Issuer')
Reference = ET.QName('http://www.w3.org/2000/09/xmldsig#', 'Reference')
Object = ET.QName('http://www.w3.org/2000/09/xmldsig#', 'Object')
Attribute = ET.QName('urn:oasis:names:tc:SAML:2.0:assertion', 'Attribute')
EncryptedData = ET.QName('http://www.w3.org/2001/04/xmlenc#', 'EncryptedData')
AuthnContextDeclRef = ET.QName('urn:oasis:names:tc:SAML:2.0:assertion', 'AuthnContextDeclRef')
Conditions = ET.QName('urn:oasis:names:tc:SAML:2.0:assertion', 'Conditions')
Signature = ET.QName('http://www.w3.org/2000/09/xmldsig#', 'Signature')
KeyValue = ET.QName('http://www.w3.org/2000/09/xmldsig#', 'KeyValue')
SignatureProperties = ET.QName('http://www.w3.org/2000/09/xmldsig#', 'SignatureProperties')
SignedInfo = ET.QName('http://www.w3.org/2000/09/xmldsig#', 'SignedInfo')
AuthenticatingAuthority = ET.QName('urn:oasis:names:tc:SAML:2.0:assertion', 'AuthenticatingAuthority')
Subject = ET.QName('urn:oasis:names:tc:SAML:2.0:assertion', 'Subject')
NameID = ET.QName('urn:oasis:names:tc:SAML:2.0:assertion', 'NameID')
RetrievalMethod = ET.QName('http://www.w3.org/2000/09/xmldsig#', 'RetrievalMethod')
serviceException = ET.QName('http://schemas.ogf.org/nsi/2013/07/framework/types', 'serviceException')
SubjectLocality = ET.QName('urn:oasis:names:tc:SAML:2.0:assertion', 'SubjectLocality')
Condition = ET.QName('urn:oasis:names:tc:SAML:2.0:assertion', 'Condition')
Statement = ET.QName('urn:oasis:names:tc:SAML:2.0:assertion', 'Statement')
CipherReference = ET.QName('http://www.w3.org/2001/04/xmlenc#', 'CipherReference')
CanonicalizationMethod = ET.QName('http://www.w3.org/2000/09/xmldsig#', 'CanonicalizationMethod')
nsiHeader = ET.QName('http://schemas.ogf.org/nsi/2013/07/framework/headers', 'nsiHeader')
KeyName = ET.QName('http://www.w3.org/2000/09/xmldsig#', 'KeyName')
Transforms = ET.QName('http://www.w3.org/2000/09/xmldsig#', 'Transforms')
AssertionURIRef = ET.QName('urn:oasis:names:tc:SAML:2.0:assertion', 'AssertionURIRef')
MgmtData = ET.QName('http://www.w3.org/2000/09/xmldsig#', 'MgmtData')
RSAKeyValue = ET.QName('http://www.w3.org/2000/09/xmldsig#', 'RSAKeyValue')
OneTimeUse = ET.QName('urn:oasis:names:tc:SAML:2.0:assertion', 'OneTimeUse')
KeyInfo = ET.QName('http://www.w3.org/2000/09/xmldsig#', 'KeyInfo')
Audience = ET.QName('urn:oasis:names:tc:SAML:2.0:assertion', 'Audience')
DigestValue = ET.QName('http://www.w3.org/2000/09/xmldsig#', 'DigestValue')
AuthnContextDecl = ET.QName('urn:oasis:names:tc:SAML:2.0:assertion', 'AuthnContextDecl')
AssertionIDRef = ET.QName('urn:oasis:names:tc:SAML:2.0:assertion', 'AssertionIDRef')
Assertion = ET.QName('urn:oasis:names:tc:SAML:2.0:assertion', 'Assertion')
EncryptionProperties = ET.QName('http://www.w3.org/2001/04/xmlenc#', 'EncryptionProperties')
SubjectConfirmation = ET.QName('urn:oasis:names:tc:SAML:2.0:assertion', 'SubjectConfirmation')
AgreementMethod = ET.QName('http://www.w3.org/2001/04/xmlenc#', 'AgreementMethod')
SPKIData = ET.QName('http://www.w3.org/2000/09/xmldsig#', 'SPKIData')
EncryptedAttribute = ET.QName('urn:oasis:names:tc:SAML:2.0:assertion', 'EncryptedAttribute')
EncryptionProperty = ET.QName('http://www.w3.org/2001/04/xmlenc#', 'EncryptionProperty')
X509Data = ET.QName('http://www.w3.org/2000/09/xmldsig#', 'X509Data')
PGPData = ET.QName('http://www.w3.org/2000/09/xmldsig#', 'PGPData')
EncryptedAssertion = ET.QName('urn:oasis:names:tc:SAML:2.0:assertion', 'EncryptedAssertion')
AudienceRestriction = ET.QName('urn:oasis:names:tc:SAML:2.0:assertion', 'AudienceRestriction')
SubjectConfirmationData = ET.QName('urn:oasis:names:tc:SAML:2.0:assertion', 'SubjectConfirmationData')
AuthnContext = ET.QName('urn:oasis:names:tc:SAML:2.0:assertion', 'AuthnContext')
ProxyRestriction = ET.QName('urn:oasis:names:tc:SAML:2.0:assertion', 'ProxyRestriction')
DSAKeyValue = ET.QName('http://www.w3.org/2000/09/xmldsig#', 'DSAKeyValue')
Transform = ET.QName('http://www.w3.org/2000/09/xmldsig#', 'Transform')
AttributeStatement = ET.QName('urn:oasis:names:tc:SAML:2.0:assertion', 'AttributeStatement')
Evidence = ET.QName('urn:oasis:names:tc:SAML:2.0:assertion', 'Evidence')
AuthnContextClassRef = ET.QName('urn:oasis:names:tc:SAML:2.0:assertion', 'AuthnContextClassRef')

def parse(input_):

    root = ET.fromstring(input_)

    return parseElement(root)


def parseElement(element):

    type_map = {
        '{urn:oasis:names:tc:SAML:2.0:assertion}Action' : ActionType,
        '{urn:oasis:names:tc:SAML:2.0:assertion}AuthzDecisionStatement' : AuthzDecisionStatementType,
        '{http://www.w3.org/2001/04/xmlenc#}EncryptedKey' : EncryptedKeyType,
        '{urn:oasis:names:tc:SAML:2.0:assertion}AuthnStatement' : AuthnStatementType,
        '{http://www.w3.org/2001/04/xmlenc#}CipherData' : CipherDataType,
        '{http://www.w3.org/2000/09/xmldsig#}SignatureProperty' : SignaturePropertyType,
        '{urn:oasis:names:tc:SAML:2.0:assertion}EncryptedID' : EncryptedElementType,
        '{urn:oasis:names:tc:SAML:2.0:assertion}Advice' : AdviceType,
        '{http://www.w3.org/2000/09/xmldsig#}Manifest' : ManifestType,
        '{http://www.w3.org/2000/09/xmldsig#}SignatureMethod' : SignatureMethodType,
        '{http://www.w3.org/2000/09/xmldsig#}SignatureValue' : SignatureValueType,
        '{urn:oasis:names:tc:SAML:2.0:assertion}BaseID' : BaseIDAbstractType,
        '{http://www.w3.org/2000/09/xmldsig#}DigestMethod' : DigestMethodType,
        '{urn:oasis:names:tc:SAML:2.0:assertion}Issuer' : NameIDType,
        '{http://www.w3.org/2000/09/xmldsig#}Reference' : ReferenceType,
        '{http://www.w3.org/2000/09/xmldsig#}Object' : ObjectType,
        '{urn:oasis:names:tc:SAML:2.0:assertion}Attribute' : AttributeType,
        '{http://www.w3.org/2001/04/xmlenc#}EncryptedData' : EncryptedDataType,
        '{urn:oasis:names:tc:SAML:2.0:assertion}Conditions' : ConditionsType,
        '{http://www.w3.org/2000/09/xmldsig#}Signature' : SignatureType,
        '{http://www.w3.org/2000/09/xmldsig#}KeyValue' : KeyValueType,
        '{http://www.w3.org/2000/09/xmldsig#}SignatureProperties' : SignaturePropertiesType,
        '{http://www.w3.org/2000/09/xmldsig#}SignedInfo' : SignedInfoType,
        '{urn:oasis:names:tc:SAML:2.0:assertion}Subject' : SubjectType,
        '{urn:oasis:names:tc:SAML:2.0:assertion}NameID' : NameIDType,
        '{http://www.w3.org/2000/09/xmldsig#}RetrievalMethod' : RetrievalMethodType,
        '{http://schemas.ogf.org/nsi/2013/07/framework/types}serviceException' : ServiceExceptionType,
        '{urn:oasis:names:tc:SAML:2.0:assertion}SubjectLocality' : SubjectLocalityType,
        '{urn:oasis:names:tc:SAML:2.0:assertion}Condition' : ConditionAbstractType,
        '{urn:oasis:names:tc:SAML:2.0:assertion}Statement' : StatementAbstractType,
        '{http://www.w3.org/2001/04/xmlenc#}CipherReference' : CipherReferenceType,
        '{http://www.w3.org/2000/09/xmldsig#}CanonicalizationMethod' : CanonicalizationMethodType,
        '{http://schemas.ogf.org/nsi/2013/07/framework/headers}nsiHeader' : CommonHeaderType,
        '{http://www.w3.org/2000/09/xmldsig#}Transforms' : TransformsType,
        '{http://www.w3.org/2000/09/xmldsig#}RSAKeyValue' : RSAKeyValueType,
        '{urn:oasis:names:tc:SAML:2.0:assertion}OneTimeUse' : OneTimeUseType,
        '{http://www.w3.org/2000/09/xmldsig#}KeyInfo' : KeyInfoType,
        '{urn:oasis:names:tc:SAML:2.0:assertion}Assertion' : AssertionType,
        '{http://www.w3.org/2001/04/xmlenc#}EncryptionProperties' : EncryptionPropertiesType,
        '{urn:oasis:names:tc:SAML:2.0:assertion}SubjectConfirmation' : SubjectConfirmationType,
        '{http://www.w3.org/2001/04/xmlenc#}AgreementMethod' : AgreementMethodType,
        '{http://www.w3.org/2000/09/xmldsig#}SPKIData' : SPKIDataType,
        '{urn:oasis:names:tc:SAML:2.0:assertion}EncryptedAttribute' : EncryptedElementType,
        '{http://www.w3.org/2001/04/xmlenc#}EncryptionProperty' : EncryptionPropertyType,
        '{http://www.w3.org/2000/09/xmldsig#}X509Data' : X509DataType,
        '{http://www.w3.org/2000/09/xmldsig#}PGPData' : PGPDataType,
        '{urn:oasis:names:tc:SAML:2.0:assertion}EncryptedAssertion' : EncryptedElementType,
        '{urn:oasis:names:tc:SAML:2.0:assertion}AudienceRestriction' : AudienceRestrictionType,
        '{urn:oasis:names:tc:SAML:2.0:assertion}SubjectConfirmationData' : SubjectConfirmationDataType,
        '{urn:oasis:names:tc:SAML:2.0:assertion}AuthnContext' : AuthnContextType,
        '{urn:oasis:names:tc:SAML:2.0:assertion}ProxyRestriction' : ProxyRestrictionType,
        '{http://www.w3.org/2000/09/xmldsig#}DSAKeyValue' : DSAKeyValueType,
        '{http://www.w3.org/2000/09/xmldsig#}Transform' : TransformType,
        '{urn:oasis:names:tc:SAML:2.0:assertion}AttributeStatement' : AttributeStatementType,
        '{urn:oasis:names:tc:SAML:2.0:assertion}Evidence' : EvidenceType
    }

    if not element.tag in type_map:
        raise ValueError('No type mapping for tag %s' % element.tag)

    type_ = type_map[element.tag]
    return type_.build(element)
