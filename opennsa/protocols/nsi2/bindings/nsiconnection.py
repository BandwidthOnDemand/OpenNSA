## Generated by pyxsdgen

from xml.etree import ElementTree as ET

# types

class QueryRecursiveResultCriteriaType(object):
    def __init__(self, version, schedule, serviceType, children):
        self.version = version  # int
        self.schedule = schedule  # ScheduleType
        self.serviceType = serviceType  # string
        self.children = children  # [ ChildRecursiveType ]

    @classmethod
    def build(self, element):
        return QueryRecursiveResultCriteriaType(
                element.get('version'),
                ScheduleType.build(element.find('schedule')),
                element.findtext('serviceType') if element.find('serviceType') is not None else None,
                [ ChildRecursiveType.build(e) for e in element.find('children') ] if element.find('children') is not None else None
               )

    def xml(self, elementName):
        r = ET.Element(elementName, attrib={'version' : str(self.version)})
        r.append(self.schedule.xml('schedule'))
        if self.serviceType is not None:
            ET.SubElement(r, 'serviceType').text = self.serviceType
        if self.children is not None:
            ET.SubElement(r, 'children').extend( [ e.xml('children') for e in self.children ] )
        return r


class QuerySummaryResultCriteriaType(object):
    def __init__(self, version, schedule, serviceType, children):
        self.version = version  # int
        self.schedule = schedule  # ScheduleType
        self.serviceType = serviceType  # string
        self.children = children  # [ ChildSummaryType ]

    @classmethod
    def build(self, element):
        return QuerySummaryResultCriteriaType(
                element.get('version'),
                ScheduleType.build(element.find('schedule')),
                element.findtext('serviceType') if element.find('serviceType') is not None else None,
                [ ChildSummaryType.build(e) for e in element.find('children') ] if element.find('children') is not None else None
               )

    def xml(self, elementName):
        r = ET.Element(elementName, attrib={'version' : str(self.version)})
        r.append(self.schedule.xml('schedule'))
        if self.serviceType is not None:
            ET.SubElement(r, 'serviceType').text = self.serviceType
        if self.children is not None:
            ET.SubElement(r, 'children').extend( [ e.xml('children') for e in self.children ] )
        return r


class ScheduleType(object):
    def __init__(self, startTime, endTime):
        self.startTime = startTime  # DateTimeType -> dateTime
        self.endTime = endTime  # DateTimeType -> dateTime

    @classmethod
    def build(self, element):
        return ScheduleType(
                element.findtext('startTime') if element.find('startTime') is not None else None,
                element.findtext('endTime') if element.find('endTime') is not None else None
               )

    def xml(self, elementName):
        r = ET.Element(elementName)
        if self.startTime is not None:
            ET.SubElement(r, 'startTime').text = str(self.startTime)
        if self.endTime is not None:
            ET.SubElement(r, 'endTime').text = str(self.endTime)
        return r


class ReserveConfirmedType(object):
    def __init__(self, connectionId, globalReservationId, description, criteria):
        self.connectionId = connectionId  # ConnectionIdType -> string
        self.globalReservationId = globalReservationId  # GlobalReservationIdType -> anyURI
        self.description = description  # string
        self.criteria = criteria  # ReservationConfirmCriteriaType

    @classmethod
    def build(self, element):
        return ReserveConfirmedType(
                element.findtext('connectionId'),
                element.findtext('globalReservationId') if element.find('globalReservationId') is not None else None,
                element.findtext('description') if element.find('description') is not None else None,
                ReservationConfirmCriteriaType.build(element.find('criteria'))
               )

    def xml(self, elementName):
        r = ET.Element(elementName)
        ET.SubElement(r, 'connectionId').text = self.connectionId
        if self.globalReservationId is not None:
            ET.SubElement(r, 'globalReservationId').text = str(self.globalReservationId)
        if self.description is not None:
            ET.SubElement(r, 'description').text = self.description
        r.append(self.criteria.xml('criteria'))
        return r


class QueryFailedType(object):
    def __init__(self, serviceException):
        self.serviceException = serviceException  # ServiceExceptionType

    @classmethod
    def build(self, element):
        return QueryFailedType(
                ServiceExceptionType.build(element.find('serviceException'))
               )

    def xml(self, elementName):
        r = ET.Element(elementName)
        r.append(self.serviceException.xml(ET.QName('http://schemas.ogf.org/nsi/2013/07/framework/types', 'serviceException')))
        return r


class ErrorEventType(object):
    def __init__(self, connectionId, notificationId, timeStamp, event, additionalInfo, serviceException):
        self.connectionId = connectionId  # ConnectionIdType -> string
        self.notificationId = notificationId  # NotificationIdType -> int
        self.timeStamp = timeStamp  # DateTimeType -> dateTime
        self.event = event  # EventEnumType -> string
        self.additionalInfo = additionalInfo  # [ TypeValuePairType ]
        self.serviceException = serviceException  # ServiceExceptionType

    @classmethod
    def build(self, element):
        return ErrorEventType(
                element.findtext('connectionId'),
                int(element.findtext('notificationId')),
                element.findtext('timeStamp'),
                element.findtext('event'),
                [ TypeValuePairType.build(e) for e in element.find('additionalInfo') ] if element.find('additionalInfo') is not None else None,
                ServiceExceptionType.build(element.find('serviceException')) if element.find('serviceException') is not None else None
               )

    def xml(self, elementName):
        r = ET.Element(elementName)
        ET.SubElement(r, 'connectionId').text = self.connectionId
        ET.SubElement(r, 'notificationId').text = str(self.notificationId)
        ET.SubElement(r, 'timeStamp').text = str(self.timeStamp)
        ET.SubElement(r, 'event').text = self.event
        if self.additionalInfo is not None:
            ET.SubElement(r, 'additionalInfo').extend( [ e.xml(ET.QName('http://schemas.ogf.org/nsi/2013/07/framework/types', 'additionalInfo')) for e in self.additionalInfo ] )
        if self.serviceException is not None:
            r.append(self.serviceException.xml(ET.QName('http://schemas.ogf.org/nsi/2013/07/framework/types', 'serviceException')))
        return r


class QuerySummaryResultType(object):
    def __init__(self, connectionId, globalReservationId, description, criteria, requesterNSA, connectionStates, notificationId):
        self.connectionId = connectionId  # ConnectionIdType -> string
        self.globalReservationId = globalReservationId  # GlobalReservationIdType -> anyURI
        self.description = description  # string
        self.criteria = criteria  # [ QuerySummaryResultCriteriaType ]
        self.requesterNSA = requesterNSA  # NsaIdType -> anyURI
        self.connectionStates = connectionStates  # ConnectionStatesType
        self.notificationId = notificationId  # NotificationIdType -> int

    @classmethod
    def build(self, element):
        return QuerySummaryResultType(
                element.findtext('connectionId'),
                element.findtext('globalReservationId') if element.find('globalReservationId') is not None else None,
                element.findtext('description') if element.find('description') is not None else None,
                [ QuerySummaryResultCriteriaType.build(e) for e in element.findall('criteria') ] if element.find('criteria') is not None else None,
                element.findtext('requesterNSA'),
                ConnectionStatesType.build(element.find('connectionStates')),
                int(element.findtext('notificationId')) if element.find('notificationId') is not None else None
               )

    def xml(self, elementName):
        r = ET.Element(elementName)
        ET.SubElement(r, 'connectionId').text = self.connectionId
        if self.globalReservationId is not None:
            ET.SubElement(r, 'globalReservationId').text = str(self.globalReservationId)
        if self.description is not None:
            ET.SubElement(r, 'description').text = self.description
        if self.criteria is not None:
            for el in self.criteria:
                ET.SubElement(r, 'criteria').extend( el.xml('criteria') )
        ET.SubElement(r, 'requesterNSA').text = str(self.requesterNSA)
        r.append(self.connectionStates.xml('connectionStates'))
        if self.notificationId is not None:
            ET.SubElement(r, 'notificationId').text = str(self.notificationId)
        return r


class DataPlaneStateChangeRequestType(object):
    def __init__(self, connectionId, notificationId, timeStamp, dataPlaneStatus):
        self.connectionId = connectionId  # ConnectionIdType -> string
        self.notificationId = notificationId  # NotificationIdType -> int
        self.timeStamp = timeStamp  # DateTimeType -> dateTime
        self.dataPlaneStatus = dataPlaneStatus  # DataPlaneStatusType

    @classmethod
    def build(self, element):
        return DataPlaneStateChangeRequestType(
                element.findtext('connectionId'),
                int(element.findtext('notificationId')),
                element.findtext('timeStamp'),
                DataPlaneStatusType.build(element.find('dataPlaneStatus'))
               )

    def xml(self, elementName):
        r = ET.Element(elementName)
        ET.SubElement(r, 'connectionId').text = self.connectionId
        ET.SubElement(r, 'notificationId').text = str(self.notificationId)
        ET.SubElement(r, 'timeStamp').text = str(self.timeStamp)
        r.append(self.dataPlaneStatus.xml('dataPlaneStatus'))
        return r


class GenericFailedType(object):
    def __init__(self, connectionId, connectionStates, serviceException):
        self.connectionId = connectionId  # ConnectionIdType -> string
        self.connectionStates = connectionStates  # ConnectionStatesType
        self.serviceException = serviceException  # ServiceExceptionType

    @classmethod
    def build(self, element):
        return GenericFailedType(
                element.findtext('connectionId'),
                ConnectionStatesType.build(element.find('connectionStates')),
                ServiceExceptionType.build(element.find('serviceException'))
               )

    def xml(self, elementName):
        r = ET.Element(elementName)
        ET.SubElement(r, 'connectionId').text = self.connectionId
        r.append(self.connectionStates.xml('connectionStates'))
        r.append(self.serviceException.xml(ET.QName('http://schemas.ogf.org/nsi/2013/07/framework/types', 'serviceException')))
        return r


class NotificationBaseType(object):
    def __init__(self, connectionId, notificationId, timeStamp):
        self.connectionId = connectionId  # ConnectionIdType -> string
        self.notificationId = notificationId  # NotificationIdType -> int
        self.timeStamp = timeStamp  # DateTimeType -> dateTime

    @classmethod
    def build(self, element):
        return NotificationBaseType(
                element.findtext('connectionId'),
                int(element.findtext('notificationId')),
                element.findtext('timeStamp')
               )

    def xml(self, elementName):
        r = ET.Element(elementName)
        ET.SubElement(r, 'connectionId').text = self.connectionId
        ET.SubElement(r, 'notificationId').text = str(self.notificationId)
        ET.SubElement(r, 'timeStamp').text = str(self.timeStamp)
        return r


class ReservationRequestCriteriaType(object):
    def __init__(self, version, schedule, serviceType, serviceDefinitions):
        self.version = version  # int
        self.schedule = schedule  # ScheduleType
        self.serviceType = serviceType  # string
        self.serviceDefinitions = serviceDefinitions # { name : service definitions }

    @classmethod
    def build(self, element):
        # we do some manual stuff here
        from . import p2pservices
        service_defs = [ p2pservices.parseElement(e) for e in element if e.tag not in ('schedule', 'serviceType') ]
        return ReservationRequestCriteriaType(
                element.get('version'),
                ScheduleType.build(element.find('schedule')) if element.find('schedule') is not None else None,
                element.findtext('serviceType') if element.find('serviceType') is not None else None,
                service_defs
               )

    def xml(self, elementName):
        r = ET.Element(elementName, attrib={'version' : str(self.version)})
        if self.schedule is not None:
            r.append(self.schedule.xml('schedule'))
        if self.serviceType is not None:
            ET.SubElement(r, 'serviceType').text = self.serviceType
        if self.serviceDefinitions:
            for sn, sd in self.serviceDefinitions.items():
                r.append(sd.xml(sn))
        return r


class ReserveTimeoutRequestType(object):
    def __init__(self, connectionId, notificationId, timeStamp, timeoutValue, originatingConnectionId, originatingNSA):
        self.connectionId = connectionId  # ConnectionIdType -> string
        self.notificationId = notificationId  # NotificationIdType -> int
        self.timeStamp = timeStamp  # DateTimeType -> dateTime
        self.timeoutValue = timeoutValue  # int
        self.originatingConnectionId = originatingConnectionId  # ConnectionIdType -> string
        self.originatingNSA = originatingNSA  # NsaIdType -> anyURI

    @classmethod
    def build(self, element):
        return ReserveTimeoutRequestType(
                element.findtext('connectionId'),
                int(element.findtext('notificationId')),
                element.findtext('timeStamp'),
                int(element.findtext('timeoutValue')),
                element.findtext('originatingConnectionId'),
                element.findtext('originatingNSA')
               )

    def xml(self, elementName):
        r = ET.Element(elementName)
        ET.SubElement(r, 'connectionId').text = self.connectionId
        ET.SubElement(r, 'notificationId').text = str(self.notificationId)
        ET.SubElement(r, 'timeStamp').text = str(self.timeStamp)
        ET.SubElement(r, 'timeoutValue').text = str(self.timeoutValue)
        ET.SubElement(r, 'originatingConnectionId').text = self.originatingConnectionId
        ET.SubElement(r, 'originatingNSA').text = str(self.originatingNSA)
        return r


class ConnectionStatesType(object):
    def __init__(self, reservationState, provisionState, lifecycleState, dataPlaneStatus):
        self.reservationState = reservationState  # ReservationStateEnumType -> string
        self.provisionState = provisionState  # ProvisionStateEnumType -> string
        self.lifecycleState = lifecycleState  # LifecycleStateEnumType -> string
        self.dataPlaneStatus = dataPlaneStatus  # DataPlaneStatusType

    @classmethod
    def build(self, element):
        return ConnectionStatesType(
                element.findtext('reservationState'),
                element.findtext('provisionState') if element.find('provisionState') is not None else None,
                element.findtext('lifecycleState'),
                DataPlaneStatusType.build(element.find('dataPlaneStatus'))
               )

    def xml(self, elementName):
        r = ET.Element(elementName)
        ET.SubElement(r, 'reservationState').text = self.reservationState
        if self.provisionState is not None:
            ET.SubElement(r, 'provisionState').text = self.provisionState
        ET.SubElement(r, 'lifecycleState').text = self.lifecycleState
        r.append(self.dataPlaneStatus.xml('dataPlaneStatus'))
        return r


class QueryNotificationConfirmedType(object):
    def __init__(self, errorEvent, reserveTimeout, dataPlaneStateChange, messageDeliveryTimeout):
        self.errorEvent = errorEvent  # ErrorEventType
        self.reserveTimeout = reserveTimeout  # ReserveTimeoutRequestType
        self.dataPlaneStateChange = dataPlaneStateChange  # DataPlaneStateChangeRequestType
        self.messageDeliveryTimeout = messageDeliveryTimeout  # MessageDeliveryTimeoutRequestType

    @classmethod
    def build(self, element):
        return QueryNotificationConfirmedType(
                ErrorEventType.build(element.find('errorEvent')),
                ReserveTimeoutRequestType.build(element.find('reserveTimeout')),
                DataPlaneStateChangeRequestType.build(element.find('dataPlaneStateChange')),
                MessageDeliveryTimeoutRequestType.build(element.find('messageDeliveryTimeout'))
               )

    def xml(self, elementName):
        r = ET.Element(elementName)
        r.append(self.errorEvent.xml('errorEvent'))
        r.append(self.reserveTimeout.xml('reserveTimeout'))
        r.append(self.dataPlaneStateChange.xml('dataPlaneStateChange'))
        r.append(self.messageDeliveryTimeout.xml('messageDeliveryTimeout'))
        return r


class QueryNotificationType(object):
    def __init__(self, connectionId, startNotificationId, endNotificationId):
        self.connectionId = connectionId  # ConnectionIdType -> string
        self.startNotificationId = startNotificationId  # int
        self.endNotificationId = endNotificationId  # int

    @classmethod
    def build(self, element):
        return QueryNotificationType(
                element.findtext('connectionId'),
                int(element.findtext('startNotificationId')) if element.find('startNotificationId') is not None else None,
                int(element.findtext('endNotificationId')) if element.find('endNotificationId') is not None else None
               )

    def xml(self, elementName):
        r = ET.Element(elementName)
        ET.SubElement(r, 'connectionId').text = self.connectionId
        if self.startNotificationId is not None:
            ET.SubElement(r, 'startNotificationId').text = str(self.startNotificationId)
        if self.endNotificationId is not None:
            ET.SubElement(r, 'endNotificationId').text = str(self.endNotificationId)
        return r


class ReservationConfirmCriteriaType(object):
    def __init__(self, version, schedule, serviceType, serviceDefinitions):
        self.version = version  # int
        self.schedule = schedule  # ScheduleType
        self.serviceType = serviceType  # string
        self.serviceDefinitions = serviceDefinitions # [ anyType ]

    @classmethod
    def build(self, element):
        from . import p2pservices
        service_defs = dict( [ (e.tag, p2pservices.parseElement(e)) for e in element if e.tag not in ('schedule', 'serviceType') ] )
        return ReservationConfirmCriteriaType(
                element.get('version'),
                ScheduleType.build(element.find('schedule')),
                element.findtext('serviceType') if element.find('serviceType') is not None else None,
                service_defs
               )

    def xml(self, elementName):
        r = ET.Element(elementName, attrib={'version' : str(self.version)})
        r.append(self.schedule.xml('schedule'))
        if self.serviceType is not None:
            ET.SubElement(r, 'serviceType').text = self.serviceType
        if self.serviceDefinitions:
            for sn, sd in self.serviceDefinitions.items():
                r.append(sd.xml(sn))
        return r


class ReserveResponseType(object):
    def __init__(self, connectionId):
        self.connectionId = connectionId  # ConnectionIdType -> string

    @classmethod
    def build(self, element):
        return ReserveResponseType(
                element.findtext('connectionId')
               )

    def xml(self, elementName):
        r = ET.Element(elementName)
        ET.SubElement(r, 'connectionId').text = self.connectionId
        return r


class GenericRequestType(object):
    def __init__(self, connectionId):
        self.connectionId = connectionId  # ConnectionIdType -> string

    @classmethod
    def build(self, element):
        return GenericRequestType(
                element.findtext('connectionId')
               )

    def xml(self, elementName):
        r = ET.Element(elementName)
        ET.SubElement(r, 'connectionId').text = self.connectionId
        return r


class TypeValuePairType(object):
    def __init__(self, type, namespace, value):
        self.type = type  # string
        self.namespace = namespace  # anyURI
        self.value = value  # [ string ]

    @classmethod
    def build(self, element):
        return TypeValuePairType(
                element.get('type'),
                element.get('namespace'),
                element.findtext('value') if element.find('value') is not None else None
               )

    def xml(self, elementName):
        r = ET.Element(elementName, attrib={'type' : str(self.type), 'namespace' : str(self.namespace)})
        if self.value is not None:
            for el in self.value:
                ET.SubElement(r, 'value').text = el
        return r


class ServiceExceptionType(object):
    def __init__(self, nsaId, connectionId, serviceType, errorId, text, variables, childException):
        self.nsaId = nsaId  # NsaIdType -> anyURI
        self.connectionId = connectionId  # ConnectionIdType -> string
        self.serviceType = serviceType  # string
        self.errorId = errorId  # string
        self.text = text  # string
        self.variables = variables  # [ TypeValuePairType ]
        self.childException = childException  # [ ServiceExceptionType ]

    @classmethod
    def build(self, element):
        return ServiceExceptionType(
                element.findtext('nsaId'),
                element.findtext('connectionId') if element.find('connectionId') is not None else None,
                element.findtext('serviceType') if element.find('serviceType') is not None else None,
                element.findtext('errorId'),
                element.findtext('text'),
                [ TypeValuePairType.build(e) for e in element.find('variables') ] if element.find('variables') is not None else None,
                [ ServiceExceptionType.build(e) for e in element.findall('childException') ] if element.find('childException') is not None else None
               )

    def xml(self, elementName):
        r = ET.Element(elementName)
        ET.SubElement(r, 'nsaId').text = str(self.nsaId)
        if self.connectionId is not None:
            ET.SubElement(r, 'connectionId').text = self.connectionId
        if self.serviceType is not None:
            ET.SubElement(r, 'serviceType').text = self.serviceType
        ET.SubElement(r, 'errorId').text = self.errorId
        ET.SubElement(r, 'text').text = self.text
        if self.variables is not None:
            ET.SubElement(r, 'variables').extend( [ e.xml('variables') for e in self.variables ] )
        if self.childException is not None:
            for el in self.childException:
                ET.SubElement(r, 'childException').extend( el.xml('childException') )
        return r


class GenericConfirmedType(object):
    def __init__(self, connectionId):
        self.connectionId = connectionId  # ConnectionIdType -> string

    @classmethod
    def build(self, element):
        return GenericConfirmedType(
                element.findtext('connectionId')
               )

    def xml(self, elementName):
        r = ET.Element(elementName)
        ET.SubElement(r, 'connectionId').text = self.connectionId
        return r


class ChildRecursiveType(object):
    def __init__(self, order, connectionId, providerNSA, connectionStates, criteria):
        self.order = order  # int
        self.connectionId = connectionId  # ConnectionIdType -> string
        self.providerNSA = providerNSA  # NsaIdType -> anyURI
        self.connectionStates = connectionStates  # ConnectionStatesType
        self.criteria = criteria  # [ QueryRecursiveResultCriteriaType ]

    @classmethod
    def build(self, element):
        return ChildRecursiveType(
                element.get('order'),
                element.findtext('connectionId'),
                element.findtext('providerNSA'),
                ConnectionStatesType.build(element.find('connectionStates')),
                [ QueryRecursiveResultCriteriaType.build(e) for e in element.findall('criteria') ] if element.find('criteria') is not None else None
               )

    def xml(self, elementName):
        r = ET.Element(elementName, attrib={'order' : str(self.order)})
        ET.SubElement(r, 'connectionId').text = self.connectionId
        ET.SubElement(r, 'providerNSA').text = str(self.providerNSA)
        r.append(self.connectionStates.xml('connectionStates'))
        if self.criteria is not None:
            for el in self.criteria:
                ET.SubElement(r, 'criteria').extend( el.xml('criteria') )
        return r


class QueryType(object):
    def __init__(self, connectionId, globalReservationId):
        self.connectionId = connectionId  # [ ConnectionIdType -> string ]
        self.globalReservationId = globalReservationId  # [ GlobalReservationIdType -> anyURI ]

    @classmethod
    def build(self, element):
        return QueryType(
                [ e.text for e in element.findall('connectionId') ],
                [ e.text for e in element.findall('globalReservationId') ]
               )

    def xml(self, elementName):
        r = ET.Element(elementName)
        if self.connectionId is not None:
            for el in self.connectionId:
                ET.SubElement(r, 'connectionId').text = el
        if self.globalReservationId is not None:
            for el in self.globalReservationId:
                ET.SubElement(r, 'globalReservationId').text = str(el)
        return r


class QueryRecursiveResultType(object):
    def __init__(self, connectionId, globalReservationId, description, criteria, requesterNSA, connectionStates, notificationId):
        self.connectionId = connectionId  # ConnectionIdType -> string
        self.globalReservationId = globalReservationId  # GlobalReservationIdType -> anyURI
        self.description = description  # string
        self.criteria = criteria  # [ QueryRecursiveResultCriteriaType ]
        self.requesterNSA = requesterNSA  # NsaIdType -> anyURI
        self.connectionStates = connectionStates  # ConnectionStatesType
        self.notificationId = notificationId  # NotificationIdType -> int

    @classmethod
    def build(self, element):
        return QueryRecursiveResultType(
                element.findtext('connectionId'),
                element.findtext('globalReservationId') if element.find('globalReservationId') is not None else None,
                element.findtext('description') if element.find('description') is not None else None,
                [ QueryRecursiveResultCriteriaType.build(e) for e in element.findall('criteria') ] if element.find('criteria') is not None else None,
                element.findtext('requesterNSA'),
                ConnectionStatesType.build(element.find('connectionStates')),
                int(element.findtext('notificationId')) if element.find('notificationId') is not None else None
               )

    def xml(self, elementName):
        r = ET.Element(elementName)
        ET.SubElement(r, 'connectionId').text = self.connectionId
        if self.globalReservationId is not None:
            ET.SubElement(r, 'globalReservationId').text = str(self.globalReservationId)
        if self.description is not None:
            ET.SubElement(r, 'description').text = self.description
        if self.criteria is not None:
            for el in self.criteria:
                ET.SubElement(r, 'criteria').extend( el.xml('criteria') )
        ET.SubElement(r, 'requesterNSA').text = str(self.requesterNSA)
        r.append(self.connectionStates.xml('connectionStates'))
        if self.notificationId is not None:
            ET.SubElement(r, 'notificationId').text = str(self.notificationId)
        return r


class DataPlaneStatusType(object):
    def __init__(self, active, version, versionConsistent):
        self.active = active  # boolean
        self.version = version  # int
        self.versionConsistent = versionConsistent  # boolean

    @classmethod
    def build(self, element):
        return DataPlaneStatusType(
                True if element.findtext('active') == 'true' else False,
                int(element.findtext('version')),
                True if element.findtext('versionConsistent') == 'true' else False
               )

    def xml(self, elementName):
        r = ET.Element(elementName)
        ET.SubElement(r, 'active').text = 'true' if self.active else 'false'
        ET.SubElement(r, 'version').text = str(self.version)
        ET.SubElement(r, 'versionConsistent').text = 'true' if self.versionConsistent else 'false'
        return r


class GenericErrorType(object):
    def __init__(self, serviceException):
        self.serviceException = serviceException  # ServiceExceptionType

    @classmethod
    def build(self, element):
        return GenericErrorType(
                ServiceExceptionType.build(element.find('serviceException'))
               )

    def xml(self, elementName):
        r = ET.Element(elementName)
        r.append(self.serviceException.xml(ET.QName('http://schemas.ogf.org/nsi/2013/07/framework/types', 'serviceException')))
        return r


class ChildSummaryType(object):
    def __init__(self, order, connectionId, providerNSA, serviceType):
        self.order = order  # int
        self.connectionId = connectionId  # ConnectionIdType -> string
        self.providerNSA = providerNSA  # NsaIdType -> anyURI
        self.serviceType = serviceType  # string

    @classmethod
    def build(self, element):
        return ChildSummaryType(
                element.get('order'),
                element.findtext('connectionId'),
                element.findtext('providerNSA'),
                element.findtext('serviceType') if element.find('serviceType') is not None else None
               )

    def xml(self, elementName):
        r = ET.Element(elementName, attrib={'order' : str(self.order)})
        ET.SubElement(r, 'connectionId').text = self.connectionId
        ET.SubElement(r, 'providerNSA').text = str(self.providerNSA)
        if self.serviceType is not None:
            ET.SubElement(r, 'serviceType').text = self.serviceType
        return r


class MessageDeliveryTimeoutRequestType(object):
    def __init__(self, connectionId, notificationId, timeStamp, correlationId):
        self.connectionId = connectionId  # ConnectionIdType -> string
        self.notificationId = notificationId  # NotificationIdType -> int
        self.timeStamp = timeStamp  # DateTimeType -> dateTime
        self.correlationId = correlationId  # UuidType -> anyURI

    @classmethod
    def build(self, element):
        return MessageDeliveryTimeoutRequestType(
                element.findtext('connectionId'),
                int(element.findtext('notificationId')),
                element.findtext('timeStamp'),
                element.findtext('correlationId')
               )

    def xml(self, elementName):
        r = ET.Element(elementName)
        ET.SubElement(r, 'connectionId').text = self.connectionId
        ET.SubElement(r, 'notificationId').text = str(self.notificationId)
        ET.SubElement(r, 'timeStamp').text = str(self.timeStamp)
        ET.SubElement(r, 'correlationId').text = str(self.correlationId)
        return r


class GenericAcknowledgmentType(object):
    def __init__(self):
        pass

    @classmethod
    def build(self, element):
        return GenericAcknowledgmentType( )

    def xml(self, elementName):
        r = ET.Element(elementName)
        return r


class ReserveType(object):
    def __init__(self, connectionId, globalReservationId, description, criteria):
        self.connectionId = connectionId  # ConnectionIdType -> string
        self.globalReservationId = globalReservationId  # GlobalReservationIdType -> anyURI
        self.description = description  # string
        self.criteria = criteria  # ReservationRequestCriteriaType

    @classmethod
    def build(self, element):
        return ReserveType(
                element.findtext('connectionId') if element.find('connectionId') is not None else None,
                element.findtext('globalReservationId') if element.find('globalReservationId') is not None else None,
                element.findtext('description') if element.find('description') is not None else None,
                ReservationRequestCriteriaType.build(element.find('criteria'))
               )

    def xml(self, elementName):
        r = ET.Element(elementName)
        if self.connectionId is not None:
            ET.SubElement(r, 'connectionId').text = self.connectionId
        if self.globalReservationId is not None:
            ET.SubElement(r, 'globalReservationId').text = str(self.globalReservationId)
        if self.description is not None:
            ET.SubElement(r, 'description').text = self.description
        r.append(self.criteria.xml('criteria'))
        return r


terminate = ET.QName('http://schemas.ogf.org/nsi/2013/07/connection/types', 'terminate')
queryRecursive = ET.QName('http://schemas.ogf.org/nsi/2013/07/connection/types', 'queryRecursive')
reserve = ET.QName('http://schemas.ogf.org/nsi/2013/07/connection/types', 'reserve')
reservation = ET.QName('http://schemas.ogf.org/nsi/2013/07/connection/types', 'reservation')
querySummary = ET.QName('http://schemas.ogf.org/nsi/2013/07/connection/types', 'querySummary')
serviceException = ET.QName('http://schemas.ogf.org/nsi/2013/07/framework/types', 'serviceException')
queryNotificationConfirmed = ET.QName('http://schemas.ogf.org/nsi/2013/07/connection/types', 'queryNotificationConfirmed')
reserveAbortConfirmed = ET.QName('http://schemas.ogf.org/nsi/2013/07/connection/types', 'reserveAbortConfirmed')
querySummarySync = ET.QName('http://schemas.ogf.org/nsi/2013/07/connection/types', 'querySummarySync')
reserveTimeout = ET.QName('http://schemas.ogf.org/nsi/2013/07/connection/types', 'reserveTimeout')
reserveConfirmed = ET.QName('http://schemas.ogf.org/nsi/2013/07/connection/types', 'reserveConfirmed')
reserveCommit = ET.QName('http://schemas.ogf.org/nsi/2013/07/connection/types', 'reserveCommit')
terminateConfirmed = ET.QName('http://schemas.ogf.org/nsi/2013/07/connection/types', 'terminateConfirmed')
querySummaryFailed = ET.QName('http://schemas.ogf.org/nsi/2013/07/connection/types', 'querySummaryFailed')
queryRecursiveFailed = ET.QName('http://schemas.ogf.org/nsi/2013/07/connection/types', 'queryRecursiveFailed')
queryNotificationSyncFailed = ET.QName('http://schemas.ogf.org/nsi/2013/07/connection/types', 'queryNotificationSyncFailed')
querySummarySyncConfirmed = ET.QName('http://schemas.ogf.org/nsi/2013/07/connection/types', 'querySummarySyncConfirmed')
reserveFailed = ET.QName('http://schemas.ogf.org/nsi/2013/07/connection/types', 'reserveFailed')
reserveAbort = ET.QName('http://schemas.ogf.org/nsi/2013/07/connection/types', 'reserveAbort')
reserveCommitConfirmed = ET.QName('http://schemas.ogf.org/nsi/2013/07/connection/types', 'reserveCommitConfirmed')
queryNotificationSyncConfirmed = ET.QName('http://schemas.ogf.org/nsi/2013/07/connection/types', 'queryNotificationSyncConfirmed')
provisionConfirmed = ET.QName('http://schemas.ogf.org/nsi/2013/07/connection/types', 'provisionConfirmed')
querySummaryConfirmed = ET.QName('http://schemas.ogf.org/nsi/2013/07/connection/types', 'querySummaryConfirmed')
queryRecursiveConfirmed = ET.QName('http://schemas.ogf.org/nsi/2013/07/connection/types', 'queryRecursiveConfirmed')
dataPlaneStateChange = ET.QName('http://schemas.ogf.org/nsi/2013/07/connection/types', 'dataPlaneStateChange')
releaseConfirmed = ET.QName('http://schemas.ogf.org/nsi/2013/07/connection/types', 'releaseConfirmed')
queryNotification = ET.QName('http://schemas.ogf.org/nsi/2013/07/connection/types', 'queryNotification')
acknowledgment = ET.QName('http://schemas.ogf.org/nsi/2013/07/connection/types', 'acknowledgment')
queryNotificationSync = ET.QName('http://schemas.ogf.org/nsi/2013/07/connection/types', 'queryNotificationSync')
messageDeliveryTimeout = ET.QName('http://schemas.ogf.org/nsi/2013/07/connection/types', 'messageDeliveryTimeout')
serviceException = ET.QName('http://schemas.ogf.org/nsi/2013/07/connection/types', 'serviceException')
reserveCommitFailed = ET.QName('http://schemas.ogf.org/nsi/2013/07/connection/types', 'reserveCommitFailed')
reserveResponse = ET.QName('http://schemas.ogf.org/nsi/2013/07/connection/types', 'reserveResponse')
provision = ET.QName('http://schemas.ogf.org/nsi/2013/07/connection/types', 'provision')
errorEvent = ET.QName('http://schemas.ogf.org/nsi/2013/07/connection/types', 'errorEvent')
error = ET.QName('http://schemas.ogf.org/nsi/2013/07/connection/types', 'error')
querySummarySyncFailed = ET.QName('http://schemas.ogf.org/nsi/2013/07/connection/types', 'querySummarySyncFailed')
queryNotificationFailed = ET.QName('http://schemas.ogf.org/nsi/2013/07/connection/types', 'queryNotificationFailed')
release = ET.QName('http://schemas.ogf.org/nsi/2013/07/connection/types', 'release')

def parse(input_):

    root = ET.fromstring(input_)

    return parseElement(root)


def parseElement(element):

    type_map = {
        '{http://schemas.ogf.org/nsi/2013/07/connection/types}terminate' : GenericRequestType,
        '{http://schemas.ogf.org/nsi/2013/07/connection/types}queryRecursive' : QueryType,
        '{http://schemas.ogf.org/nsi/2013/07/connection/types}reserve' : ReserveType,
        '{http://schemas.ogf.org/nsi/2013/07/connection/types}reservation' :  QuerySummaryResultType,
        '{http://schemas.ogf.org/nsi/2013/07/connection/types}querySummary' : QueryType,
        '{http://schemas.ogf.org/nsi/2013/07/framework/types}serviceException' : ServiceExceptionType,
        '{http://schemas.ogf.org/nsi/2013/07/connection/types}queryNotificationConfirmed' : QueryNotificationConfirmedType,
        '{http://schemas.ogf.org/nsi/2013/07/connection/types}reserveAbortConfirmed' : GenericConfirmedType,
        '{http://schemas.ogf.org/nsi/2013/07/connection/types}querySummarySync' : QueryType,
        '{http://schemas.ogf.org/nsi/2013/07/connection/types}reserveTimeout' : ReserveTimeoutRequestType,
        '{http://schemas.ogf.org/nsi/2013/07/connection/types}reserveConfirmed' : ReserveConfirmedType,
        '{http://schemas.ogf.org/nsi/2013/07/connection/types}reserveCommit' : GenericRequestType,
        '{http://schemas.ogf.org/nsi/2013/07/connection/types}terminateConfirmed' : GenericConfirmedType,
        '{http://schemas.ogf.org/nsi/2013/07/connection/types}querySummaryFailed' : QueryFailedType,
        '{http://schemas.ogf.org/nsi/2013/07/connection/types}queryRecursiveFailed' : QueryFailedType,
        '{http://schemas.ogf.org/nsi/2013/07/connection/types}queryNotificationSyncFailed' : QueryFailedType,
        '{http://schemas.ogf.org/nsi/2013/07/connection/types}reserveFailed' : GenericFailedType,
        '{http://schemas.ogf.org/nsi/2013/07/connection/types}reserveAbort' : GenericRequestType,
        '{http://schemas.ogf.org/nsi/2013/07/connection/types}reserveCommitConfirmed' : GenericConfirmedType,
        '{http://schemas.ogf.org/nsi/2013/07/connection/types}queryNotificationSyncConfirmed' : QueryNotificationConfirmedType,
        '{http://schemas.ogf.org/nsi/2013/07/connection/types}provisionConfirmed' : GenericConfirmedType,
        '{http://schemas.ogf.org/nsi/2013/07/connection/types}dataPlaneStateChange' : DataPlaneStateChangeRequestType,
        '{http://schemas.ogf.org/nsi/2013/07/connection/types}releaseConfirmed' : GenericConfirmedType,
        '{http://schemas.ogf.org/nsi/2013/07/connection/types}queryNotification' : QueryNotificationType,
        '{http://schemas.ogf.org/nsi/2013/07/connection/types}acknowledgment' : GenericAcknowledgmentType,
        '{http://schemas.ogf.org/nsi/2013/07/connection/types}queryNotificationSync' : QueryNotificationType,
        '{http://schemas.ogf.org/nsi/2013/07/connection/types}messageDeliveryTimeout' : MessageDeliveryTimeoutRequestType,
        '{http://schemas.ogf.org/nsi/2013/07/connection/types}serviceException' : ServiceExceptionType,
        '{http://schemas.ogf.org/nsi/2013/07/connection/types}reserveCommitFailed' : GenericFailedType,
        '{http://schemas.ogf.org/nsi/2013/07/connection/types}reserveResponse' : ReserveResponseType,
        '{http://schemas.ogf.org/nsi/2013/07/connection/types}provision' : GenericRequestType,
        '{http://schemas.ogf.org/nsi/2013/07/connection/types}errorEvent' : ErrorEventType,
        '{http://schemas.ogf.org/nsi/2013/07/connection/types}error' : GenericErrorType,
        '{http://schemas.ogf.org/nsi/2013/07/connection/types}querySummarySyncFailed' : QueryFailedType,
        '{http://schemas.ogf.org/nsi/2013/07/connection/types}queryNotificationFailed' : QueryFailedType,
        '{http://schemas.ogf.org/nsi/2013/07/connection/types}release' : GenericRequestType
    }

    if not element.tag in type_map:
        raise ValueError('No type mapping for tag %s' % element.tag)

    type_ = type_map[element.tag]
    return type_.build(element)
