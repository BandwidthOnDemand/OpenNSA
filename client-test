#!/usr/bin/env python

import uuid, random

from twisted.internet import reactor, defer

from opennsa import jsonrpc, nsa



@defer.inlineCallbacks
def doMain():

    print 'OpenNSA test client'

    proxy = jsonrpc.JSONRPCNSIClient()

    client_nsa      = nsa.NetworkServiceAgent('nsa://none:0')
    provider_net    = nsa.Network('B', nsa.NetworkServiceAgent('nsa://localhost:4322') )
    source_stp      = nsa.STP('B', 'B1' )
    dest_stp        = nsa.STP('E', 'E1')
    #dest_stp        = nsa.STP('D', 'D1')
    service_params  = nsa.ServiceParameters('', '', source_stp, dest_stp)

    reservation_id = uuid.uuid1().hex
    conn_id = 'ccid' + ''.join( [ str(int(random.random() * 10)) for _ in range(4) ] )
    print "Connection id", conn_id

    _ = yield proxy.query(client_nsa, provider_net.nsa, None, None)

    _ = yield proxy.reserve(client_nsa, provider_net.nsa, conn_id, reservation_id, 'Test Connection', service_params, None)
    print "Reservation made"

    _ = yield proxy.query(client_nsa, provider_net.nsa, None, None)

    _ = yield proxy.provision(client_nsa, provider_net.nsa, conn_id, None)
    print "Provision made"

    _ = yield proxy.query(client_nsa, provider_net.nsa, None, None)

    _ = yield proxy.releaseProvision(client_nsa, provider_net.nsa, conn_id, None)
    print "Provision released"

    _ = yield proxy.query(client_nsa, provider_net.nsa, None, None)

    _ = yield proxy.cancelReservation(client_nsa, provider_net.nsa, conn_id, None)
    print "Reservation cancelled"



def main():

    d = defer.maybeDeferred(doMain)

    def p(failure):
        print failure

    d.addErrback(p)
    d.addBoth(lambda _ : reactor.stop() )
    return d



if __name__ == '__main__':
    reactor.callWhenRunning(main)
    reactor.run()

