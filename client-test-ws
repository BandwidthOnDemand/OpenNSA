#!/usr/bin/env python

import uuid
import random
import time
import datetime

from twisted.internet import reactor, defer

from opennsa import nsa, setup


BASE_URL = 'http://%s:%i/NSI/services/ConnectionService'


@defer.inlineCallbacks
def doMain():

    print 'OpenNSA WS test client'

    HOST, PORT = 'localhost', 7080

    client, service, factory = setup.createClient(PORT)

    reactor.listenTCP(PORT, factory)

    client_nsa      = nsa.NetworkServiceAgent(BASE_URL % (HOST, PORT))

    provider_aruba   = nsa.Network('Aruba',   nsa.NetworkServiceAgent(BASE_URL % (HOST, 9080)) )
    provider_bonaire = nsa.Network('Boniare', nsa.NetworkServiceAgent(BASE_URL % (HOST, 9081)) )

    provider_net = provider_aruba
    #provider_net = provider_bonaire

    source_stp      = nsa.STP('Aruba', 'Ashley' )
    #source_stp      = nsa.STP('Aruba', 'Axel' )
    #dest_stp        = nsa.STP('Aruba', 'Aidan')
    #dest_stp        = nsa.STP('Bonaire', 'Betty')
    dest_stp        = nsa.STP('Bonaire', 'Brutus')

    start_time = datetime.datetime.utcfromtimestamp(time.time() + 120 ).isoformat().rsplit('.',1)[0] + 'Z' # two minutes from now
    end_time   = datetime.datetime.utcfromtimestamp(time.time() + 240 ).isoformat().rsplit('.',1)[0] + 'Z' # four minutes from now

    bwp = nsa.BandwidthParameters(1000)
    #service_params  = nsa.ServiceParameters('2011-09-01T08:56:00Z', '2011-10-01T08:56:00Z' , source_stp, dest_stp, bwp)
    service_params  = nsa.ServiceParameters(start_time, end_time, source_stp, dest_stp, bandwidth_params=bwp)
    global_reservation_id = 'gid-' + ''.join( [ str(int(random.random() * 10)) for _ in range(4) ] )
    connection_id = 'conn-' + ''.join( [ str(int(random.random() * 10)) for _ in range(3) ] )

    print "Connection id", connection_id

    try:
        r = yield client.reservation(client_nsa, provider_net.nsa, None, global_reservation_id, 'Test Connection', connection_id, service_params)
        print "Reservation created. Connection ID:", connection_id

        qr = yield client.query(client_nsa, provider_net.nsa, None, "Summary", connection_ids = [ connection_id ] )
        print "State", qr.queryConfirmed.reservationSummary[0].connectionState

        _ = yield client.provision(client_nsa, provider_net.nsa, None, connection_id)
        print "Provision made"

        qr = yield client.query(client_nsa, provider_net.nsa, None, "Summary", connection_ids = [ connection_id ] )
        print "State", qr.queryConfirmed.reservationSummary[0].connectionState

        _ = yield client.release(client_nsa, provider_net.nsa, None, connection_id)
        print "Provision released"

        qr = yield client.query(client_nsa, provider_net.nsa, None, "Summary", connection_ids = [ connection_id ] )
        print "State", qr.queryConfirmed.reservationSummary[0].connectionState

        _ = yield client.terminate(client_nsa, provider_net.nsa, None, connection_id)
        print "Reservation terminated"

        r = yield client.query(client_nsa, provider_net.nsa, None, "Summary", connection_ids = [ connection_id ] )
        print "State", r.queryConfirmed.reservationSummary[0].connectionState

    except Exception, e:
        print "Error:", e

def main():

    d = defer.maybeDeferred(doMain)

    def p(failure):
        print failure

    d.addErrback(p)
    d.addBoth(lambda _ : reactor.stop() )
    return d



if __name__ == '__main__':
    reactor.callWhenRunning(main)
    reactor.run()

