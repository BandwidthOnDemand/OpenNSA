#!/usr/bin/env python

import uuid, random

from twisted.internet import reactor, defer

from opennsa import nsa, setup
#from opennsa.protocols.webservice import client #, service



@defer.inlineCallbacks
def doMain():

    print 'OpenNSA WS test client'

    HOST, PORT = 'localhost', 7080

    client, service, factory = setup.createClient(PORT)

    reactor.listenTCP(PORT, factory)

    service_url = 'http://%s:%i/NSI/services/ConnectionService' % (HOST, PORT)
    client_nsa      = nsa.NetworkServiceAgent(service_url)

    provider_net    = nsa.Network('B', nsa.NetworkServiceAgent('http://localhost:9080/NSI/services/ConnectionService'))
    #provider_net    = nsa.Network('E', nsa.NetworkServiceAgent('http://localhost:9084/NSI/services/ConnectionService')

    source_stp      = nsa.STP('B', 'B1' )
    #source_stp      = nsa.STP('A', 'A1' )
    dest_stp        = nsa.STP('B', 'B2')
    #dest_stp        = nsa.STP('E', 'E1')
    #dest_stp        = nsa.STP('D', 'D1')

    service_params  = nsa.ServiceParameters('2011-09-01T08:56:00Z', '2011-10-01T08:56:00Z' , source_stp, dest_stp, bandwidth_desired = 1000)
    global_reservation_id = 'gid-' + ''.join( [ str(int(random.random() * 10)) for _ in range(4) ] )
    connection_id = 'conn-' + ''.join( [ str(int(random.random() * 10)) for _ in range(3) ] )

    print "Connection id", connection_id

#    _ = yield client.query(client_nsa, provider_net.nsa, None, None)

    # We need to be aware of the reservation request before it is issued as the
    # reservation callback might arrive before the reservation received ACK.
    rd = service.addReservation(provider_net.nsa, connection_id)

    r = yield client.reserve(client_nsa, provider_net.nsa, None, global_reservation_id, 'Test Connection', connection_id, service_params)
    print "Reservation request issued. Reply (correlation id):", r
    r = yield rd
    print "Reservation created"


#    _ = yield client.query(client_nsa, provider_net.nsa, None, None)
#
#    _ = yield client.provision(client_nsa, provider_net.nsa, None, connection_id)
#    print "Provision made"
#
#    _ = yield client.query(client_nsa, provider_net.nsa, None, None)
#
#    _ = yield client.releaseProvision(client_nsa, provider_net.nsa, None, connection_id)
#    print "Provision released"
#
#    _ = yield client.query(client_nsa, provider_net.nsa, None, None)
#
#    _ = yield client.terminateReservation(client_nsa, provider_net.nsa, None, connection_id)
#    print "Reservation cancelled"
#


def main():

    d = defer.maybeDeferred(doMain)

    def p(failure):
        print failure

    d.addErrback(p)
    d.addBoth(lambda _ : reactor.stop() )
    return d



if __name__ == '__main__':
    reactor.callWhenRunning(main)
    reactor.run()

